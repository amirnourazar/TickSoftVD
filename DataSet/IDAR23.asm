

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\ipcscygipc.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 000011B4 (   4532.)
; Section size in file		: 00001200 (   4608.)
; Offset to raw	data for section: 00000400
; Flags	60000060: Text Data Executable Readable
; Alignment	: 16 bytes ?

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, ds:dword_404000
		test	eax, eax
		jz	short loc_401010
		int	3		; Trap to Debugger

loc_401010:				; CODE XREF: start+Dj
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_4012DC
		call	sub_401E10
		mov	esp, ebp
		pop	ebp
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401040:				; CODE XREF: .text:00402194j
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	loc_401B70
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8
aUsageSAsmqTclu	db 'usage : %s -asmq -tclup ',0Ah,0 ; DATA XREF: sub_401092+Do
aSSMQIId	db 9,'%s [-s -m -q] -i id',0Ah,0 ; DATA XREF: sub_401092+1Fo
aSHForHelp_	db 9,'%s -h for help.',0Ah,0 ; DATA XREF: sub_401092+31o

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401092	proc near		; CODE XREF: sub_401268+5Ep
					; sub_4012DC+174p
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	ecx, ds:dword_404010
		push	ecx
		push	offset aUsageSAsmqTclu ; "usage	: %s -asmq -tclup \n"
		call	printf
		pop	eax
		mov	eax, ds:dword_404010
		pop	edx
		push	eax
		push	offset aSSMQIId	; "\t%s	[-s -m -q] -i id\n"
		call	printf
		mov	eax, ds:dword_404010
		pop	edx
		pop	ecx
		push	eax
		push	offset aSHForHelp_ ; "\t%s -h for help.\n"
		call	printf
		mov	esp, ebp
		pop	ebp
		retn
sub_401092	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		dd 7 dup(90909090h)
		align 4
aSProvidesInfor	db '%s provides information on ipc facilities for',0
					; DATA XREF: sub_401268+Co
aWhichYouHaveRe	db ' which you have read access.',0 ; DATA XREF: sub_401268+16o
		dd 5 dup(90909090h)
		align 4
aResourceSpecif	db 'Resource Specification:',0Ah ; DATA XREF: sub_401268+22o
		db 9,'-m : shared_mem',0Ah
		db 9,'-q : messages',0
		align 10h
aSSemaphoresAAl	db 9,'-s : semaphores',0Ah ; DATA XREF: sub_401268+2Eo
		db 9,'-a : all (default)',0
		dd 6 dup(90909090h)
		align 4
aOutputFormatTT	db 'Output Format:',0Ah ; DATA XREF: sub_401268+3Ao
		db 9,'-t : time',0Ah
		db 9,'-p : pid',0Ah
		db 9,'-c : creator',0
aLLimitsUSummar	db 9,'-l : limits',0Ah  ; DATA XREF: sub_401268+46o
		db 9,'-u : summary',0
		dd 4 dup(90909090h)
		align 4
aIIdSQMDetailsO	db '-i id [-s -q -m] : details on resource identified by id',0
					; DATA XREF: sub_401268+52o

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401268	proc near		; CODE XREF: sub_4012DC+19Dp

var_18		= dword	ptr -18h

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		mov	eax, ds:dword_404010
		push	eax
		push	offset aSProvidesInfor ; "%s provides information on ipc faciliti"...
		call	printf
		mov	[esp+18h+var_18], offset aWhichYouHaveRe ; " which you have read access."
		call	puts
		mov	[esp+18h+var_18], offset aResourceSpecif ; "Resource Specification:\n\t-m : shared_me"...
		call	puts
		mov	[esp+18h+var_18], offset aSSemaphoresAAl ; "\t-s : semaphores\n\t-a : all (default)"
		call	puts
		mov	[esp+18h+var_18], offset aOutputFormatTT ; "Output Format:\n\t-t : time\n\t-p :	pid\n\t-c"...
		call	puts
		mov	[esp+18h+var_18], offset aLLimitsUSummar ; "\t-l : limits\n\t-u	: summary"
		call	puts
		mov	[esp+18h+var_18], offset aIIdSQMDetailsO ; "-i id [-s -q -m] : details on resource "...
		call	puts
		call	sub_401092
		mov	esp, ebp
		pop	ebp
		retn
sub_401268	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
dword_4012CF	dd 6C637461h		; DATA XREF: sub_4012DC+21r
dword_4012D3	dd 73687075h		; DATA XREF: sub_4012DC+30r
dword_4012D7	dd 3A69716Dh		; DATA XREF: sub_4012DC+46r
byte_4012DB	db 0			; DATA XREF: sub_4012DC+4Er

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4012DC	proc near		; DATA XREF: start+30o

var_48		= dword	ptr -48h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= byte ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		lea	esi, [ebp+var_28]
		and	esp, 0FFFFFFF0h
		mov	ebx, [ebp+arg_4]
		call	sub_401DE0
		mov	edi, [ebp+arg_0]
		call	__main
		mov	eax, ds:dword_4012CF
		mov	[ebp+var_28], eax
		mov	[ebp+var_2C], 0
		mov	eax, ds:dword_4012D3
		mov	[ebp+var_30], 0
		mov	[ebp+var_24], eax
		mov	[ebp+var_34], 0
		mov	eax, ds:dword_4012D7
		mov	[ebp+var_20], eax
		mov	al, ds:byte_4012DB
		mov	[ebp+var_1C], al
		mov	eax, [ebx]
		mov	ds:dword_404010, eax
		nop

loc_40133A:				; CODE XREF: sub_4012DC+79j
					; sub_4012DC+7Bj ...
		push	ecx		; default
		push	esi
		push	ebx
		push	edi
		call	getopt
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jz	loc_401498
		sub	eax, 3Fh	; switch 55 cases
		cmp	eax, 36h
		ja	short loc_40133A ; default
		jmp	ds:off_401360[eax*4] ; switch jump
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
off_401360	dd offset loc_401450, offset loc_40133A, offset	loc_40133A
					; DATA XREF: sub_4012DC+7Br
		dd offset loc_40133A, offset loc_40133A, offset	loc_40133A ; jump table	for switch statement
		dd offset loc_40133A, offset loc_40133A, offset	loc_40133A
		dd offset loc_40133A, offset loc_40133A, offset	loc_40133A
		dd offset loc_40133A, offset loc_40133A, offset	loc_40133A
		dd offset loc_40133A, offset loc_40133A, offset	loc_40133A
		dd offset loc_40133A, offset loc_40133A, offset	loc_40133A
		dd offset loc_40133A, offset loc_40133A, offset	loc_40133A
		dd offset loc_40133A, offset loc_40133A, offset	loc_40133A
		dd offset loc_40133A, offset loc_40133A, offset	loc_40133A
		dd offset loc_40133A, offset loc_40133A, offset	loc_40133A
		dd offset loc_40133A, offset loc_40145F, offset	loc_40133A
		dd offset loc_40133A, offset loc_40133A, offset	loc_40133A
		dd offset loc_40133A, offset loc_40133A, offset	loc_401479
		dd offset loc_40143C, offset loc_40133A, offset	loc_40133A
		dd offset loc_40133A, offset loc_401480, offset	loc_40133A
		dd offset loc_40133A, offset loc_40133A, offset	loc_40146D
		dd offset loc_40133A, offset loc_40148C, offset	loc_40133A
		dd offset loc_40133A
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40143C:				; CODE XREF: sub_4012DC+7Bj
					; DATA XREF: sub_4012DC+84o
		sub	esp, 0Ch	; case 0x69
		mov	eax, [ebx+8]
		push	eax
		call	atoi
		add	esp, 10h
		jmp	loc_40133A	; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401450:				; CODE XREF: sub_4012DC+7Bj
					; DATA XREF: sub_4012DC+84o
		call	sub_401092	; case 0x3F

loc_401455:				; CODE XREF: sub_4012DC+1A2j
		sub	esp, 0Ch
		push	0
		call	exit

loc_40145F:				; CODE XREF: sub_4012DC+7Bj
					; DATA XREF: sub_4012DC+84o
		mov	[ebp+var_30], 1	; case 0x61
		mov	[ebp+var_34], 1

loc_40146D:				; CODE XREF: sub_4012DC+7Bj
					; DATA XREF: sub_4012DC+84o
		mov	[ebp+var_2C], 1	; case 0x71
		jmp	loc_40133A	; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401479:				; CODE XREF: sub_4012DC+7Bj
					; DATA XREF: sub_4012DC+84o
		call	sub_401268	; case 0x68
		jmp	short loc_401455
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401480:				; CODE XREF: sub_4012DC+7Bj
					; DATA XREF: sub_4012DC+84o
		mov	[ebp+var_34], 1	; case 0x6D
		jmp	loc_40133A	; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40148C:				; CODE XREF: sub_4012DC+7Bj
					; DATA XREF: sub_4012DC+84o
		mov	[ebp+var_30], 1	; case 0x73
		jmp	loc_40133A	; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401498:				; CODE XREF: sub_4012DC+6Dj
		mov	edx, [ebp+var_34]
		test	edx, edx
		jnz	short loc_4014C2
		mov	eax, [ebp+var_2C]
		test	eax, eax
		jnz	short loc_4014C2
		mov	eax, [ebp+var_30]
		test	eax, eax
		jnz	short loc_4014C2
		mov	[ebp+var_34], 1
		mov	[ebp+var_30], 1
		mov	[ebp+var_2C], 1

loc_4014C2:				; CODE XREF: sub_4012DC+1C1j
					; sub_4012DC+1C8j ...
		sub	esp, 0Ch
		push	0Ah
		call	putchar
		mov	eax, [ebp+var_34]
		add	esp, 10h
		test	eax, eax
		jnz	short loc_401524

loc_4014D6:				; CODE XREF: sub_4012DC+261j
		mov	eax, [ebp+var_30]
		test	eax, eax
		jnz	short loc_401509

loc_4014DD:				; CODE XREF: sub_4012DC+246j
		mov	eax, [ebp+var_2C]
		test	eax, eax
		jnz	short loc_4014EE

loc_4014E4:				; CODE XREF: sub_4012DC+22Bj
		lea	esp, [ebp-0Ch]
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4014EE:				; CODE XREF: sub_4012DC+206j
		sub	esp, 0Ch
		push	0
		call	sub_4019B8
		mov	[esp+48h+var_48], 0Ah
		call	putchar
		add	esp, 10h
		jmp	short loc_4014E4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401509:				; CODE XREF: sub_4012DC+1FFj
		sub	esp, 0Ch
		push	0
		call	sub_4017D4
		mov	[esp+48h+var_48], 0Ah
		call	putchar
		add	esp, 10h
		jmp	short loc_4014DD
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401524:				; CODE XREF: sub_4012DC+1F8j
		sub	esp, 0Ch
		push	0
		call	sub_401638
		mov	[esp+48h+var_48], 0Ah
		call	putchar
		add	esp, 10h
		jmp	short loc_4014D6
sub_4012DC	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		dd 4 dup(90909090h)
		align 4
aSharedMemorySe	db '---------- Shared Memory Segments --------',0
					; DATA XREF: sub_401638+34o
aStatus		db 'status',0           ; DATA XREF: sub_401638+40o
aNattch		db 'nattch',0           ; DATA XREF: sub_401638+45o
aBytes		db 'bytes',0            ; DATA XREF: sub_401638+4Ao
aKey		db 'key',0              ; DATA XREF: sub_401638+4Fo
					; sub_4017D4+33o
aShmid		db 'shmid',0            ; DATA XREF: sub_401638+54o
		dd 5 dup(90909090h)
		align 4
a10s10s10s10s12	db '     %-10s%-10s%-10s%-10s%-12s',0Ah,0 ; DATA XREF: sub_401638+59o
a_shm10d	db '_shm %-10d',0       ; DATA XREF: sub_401638+86o
aLocked		db 'locked',0           ; DATA XREF: sub_401638+96o
asc_4015E2	db ' ',0                ; DATA XREF: sub_401638+A0o
					; sub_401638+B0o
aDest		db 'dest',0             ; DATA XREF: sub_401638+A6o
a10d10d10d6s6s	db '%-10d%-10d%-10d%-6s%-6s',0Ah,0 ; DATA XREF: sub_401638+CCo
		align 10h
aKernelNotConfi	db 'kernel not configured for shared memory',0 ; DATA XREF: sub_401638+E3o

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401638	proc near		; CODE XREF: sub_4012DC+24Dp

var_678		= dword	ptr -678h
var_658		= dword	ptr -658h
var_640		= dword	ptr -640h
var_62C		= word ptr -62Ch
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 670h
		lea	eax, [ebp+var_678]
		lea	edi, [ebp+var_658]
		push	eax
		push	0Eh
		push	0
		call	shmctl
		add	esp, 10h
		mov	esi, eax
		test	eax, eax
		js	loc_401718
		sub	esp, 0Ch
		xor	ebx, ebx
		push	offset aSharedMemorySe ; "---------- Shared Memory Segments -----"...
		call	puts
		pop	eax
		pop	edx
		push	offset aStatus	; "status"
		push	offset aNattch	; "nattch"
		push	offset aBytes	; "bytes"
		push	offset aKey	; "key"
		push	offset aShmid	; "shmid"
		push	offset a10s10s10s10s12 ; "     %-10s%-10s%-10s%-10s%-12s\n"
		call	printf
		add	esp, 20h
		cmp	ebx, esi
		jle	short loc_4016AA

loc_4016A2:				; CODE XREF: sub_401638+DEj
					; sub_401638+EDj
		lea	esp, [ebp+var_C]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4016AA:				; CODE XREF: sub_401638+68j
					; sub_401638+DCj
		push	eax
		push	edi
		push	0Dh
		push	ebx
		call	shmctl
		add	esp, 10h
		test	eax, eax
		js	short loc_401711
		push	ecx
		push	ecx
		push	eax
		push	offset a_shm10d	; "_shm	%-10d"
		call	printf
		pop	eax
		mov	ax, [edi+10h]
		pop	edx
		mov	edx, offset aLocked ; "locked"
		test	ah, 4
		jnz	short loc_4016DD
		mov	edx, offset asc_4015E2 ; " "

loc_4016DD:				; CODE XREF: sub_401638+9Ej
		push	edx
		mov	edx, offset aDest ; "dest"
		test	ah, 2
		jnz	short loc_4016ED
		mov	edx, offset asc_4015E2 ; " "

loc_4016ED:				; CODE XREF: sub_401638+AEj
		movsx	eax, [ebp+var_62C]
		push	edx
		push	eax
		mov	eax, [ebp+var_640]
		push	eax
		mov	eax, [ebp+var_658]
		push	eax
		push	offset a10d10d10d6s6s ;	"%-10d%-10d%-10d%-6s%-6s\n"
		call	printf
		add	esp, 20h

loc_401711:				; CODE XREF: sub_401638+81j
		inc	ebx
		cmp	ebx, esi
		jle	short loc_4016AA
		jmp	short loc_4016A2
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401718:				; CODE XREF: sub_401638+29j
		sub	esp, 0Ch
		push	offset aKernelNotConfi ; "kernel not configured	for shared memory"...
		call	puts
		jmp	loc_4016A2
sub_401638	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8
aSemaphoreArray	db '---------- Semaphore Arrays --------',0 ; DATA XREF: sub_4017D4+29o
aNsems		db 'nsems',0            ; DATA XREF: sub_4017D4+38o
aSemid		db 'semid',0            ; DATA XREF: sub_4017D4+3Do
a10s10s10s	db '     %-10s%-10s%-10s',0Ah,0 ; DATA XREF: sub_4017D4+42o
a_sem10d	db '_sem %-10d',0       ; DATA XREF: sub_4017D4+7Do
a10d10dCurrents	db '%-10d%-10d currents: ',0 ; DATA XREF: sub_4017D4+97o
a2d		db '%-2d ',0            ; DATA XREF: sub_4017D4+E9o
a2dErrnoD	db '%-2d,errno=%d ',0   ; DATA XREF: sub_4017D4+115o
		align 4
aKernelNotCon_0	db 'kernel not configured for semaphore',0 ; DATA XREF: sub_4017D4+11Fo

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4017D4	proc near		; CODE XREF: sub_4012DC+232p

var_80		= dword	ptr -80h
var_7C		= dword	ptr -7Ch
var_78		= dword	ptr -78h
var_48		= dword	ptr -48h
var_20		= dword	ptr -20h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 7Ch
		lea	eax, [ebp+var_78]
		push	eax
		push	13h
		push	0
		push	0
		call	semctl
		add	esp, 10h
		test	eax, eax
		mov	[ebp+var_7C], eax
		js	loc_4018F0
		sub	esp, 0Ch
		push	offset aSemaphoreArray ; "---------- Semaphore Arrays --------"
		call	puts
		push	offset aKey	; "key"
		push	offset aNsems	; "nsems"
		push	offset aSemid	; "semid"
		push	offset a10s10s10s ; "	  %-10s%-10s%-10s\n"
		call	printf
		mov	eax, [ebp+var_7C]
		mov	[ebp+var_80], 0
		add	esp, 20h
		cmp	[ebp+var_80], eax
		jg	short loc_40189B

loc_401832:				; CODE XREF: sub_4017D4+C5j
		lea	eax, [ebp+var_48]
		push	eax
		mov	eax, [ebp+var_80]
		push	12h
		push	0
		push	eax
		call	semctl
		add	esp, 10h
		mov	edi, eax
		test	eax, eax
		js	short loc_40188C
		xor	esi, esi
		push	eax
		push	eax
		push	edi
		push	offset a_sem10d	; "_sem	%-10d"
		call	printf
		mov	eax, [ebp+var_48]
		add	esp, 0Ch
		push	eax
		mov	eax, [ebp+var_20]
		and	eax, 0FFFFh
		push	eax
		push	offset a10d10dCurrents ; "%-10d%-10d currents: "
		call	printf
		add	esp, 10h
		cmp	word ptr [ebp+var_20], 0
		jnz	short loc_4018A4

loc_40187F:				; CODE XREF: sub_4017D4+103j
		sub	esp, 0Ch
		push	0Ah
		call	putchar
		add	esp, 10h

loc_40188C:				; CODE XREF: sub_4017D4+76j
		mov	ecx, [ebp+var_80]
		mov	eax, [ebp+var_7C]
		inc	ecx
		mov	[ebp+var_80], ecx
		cmp	[ebp+var_80], eax
		jle	short loc_401832

loc_40189B:				; CODE XREF: sub_4017D4+5Cj
					; sub_4017D4+129j
		lea	esp, [ebp+var_C]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4018A4:				; CODE XREF: sub_4017D4+A9j
					; sub_4017D4+101j
		lea	eax, [ebp+var_48]
		push	eax
		push	0Ch
		push	esi
		push	edi
		call	semctl
		add	esp, 10h
		mov	ebx, eax
		test	eax, eax
		js	short loc_4018DA
		push	eax
		push	eax
		push	ebx
		push	offset a2d	; "%-2d	"

loc_4018C2:				; CODE XREF: sub_4017D4+11Aj
		call	printf
		inc	esi
		mov	eax, [ebp+var_20]
		add	esp, 10h
		and	eax, 0FFFFh
		cmp	esi, eax
		jl	short loc_4018A4
		jmp	short loc_40187F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 2

loc_4018DA:				; CODE XREF: sub_4017D4+E4j
		sub	esp, 10h
		call	__errno
		add	esp, 0Ch
		mov	eax, [eax]
		push	eax
		push	ebx
		push	offset a2dErrnoD ; "%-2d,errno=%d "
		jmp	short loc_4018C2
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4018F0:				; CODE XREF: sub_4017D4+20j
		sub	esp, 0Ch
		push	offset aKernelNotCon_0 ; "kernel not configured	for semaphore"
		call	puts
		jmp	short loc_40189B
sub_4017D4	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		dd 4 dup(90909090h)
		align 4
aMessageQueues	db '---------- Message Queues --------',0 ; DATA XREF: sub_4019B8+33o
aMessages	db 'messages',0         ; DATA XREF: sub_4019B8+3Do
aUsedBytes	db 'used-bytes',0       ; DATA XREF: sub_4019B8+42o
aMsqid		db 'msqid',0            ; DATA XREF: sub_4019B8+47o
a10s12s12s	db '     %-10s%-12s%-12s',0Ah,0 ; DATA XREF: sub_4019B8+4Co
a_msg10d	db '_msg %-10d',0       ; DATA XREF: sub_4019B8+78o
a12d12d		db '%-12d%-12d',0Ah,0   ; DATA XREF: sub_4019B8+9Eo
		dd 5 dup(90909090h)
		align 4
aKernelNotCon_1	db 'kernel not configured for message queue',0 ; DATA XREF: sub_4019B8+BBo

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4019B8	proc near		; CODE XREF: sub_4012DC+217p

var_26438	= dword	ptr -26438h
var_26418	= dword	ptr -26418h
var_263E2	= word ptr -263E2h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	eax, 2642Ch
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		call	sub_401DE0
		lea	eax, [ebp+var_26438]
		push	ebx
		push	eax
		push	0Ch
		push	0
		call	msgctl
		add	esp, 10h
		mov	esi, eax
		test	eax, eax
		js	loc_401A70
		sub	esp, 0Ch
		xor	ebx, ebx
		push	offset aMessageQueues ;	"---------- Message Queues --------"
		call	puts
		push	offset aMessages ; "messages"
		push	offset aUsedBytes ; "used-bytes"
		push	offset aMsqid	; "msqid"
		push	offset a10s12s12s ; "	  %-10s%-12s%-12s\n"
		call	printf
		add	esp, 20h
		cmp	ebx, esi
		jg	short loc_401A68
		lea	edi, [ebp+var_26418]
		nop

loc_401A1C:				; CODE XREF: sub_4019B8+AEj
		push	ecx
		push	edi
		push	0Bh
		push	ebx
		call	msgctl
		add	esp, 10h
		test	eax, eax
		js	short loc_401A63
		push	edx
		push	edx
		push	eax
		push	offset a_msg10d	; "_msg	%-10d"
		call	printf
		add	esp, 0Ch
		mov	ax, [ebp+var_263E2]
		and	eax, 0FFFFh
		push	eax
		mov	eax, [ebp-263E4h]
		and	eax, 0FFFFh
		push	eax
		push	offset a12d12d	; "%-12d%-12d\n"
		call	printf
		add	esp, 10h

loc_401A63:				; CODE XREF: sub_4019B8+73j
		inc	ebx
		cmp	ebx, esi
		jle	short loc_401A1C

loc_401A68:				; CODE XREF: sub_4019B8+5Bj
					; sub_4019B8+C5j
		lea	esp, [ebp+var_C]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A70:				; CODE XREF: sub_4019B8+28j
		sub	esp, 0Ch
		push	offset aKernelNotCon_1 ; "kernel not configured	for message queue"...
		call	puts
		jmp	short loc_401A68
sub_4019B8	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		dd 4 dup(90909090h)
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION msgctl. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION semctl. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION shmctl. PRESS KEYPAD "+" TO EXPAND]
		align 10h
aLibgccw32EhSjl	db '-LIBGCCW32-EH-SJLJ-GTHR-CYGWIN',0 ; DATA XREF: .text:00401B91o
					; sub_401CB0+32o
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401AE0	proc near		; DATA XREF: sub_401B00+3Do
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, ds:dword_404050
		call	dword ptr [eax+4]
		mov	esp, ebp
		pop	ebp
		retn
sub_401AE0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401B00	proc near		; CODE XREF: .text:00401C1Fp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		cld
		sub	esp, 8
		mov	ecx, 0Ch
		mov	[esp+8+var_8], ebx
		mov	ebx, [ebp+arg_0]
		mov	[esp+8+var_4], edi
		mov	edi, ebx
		rep stosd
		mov	dword ptr [ebx], 30h
		mov	eax, dword_403000
		mov	dword ptr [ebx+24h], 0FFFFFFFFh
		mov	dword ptr [ebx+4], offset abort
		mov	[ebx+14h], eax
		mov	eax, ds:dword_404020
		mov	dword ptr [ebx+8], offset sub_401AE0
		mov	edx, dword_403008
		mov	dword ptr [ebx+1Ch], 0
		mov	[ebx+20h], eax
		mov	eax, dword_403004
		mov	[ebx+2Ch], edx
		mov	[ebx+28h], eax
		mov	ebx, [esp+8+var_8]
		mov	edi, [esp+8+var_4]
		mov	esp, ebp
		pop	ebp
		retn
sub_401B00	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_401B70:				; CODE XREF: .text:00401044j
		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		mov	[ebp-8], esi
		mov	eax, ds:dword_404050
		mov	[ebp-4], edi
		test	eax, eax
		jz	short loc_401B90

loc_401B85:				; CODE XREF: .text:00401C66j
		mov	esi, [ebp-8]
		mov	edi, [ebp-4]
		mov	esp, ebp
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401B90:				; CODE XREF: .text:00401B83j
		cld
		mov	esi, offset aLibgccw32EhSjl ; "-LIBGCCW32-EH-SJLJ-GTHR-CYGWIN"
		mov	dword ptr [ebp-48h], 41414141h
		lea	edi, [ebp-28h]
		mov	ecx, 7
		mov	dword ptr [ebp-44h], 41414141h
		mov	dword ptr [ebp-40h], 41414141h
		mov	dword ptr [ebp-3Ch], 41414141h
		mov	dword ptr [ebp-38h], 41414141h
		mov	dword ptr [ebp-34h], 41414141h
		mov	dword ptr [ebp-30h], 41414141h
		mov	dword ptr [ebp-2Ch], 41414141h
		movzx	eax, word ptr ds:aLibgccw32EhSjl+1Ch
		rep movsd
		mov	[edi], ax
		movzx	eax, byte ptr ds:aLibgccw32EhSjl+1Eh
		mov	[edi+2], al
		lea	edi, [ebp-48h]
		mov	[esp], edi
		call	FindAtomA
		movzx	eax, ax
		sub	esp, 4
		test	ax, ax
		jnz	loc_401C90
		mov	dword ptr [esp], 30h
		call	malloc
		test	eax, eax
		mov	esi, eax
		jz	loc_401C9C
		mov	[esp], eax
		call	sub_401B00
		mov	[esp], esi
		call	sub_401CB0
		test	ax, ax
		jz	short loc_401C6B
		mov	dword ptr [esp+8], offset sub_401DB0
		mov	dword ptr [esp+4], 0
		mov	dword ptr [esp], 0
		call	pthread_atfork
		lea	esi, [esi+0]

loc_401C50:				; CODE XREF: .text:00401C9Aj
		mov	ds:dword_404050, esi
		lea	eax, [esi+4]
		mov	ds:dword_404040, eax
		lea	eax, [esi+8]
		mov	ds:dword_404060, eax
		jmp	loc_401B85
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C6B:				; CODE XREF: .text:00401C2Fj
		mov	[esp], esi
		call	free
		mov	[esp], edi
		call	FindAtomA
		sub	esp, 4
		movzx	eax, ax
		jmp	short loc_401C90
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401C90:				; CODE XREF: .text:00401C00j
					; .text:00401C81j
		mov	[esp], eax
		call	sub_401D40
		mov	esi, eax
		jmp	short loc_401C50
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C9C:				; CODE XREF: .text:00401C16j
		call	abort
		jmp	short sub_401CB0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401CB0	proc near		; CODE XREF: .text:00401C27p
					; .text:00401CA1j ...

var_68		= dword	ptr -68h
var_58		= dword	ptr -58h
var_38		= dword	ptr -38h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	eax, 1Fh
		mov	ebp, esp
		push	edi
		mov	edx, 1
		push	esi
		push	ebx
		sub	esp, 5Ch	; lpString
		mov	ebx, [ebp+arg_0]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401CD0:				; CODE XREF: sub_401CB0+2Fj
		test	edx, ebx
		mov	cl, 41h
		jnz	short loc_401CD8
		mov	cl, 61h

loc_401CD8:				; CODE XREF: sub_401CB0+24j
		mov	[eax+ebp-58h], cl
		add	edx, edx
		dec	eax
		jns	short loc_401CD0
		cld
		mov	esi, offset aLibgccw32EhSjl ; "-LIBGCCW32-EH-SJLJ-GTHR-CYGWIN"
		lea	edi, [ebp+var_38]
		movzx	eax, word ptr ds:aLibgccw32EhSjl+1Ch
		mov	ecx, 7
		rep movsd
		mov	[edi], ax
		movzx	eax, byte ptr ds:aLibgccw32EhSjl+1Eh
		mov	[edi+2], al
		lea	eax, [ebp+var_58]
		mov	[esp+68h+var_68], eax
		call	AddAtomA
		movzx	esi, ax
		sub	esp, 4
		test	si, si
		jnz	short loc_401D27

loc_401D1B:				; CODE XREF: sub_401CB0+83j
		xor	edx, edx

loc_401D1D:				; CODE XREF: sub_401CB0+85j
		lea	esp, [ebp+var_C]
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D27:				; CODE XREF: sub_401CB0+69j
		mov	[esp+68h+var_68], esi
		call	sub_401D40
		cmp	eax, ebx
		mov	edx, esi
		jnz	short loc_401D1B
		jmp	short loc_401D1D
sub_401CB0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401D40	proc near		; CODE XREF: .text:00401C93p
					; sub_401CB0+7Ap

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_48		= dword	ptr -48h
var_4		= dword	ptr -4
arg_0		= word ptr  8

		push	ebp
		mov	ebp, esp
		lea	edx, [ebp+var_48]
		push	ebx
		sub	esp, 54h	; nAtom
		xor	ebx, ebx
		movzx	eax, [ebp+arg_0]
		mov	[esp+58h+var_50], 3Fh
		mov	[esp+58h+var_54], edx
		mov	[esp+58h+var_58], eax
		call	GetAtomNameA
		sub	esp, 0Ch
		test	eax, eax
		jz	short loc_401D9C
		mov	eax, 1Fh
		mov	edx, 1
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401D80:				; CODE XREF: sub_401D40+4Aj
		cmp	byte ptr [eax+ebp-48h],	41h
		jz	short loc_401D98

loc_401D87:				; CODE XREF: sub_401D40+5Aj
		add	edx, edx
		dec	eax
		jns	short loc_401D80
		cmp	dword ptr [ebx], 30h
		jnz	short loc_401D9C
		mov	eax, ebx
		mov	ebx, [ebp+var_4]
		leave
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D98:				; CODE XREF: sub_401D40+45j
		or	ebx, edx
		jmp	short loc_401D87
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D9C:				; CODE XREF: sub_401D40+29j
					; sub_401D40+4Fj
		call	abort
		jmp	short sub_401DB0
sub_401D40	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401DB0	proc near		; CODE XREF: sub_401D40+61j
					; DATA XREF: .text:00401C31o

var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, ds:dword_404050
		mov	[esp+8+var_8], eax
		call	sub_401CB0
		test	ax, ax
		jz	short loc_401DCC
		mov	esp, ebp
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401DCC:				; CODE XREF: sub_401DB0+16j
		call	abort
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
sub_401DB0	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401DE0	proc near		; CODE XREF: sub_4012DC+14p
					; sub_4019B8+Bp
		push	ecx
		mov	ecx, esp
		add	ecx, 8

loc_401DE6:				; CODE XREF: sub_401DE0+1Bj
		cmp	eax, 1000h
		jb	short loc_401DFD
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		jmp	short loc_401DE6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401DFD:				; CODE XREF: sub_401DE0+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		jmp	eax
sub_401DE0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401E10	proc near		; CODE XREF: start+37p

var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		mov	[esp+18h+var_14], 0
		mov	[esp+18h+var_18], esi
		call	sub_401F30
		sub	esp, 8
		test	eax, eax
		jz	short loc_401E43
		mov	[esp+18h+var_18], 0

loc_401E3D:				; CODE XREF: sub_401E10+57j
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)

loc_401E43:				; CODE XREF: sub_401E10+24j
		sub	esp, 0B0h
		lea	ebx, [esp+0C8h+var_C0]
		mov	[esp+0C8h+var_C0], 0
		mov	[esp+0C8h+var_C4], ebx
		mov	[esp+0C8h+var_C8], esi
		call	sub_401F30
		sub	esp, 8
		mov	[esp+0C8h+var_C8], ebx
		jmp	short loc_401E3D
sub_401E10	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8
; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __errno. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION putchar. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION exit. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION atoi. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION getopt. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION puts. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION printf. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pthread_atfork. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION abort. PRESS KEYPAD "+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401F30	proc near		; CODE XREF: sub_401E10+1Ap
					; sub_401E10+4Cp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		push	ebx
		sub	esp, 4		; lpModuleName
		mov	ebx, [ebp+arg_4]
		test	ebx, ebx
		jz	loc_402030

loc_401F44:				; CODE XREF: sub_401F30+11Cj
		mov	dword ptr [ebx+4], 0A8h
		xor	ecx, ecx
		mov	edx, 6Dh
		mov	dword ptr [ebx+8], 3EDh
		test	eax, eax
		mov	dword ptr [ebx+0Ch], 7
		mov	[ebx+80h], ecx
		mov	[ebx+84h], edx
		mov	dword ptr [ebx+2Ch], offset dword_4021A0
		mov	dword ptr [ebx+30h], offset dword_4021AC
		mov	dword ptr [ebx+14h], offset unk_404030
		jz	loc_402024
		mov	eax, [ebx+0A4h]
		mov	ds:dword_404034, eax

loc_401F94:				; CODE XREF: sub_401F30+FBj
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [ebx+48h], offset sub_402130
		mov	dword ptr [ebx+4Ch], offset sub_402120
		mov	[ebx+28h], eax
		mov	eax, [ebp+0]
		mov	dword ptr [ebx+50h], offset sub_402110
		mov	dword ptr [ebx+54h], offset sub_402100
		mov	dword ptr [ebx+24h], offset unk_404038
		mov	[ebx], eax
		mov	dword ptr [ebx+18h], offset malloc
		mov	dword ptr [ebx+1Ch], offset free
		mov	dword ptr [ebx+20h], offset loc_4020F0
		mov	dword ptr [ebx+44h], offset loc_4020E0
		mov	[esp+8+var_8], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	dword ptr [ebx+34h], offset dword_403000
		mov	dword ptr [ebx+38h], offset unk_403010
		mov	dword ptr [ebx+3Ch], offset dword_404000
		mov	dword ptr [ebx+40h], 404090h
		call	sub_4020B0
		mov	eax, 1

loc_40201D:				; CODE XREF: sub_401F30+113j
		mov	ebx, [ebp+var_4]
		leave
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402024:				; CODE XREF: sub_401F30+53j
		mov	dword ptr [ebx+10h], offset dword_404034
		jmp	loc_401F94
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402030:				; CODE XREF: sub_401F30+Ej
		mov	[esp+8+var_8], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_40201D
		mov	ebx, edx
		mov	eax, 1
		jmp	loc_401F44
sub_401F30	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402070	proc near		; CODE XREF: sub_4020B0+1Dp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ebx, [ebp+arg_4]
		cmp	ecx, ebx
		jnb	short loc_4020A2
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_402090:				; CODE XREF: sub_402070+30j
		mov	eax, [ecx+4]
		mov	edx, esi
		add	edx, eax
		mov	eax, [ecx]
		add	ecx, 8
		add	[edx], eax
		cmp	ecx, ebx
		jb	short loc_402090

loc_4020A2:				; CODE XREF: sub_402070+10j
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_402070	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4020B0	proc near		; CODE XREF: sub_401F30+E3p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+var_10], 400000h
		mov	[esp+18h+var_14], offset dword_404000
		mov	[esp+18h+var_18], offset dword_404000
		call	sub_402070
		mov	esp, ebp
		pop	ebp
		retn
sub_4020B0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_4020E0:				; DATA XREF: sub_401F30+AEo
		jmp	ds:calloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_4020F0:				; DATA XREF: sub_401F30+A7o
		jmp	ds:realloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402100	proc near		; DATA XREF: sub_401F30+89o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402100	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402110	proc near		; DATA XREF: sub_401F30+82o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402110	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402120	proc near		; DATA XREF: sub_401F30+75o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402120	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402130	proc near		; DATA XREF: sub_401F30+6Eo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402130	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION FindAtomA. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION AddAtomA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetAtomNameA. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	loc_401040
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8
dword_4021A0	dd 0FFFFFFFFh, 402190h,	0 ; DATA XREF: sub_401F30+3Eo
dword_4021AC	dd 0FFFFFFFFh, 14h dup(0) ; DATA XREF: sub_401F30+45o
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 00000010 (	 16.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001600
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 403000h
dword_403000	dd 14h			; DATA XREF: sub_401B00+22r
					; sub_401F30+C7o
dword_403004	dd 14h			; DATA XREF: sub_401B00+54r
dword_403008	dd 0			; DATA XREF: sub_401B00+44r
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_403010	db    0	;		; DATA XREF: sub_401F30+CEo
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_data		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 00000090 (	144.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 404000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_404000	dd ?			; DATA XREF: start+6r sub_401F30+D5o ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404010	dd ?			; DATA XREF: sub_401092+6r
					; sub_401092+18r ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404020	dd ?			; DATA XREF: sub_401B00+38r
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_404030	db    ?	;		; DATA XREF: sub_401F30+4Co
		db    ?	;
		db    ?	;
		db    ?	;
dword_404034	dd ?			; DATA XREF: sub_401F30+5Fw
					; sub_401F30+F4o
unk_404038	db    ?	;		; DATA XREF: sub_401F30+90o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404040	dd ?			; DATA XREF: .text:00401C59w
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404050	dd ?			; DATA XREF: sub_401AE0+6r
					; .text:00401B79r ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404060	dd ?			; DATA XREF: .text:00401C61w
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
_bss		ends

;
; Imports from cygcygipc-2
;
; Section 4. (virtual address 00005000)
; Virtual size			: 000002EC (	748.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001800
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp_msgctl:dword ; DATA	XREF: msgctlr
		extrn __imp_semctl:dword ; DATA	XREF: semctlr
		extrn __imp_shmctl:dword ; DATA	XREF: shmctlr


;
; Imports from cygwin1
;
		extrn __imp___errno:dword ; DATA XREF: __errnor
		extrn __imp___main:dword ; DATA	XREF: __mainr
; void _imp_abort(void)
		extrn __imp_abort:dword	; DATA XREF: abortr
; int __cdecl _imp_atoi(const char *)
		extrn __imp_atoi:dword	; DATA XREF: atoir
; void *__cdecl	calloc(size_t,size_t)
		extrn calloc:dword	; DATA XREF: .text:004020E0r
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_401E10+2Dr
					; .text:00402060r
; void __cdecl _imp_exit(int)
		extrn __imp_exit:dword	; DATA XREF: exitr
; void __cdecl _imp_free(void *)
		extrn __imp_free:dword	; DATA XREF: freer
		extrn __imp_getopt:dword ; DATA	XREF: getoptr
; void *__cdecl	_imp_malloc(size_t)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
		extrn __imp_printf:dword ; DATA	XREF: printfr
		extrn __imp_pthread_atfork:dword ; DATA	XREF: pthread_atforkr
		extrn __imp_putchar:dword ; DATA XREF: putcharr
		extrn __imp_puts:dword	; DATA XREF: putsr
; void *__cdecl	realloc(void *,size_t)
		extrn realloc:dword	; DATA XREF: .text:004020F0r


;
; Imports from KERNEL32
;
; ATOM __stdcall __imp_AddAtomA(LPCSTR lpString)
		extrn __imp_AddAtomA:dword ; DATA XREF:	AddAtomAr
; ATOM __stdcall __imp_FindAtomA(LPCSTR	lpString)
		extrn __imp_FindAtomA:dword ; DATA XREF: FindAtomAr
; UINT __stdcall __imp_GetAtomNameA(ATOM nAtom,LPSTR lpBuffer,int nSize)
		extrn __imp_GetAtomNameA:dword ; DATA XREF: GetAtomNameAr
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr



		end start
