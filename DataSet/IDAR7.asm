

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\db2_printlog.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00001540 (   5440.)
; Section size in file		: 00001600 (   5632.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, dword_403000
		test	eax, eax
		jz	short loc_401010
		int	3		; Trap to Debugger

loc_401010:				; CODE XREF: start+Dj
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_4010FC
		call	sub_4018D0
		mov	esp, ebp
		pop	ebp
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
a@CopyrightC199	db '@(#) Copyright (c) 1996, 1997, 1998',0Ah
		db 9,'Sleepycat Software Inc.  All rights reserved.',0Ah,0
		align 10h
a@Db_printlog_c	db '@(#)db_printlog.c',9,'10.17 (Sleepycat) 11/1/98',0
aDb_printlog	db 'db_printlog',0
aHN		db 'h:N',0              ; DATA XREF: sub_4010FC+50o
aInitialization	db 'initialization',0   ; DATA XREF: sub_4010FC+103o
aLog_get	db 'log_get',0          ; DATA XREF: sub_4010FC+133o
aDispatch	db 'dispatch',0         ; DATA XREF: sub_4010FC+1E7o

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4010FC	proc near		; DATA XREF: start+30o

var_48		= dword	ptr -48h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_20		= dword	ptr -20h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 3Ch
		push	edi
		push	esi
		push	ebx
		xor	esi, esi
		mov	ebx, [ebp+arg_0]
		mov	edi, [ebp+arg_4]
		call	__main
		mov	[ebp+var_2C], 0
		jmp	short loc_401149
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_40111C:				; CODE XREF: sub_4010FC+62j
		cmp	eax, 4Eh
		jz	short loc_401130
		jle	short loc_401144
		cmp	eax, 68h
		jnz	short loc_401144
		mov	esi, ds:dword_404004
		jmp	short loc_401149
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401130:				; CODE XREF: sub_4010FC+23j
		add	esp, 0FFFFFFF8h
		push	14h
		push	0
		call	db_value_set
		add	esp, 10h
		jmp	short loc_401149
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401144:				; CODE XREF: sub_4010FC+25j
					; sub_4010FC+2Aj
		call	sub_401484

loc_401149:				; CODE XREF: sub_4010FC+1Dj
					; sub_4010FC+32j ...
		add	esp, 0FFFFFFFCh
		push	offset aHN	; "h:N"
		push	edi
		push	ebx
		call	sub_401F38
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_40111C
		sub	ebx, dword_40300C
		test	ebx, ebx
		jle	short loc_40116F
		call	sub_401484

loc_40116F:				; CODE XREF: sub_4010FC+6Cj
		call	sub_4013E8
		add	esp, 0FFFFFFF4h
		push	esi
		call	sub_401364
		mov	esi, eax
		call	__errno
		add	esp, 0FFFFFFF4h
		mov	ebx, eax
		push	esi
		call	__bam_init_print
		mov	[ebx], eax
		add	esp, 20h
		test	eax, eax
		jnz	short loc_4011FC
		call	__errno
		add	esp, 0FFFFFFF4h
		mov	ebx, eax
		push	esi
		call	__db_init_print
		mov	[ebx], eax
		add	esp, 10h
		test	eax, eax
		jnz	short loc_4011FC
		call	__errno
		add	esp, 0FFFFFFF4h
		mov	ebx, eax
		push	esi
		call	__ham_init_print
		mov	[ebx], eax
		add	esp, 10h
		test	eax, eax
		jnz	short loc_4011FC
		call	__errno
		add	esp, 0FFFFFFF4h
		mov	ebx, eax
		push	esi
		call	__log_init_print
		mov	[ebx], eax
		add	esp, 10h
		test	eax, eax
		jnz	short loc_4011FC
		call	__errno
		add	esp, 0FFFFFFF4h
		mov	ebx, eax
		push	esi
		call	__txn_init_print
		mov	[ebx], eax
		add	esp, 10h
		test	eax, eax
		jz	short loc_40121C

loc_4011FC:				; CODE XREF: sub_4010FC+9Aj
					; sub_4010FC+B3j ...
		add	esp, 0FFFFFFF4h
		push	offset aInitialization ; "initialization"
		call	sub_4015F4
		add	esp, 0FFFFFFF4h
		push	esi
		call	db_appexit
		mov	eax, 1
		jmp	loc_40134D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40121C:				; CODE XREF: sub_4010FC+FEj
		lea	edi, [ebp+var_20]
		cld
		mov	ecx, 6
		rep stosd
		jmp	short loc_40129F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_40122C:				; CODE XREF: sub_4010FC+1DBj
		add	esp, 0FFFFFFF4h
		push	offset aLog_get	; "log_get"
		jmp	loc_4012E8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_40123C:				; CODE XREF: sub_4010FC+1CDj
		cmp	dword ptr [esi+64h], 0
		jz	short loc_401260
		call	__errno
		add	esp, 0FFFFFFF4h
		mov	ebx, eax
		push	0
		lea	eax, [ebp+var_20]
		push	0
		push	edi
		push	eax
		mov	eax, [esi+48h]
		push	eax
		mov	eax, [esi+64h]
		call	eax
		jmp	short loc_40127C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401260:				; CODE XREF: sub_4010FC+144j
		call	__errno
		add	esp, 0FFFFFFF4h
		lea	ecx, [ebp+var_20]
		push	0
		mov	ebx, eax
		push	0
		push	edi
		push	ecx
		mov	eax, [esi+48h]
		push	eax
		call	__db_dispatch

loc_40127C:				; CODE XREF: sub_4010FC+162j
		mov	[ebx], eax
		add	esp, 20h
		mov	eax, ds:dword_40400C
		add	esp, 0FFFFFFF4h
		mov	eax, [eax+8]
		push	eax
		call	fflush
		call	__errno
		add	esp, 10h
		cmp	dword ptr [eax], 0
		jnz	short loc_4012E0

loc_40129F:				; CODE XREF: sub_4010FC+12Bj
		cmp	ds:dword_404014, 0
		jnz	short loc_4012F7
		call	__errno
		lea	edi, [ebp+var_28]
		mov	ebx, eax
		push	0Fh
		lea	eax, [ebp+var_20]
		push	eax
		push	edi
		mov	eax, [esi+48h]
		push	eax
		call	log_get
		mov	[ebx], eax
		add	esp, 10h
		test	eax, eax
		jz	loc_40123C
		call	__errno
		cmp	dword ptr [eax], 0FFFFFFF9h
		jnz	loc_40122C
		jmp	short loc_4012F7
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4012E0:				; CODE XREF: sub_4010FC+1A1j
		add	esp, 0FFFFFFF4h
		push	offset aDispatch ; "dispatch"

loc_4012E8:				; CODE XREF: sub_4010FC+138j
		call	sub_4015F4
		add	esp, 10h
		mov	[ebp+var_2C], 1

loc_4012F7:				; CODE XREF: sub_4010FC+1AAj
					; sub_4010FC+1E1j
		test	esi, esi
		jz	short loc_401328
		call	__errno
		add	esp, 0FFFFFFF4h
		mov	ebx, eax
		push	esi
		call	db_appexit
		mov	[ebx], eax
		add	esp, 10h
		test	eax, eax
		jz	short loc_401328
		add	esp, 0FFFFFFF4h
		mov	[ebp+var_2C], 1
		push	0
		call	sub_4015F4
		add	esp, 10h

loc_401328:				; CODE XREF: sub_4010FC+1FDj
					; sub_4010FC+216j
		mov	eax, ds:dword_404014
		test	eax, eax
		jz	short loc_40134A
		add	esp, 0FFFFFFF8h
		push	0
		push	eax
		call	signal
		add	esp, 0FFFFFFF4h
		mov	eax, ds:dword_404014
		push	eax
		call	raise

loc_40134A:				; CODE XREF: sub_4010FC+233j
		mov	eax, [ebp+var_2C]

loc_40134D:				; CODE XREF: sub_4010FC+11Bj
		lea	esp, [ebp-48h]
		pop	ebx
		pop	esi
		pop	edi
		mov	esp, ebp
		pop	ebp
		retn
sub_4010FC	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
aDb_appinit	db 'db_appinit',0       ; DATA XREF: sub_401364+6Bo
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401364	proc near		; CODE XREF: sub_4010FC+7Cp

var_18		= dword	ptr -18h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		push	ebx
		add	esp, 0FFFFFFF8h
		push	1
		push	7Ch
		call	calloc
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jnz	short loc_40139B
		call	__errno
		add	esp, 0FFFFFFF8h
		mov	dword ptr [eax], 0Ch
		push	0
		push	1
		call	near ptr loc_4014EB+5
		add	esp, 10h

loc_40139B:				; CODE XREF: sub_401364+1Bj
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		mov	[ebx+8], eax
		mov	eax, dword_403004
		mov	[ebx+0Ch], eax
		call	__errno
		push	21h
		mov	esi, eax
		push	ebx
		push	0
		mov	eax, [ebp+arg_0]
		push	eax
		call	db_appinit
		mov	[esi], eax
		add	esp, 10h
		test	eax, eax
		jz	short loc_4013DB
		add	esp, 0FFFFFFF8h
		push	offset aDb_appinit ; "db_appinit"
		push	1
		call	near ptr loc_4014EB+5

loc_4013DB:				; CODE XREF: sub_401364+66j
		lea	esp, [ebp-18h]
		mov	eax, ebx
		pop	ebx
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_401364	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4013E8	proc near		; CODE XREF: sub_4010FC+73p
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		add	esp, 0FFFFFFF8h
		push	offset sub_401424
		push	1
		call	signal
		add	esp, 0FFFFFFF8h
		push	offset sub_401424
		push	2
		call	signal
		add	esp, 20h
		add	esp, 0FFFFFFF8h
		push	offset sub_401424
		push	0Fh
		call	signal
		mov	esp, ebp
		pop	ebp
		retn
sub_4013E8	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401424	proc near		; DATA XREF: sub_4013E8+9o
					; sub_4013E8+18o ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	ds:dword_404014, eax
		test	eax, eax
		jnz	short loc_40143D
		mov	ds:dword_404014, 2

loc_40143D:				; CODE XREF: sub_401424+Dj
		mov	esp, ebp
		pop	ebp
		retn
sub_401424	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		dd 7 dup(90909090h)
		align 4
aUsageDb_printl	db 'usage: db_printlog [-N] [-h home]',0Ah,0 ; DATA XREF: sub_401484+Eo
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401484	proc near		; CODE XREF: sub_4010FC+48p
					; sub_4010FC+6Ep
		push	ebp
		mov	eax, ds:dword_40400C
		mov	ebp, esp
		sub	esp, 8
		add	esp, 0FFFFFFF8h
		push	offset aUsageDb_printl ; "usage: db_printlog [-N] [-h home]\n"
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 0FFFFFFF4h
		push	1
		call	exit
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		inc	eax
		sub	[ebx], ah
		sub	[ebp+72h], esp
		jb	short loc_4014F6
		arpl	[ecx], cx
		xor	[eax], esi
		db	2Eh
		xor	eax, 6C532820h
		db	65h, 65h
		jo	short near ptr loc_40154D+2
		arpl	[ecx+74h], sp
		sub	[eax], esp
		xor	[ecx], esi
		das
		xor	dh, [edi+ebp]
		cmp	[eax], edi
		add	ds:203A73h, ah

loc_4014E9:				; DATA XREF: .text:00401544o
					; sub_4015F4+4Fo
		cmp	ah, [eax]

loc_4014EB:				; CODE XREF: sub_401364+2Fp
					; sub_401364+72p ...
		add	ds:55000A73h, ah
sub_401484	endp

		mov	ebp, esp
		sub	esp, 0Ch

loc_4014F6:				; CODE XREF: sub_401484+42j
		push	edi
		push	esi
		push	ebx
		mov	esi, [ebp+0Ch]
		lea	ebx, [ebp+10h]
		call	__errno
		mov	edi, [eax]
		add	esp, 0FFFFFFFCh
		mov	eax, dword_403004
		push	eax
		mov	eax, ds:dword_40400C
		push	4014E4h
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 10h
		test	esi, esi
		jz	short loc_401555
		add	esp, 0FFFFFFFCh
		mov	eax, ds:dword_40400C
		push	ebx
		push	esi
		mov	eax, [eax+0Ch]
		push	eax
		call	vfprintf
		mov	eax, ds:dword_40400C
		add	esp, 0FFFFFFF8h
		push	offset loc_4014E9
		mov	eax, [eax+0Ch]
		push	eax

loc_40154D:				; CODE XREF: sub_401484+4Ej
		call	fprintf
		add	esp, 20h

loc_401555:				; CODE XREF: .text:00401527j
		add	esp, 0FFFFFFFCh
		add	esp, 0FFFFFFF4h
		push	edi
		call	strerror
		push	eax
		mov	eax, ds:dword_40400C
		push	4014ECh
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 20h
		mov	eax, [ebp+8]
		add	esp, 0FFFFFFF4h
		push	eax
		call	exit

loc_401584:				; DATA XREF: sub_401588+4Fo
					; .text:004016CEo
		or	al, [eax]
		mov	esi, esi

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401588	proc near		; CODE XREF: .text:0040183Bp
					; .text:00401850p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	eax, dword_403004
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		push	ebx
		add	esp, 0FFFFFFFCh
		mov	esi, [ebp+arg_4]
		push	eax
		lea	ebx, [ebp+arg_8]
		mov	eax, ds:dword_40400C
		push	4014E4h
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 10h
		test	esi, esi
		jz	short loc_4015CF
		add	esp, 0FFFFFFFCh
		mov	eax, ds:dword_40400C
		push	ebx
		push	esi
		mov	eax, [eax+0Ch]
		push	eax
		call	vfprintf
		add	esp, 10h

loc_4015CF:				; CODE XREF: sub_401588+2Fj
		mov	eax, ds:dword_40400C
		add	esp, 0FFFFFFF8h
		push	offset loc_401584
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 0FFFFFFF4h
		mov	eax, [ebp+arg_0]
		push	eax
		call	exit
		lea	esi, [esi+0]
sub_401588	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4015F4	proc near		; CODE XREF: sub_4010FC+108p
					; sub_4010FC+1ECp ...

var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	edi
		push	esi
		push	ebx
		mov	esi, [ebp+arg_0]
		lea	ebx, [ebp+arg_4]
		call	__errno
		mov	edi, [eax]
		add	esp, 0FFFFFFFCh
		mov	eax, dword_403004
		push	eax
		push	4014E4h
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 10h
		test	esi, esi
		jz	short loc_401659
		add	esp, 0FFFFFFFCh
		push	ebx
		push	esi
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	vfprintf
		add	esp, 0FFFFFFF8h
		push	offset loc_4014E9
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 20h

loc_401659:				; CODE XREF: sub_4015F4+37j
		add	esp, 0FFFFFFFCh
		add	esp, 0FFFFFFF4h
		push	edi
		call	strerror
		push	eax
		push	4014ECh
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		lea	esp, [ebp-18h]
		pop	ebx
		pop	esi
		pop	edi
		mov	esp, ebp
		pop	ebp
		retn
sub_4015F4	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		push	ebx
		add	esp, 0FFFFFFFCh
		mov	eax, dword_403004
		mov	esi, [ebp+8]
		lea	ebx, [ebp+0Ch]
		push	eax
		push	4014E4h
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 10h
		test	esi, esi
		jz	short loc_4016CB
		add	esp, 0FFFFFFFCh
		push	ebx
		push	esi
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	vfprintf
		add	esp, 10h

loc_4016CB:				; CODE XREF: .text:004016B3j
		add	esp, 0FFFFFFF8h
		push	offset loc_401584
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		lea	esp, [ebp-18h]
		pop	ebx
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
aRrrrrrrrrrrrrr	db '@(#)getlong.c',9,'10.3 (Sleepycat) 4/1'
		db '0/98',0
aS_0		db '%s',0               ; DATA XREF: .text:00401814o
aSInvalidNumeri	db '%s: Invalid numeric argument',0 ; DATA XREF: .text:00401834o
		dd 6 dup(90909090h)
		align 4
aSLessThanMinim	db '%s: Less than minimum value (%ld)',0 ; DATA XREF: .text:00401849o
		dd 7 dup(90909090h)
		align 4
aSGreaterThanMa	db '%s: Greater than maximum value (%ld)',0 ; DATA XREF: .text:00401862o
		align 4
		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	edi
		push	esi
		push	ebx
		mov	esi, [ebp+8]
		mov	edi, [ebp+0Ch]
		call	__errno
		mov	dword ptr [eax], 0
		add	esp, 0FFFFFFFCh
		push	0Ah
		lea	eax, [ebp-4]
		push	eax
		push	esi
		call	strtol
		mov	ebx, eax
		add	esp, 10h
		cmp	ebx, 80000000h
		jz	short loc_401806
		cmp	ebx, 7FFFFFFFh
		jnz	short loc_401823

loc_401806:				; CODE XREF: .text:004017FCj
		call	__errno
		cmp	dword ptr [eax], 22h
		jnz	short loc_401823
		add	esp, 0FFFFFFFCh
		push	esi
		push	offset aS_0	; "%s"
		push	1
		call	near ptr loc_4014EB+5
		add	esp, 10h

loc_401823:				; CODE XREF: .text:00401804j
					; .text:0040180Ej
		cmp	byte ptr [esi],	0
		jz	short loc_401830
		mov	eax, [ebp-4]
		cmp	byte ptr [eax],	0
		jz	short loc_401843

loc_401830:				; CODE XREF: .text:00401826j
		add	esp, 0FFFFFFFCh
		push	esi
		push	offset aSInvalidNumeri ; "%s: Invalid numeric argument"
		push	1
		call	sub_401588
		add	esp, 10h

loc_401843:				; CODE XREF: .text:0040182Ej
		cmp	ebx, edi
		jge	short loc_401858
		push	edi
		push	esi
		push	offset aSLessThanMinim ; "%s: Less than	minimum	value (%ld)"
		push	1
		call	sub_401588
		add	esp, 10h

loc_401858:				; CODE XREF: .text:00401845j
		cmp	ebx, [ebp+10h]
		jle	short loc_40186E
		mov	eax, [ebp+10h]
		push	eax
		push	esi
		push	offset aSGreaterThanMa ; "%s: Greater than maximum value (%ld)"
		push	1
		call	sub_401588

loc_40186E:				; CODE XREF: .text:0040185Bj
		mov	eax, [ebp+14h]
		lea	esp, [ebp-28h]
		mov	[eax], ebx
		pop	ebx
		pop	esi
		pop	edi
		mov	esp, ebp
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION db_appinit. PRESS	KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __db_dispatch. PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION log_get. PRESS KEYPAD "+"	TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION db_appexit. PRESS	KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __txn_init_print.	PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __log_init_print.	PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __ham_init_print.	PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __db_init_print. PRESS KEYPAD "+"	TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __bam_init_print.	PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION db_value_set. PRESS KEYPAD "+" TO	EXPAND]
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4018D0	proc near		; CODE XREF: start+37p

var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		xor	ebx, ebx
		mov	[esp+18h+var_18], esi
		mov	[esp+18h+var_14], 0
		call	sub_402338
		sub	esp, 8
		test	eax, eax
		jnz	short loc_401919
		sub	esp, 0B0h
		lea	ebx, [esp+0C8h+var_C0]
		mov	[esp+0C8h+var_C0], 0
		mov	[esp+0C8h+var_C8], esi
		mov	[esp+0C8h+var_C4], ebx
		call	sub_402338
		sub	esp, 8

loc_401919:				; CODE XREF: sub_4018D0+26j
		mov	[esp+0C8h+var_C8], ebx
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
sub_4018D0	endp

; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 4
dword_401938	dd 90909000h, 7	dup(90909090h) ; DATA XREF: sub_401BD8+67o
					; sub_401BD8+F1o ...
aOptionRequires	db 'option requires an argument -- %c',0 ; DATA XREF: sub_401BD8+210o
					; sub_401BD8+2A6o
		dd 7 dup(90909090h)
		align 4
aOptionRequir_0	db 'option requires an argument -- %s',0 ; DATA XREF: .text:0040221Ao
aAmbiguousOptio	db 'ambiguous option -- %.*s',0 ; DATA XREF: .text:004022FEo
		align 8
aOptionDoesnTTa	db 'option doesn',27h,'t take an argument -- %.*s',0
					; DATA XREF: .text:0040211Fo
aUnknownOptionC	db 'unknown option -- %c',0 ; DATA XREF: sub_401BD8+2FEo
aUnknownOptionS	db 'unknown option -- %s',0 ; DATA XREF: .text:004022AAo
aS		db '%s: ',0             ; DATA XREF: sub_401A38+1Ao
aRrn		db '´&',0
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401A38	proc near		; CODE XREF: sub_401AB8+13p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_8], ebx
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_4]
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_14], offset aS ; "%s: "
		mov	[esp+18h+var_18], eax
		mov	eax, ds:__progname
		mov	eax, [eax]
		mov	[esp+18h+var_10], eax
		call	fprintf
		test	ebx, ebx
		jz	short loc_401A89
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_10], esi
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], eax
		call	vfprintf

loc_401A89:				; CODE XREF: sub_401A38+37j
		mov	[ebp+arg_0], 0Ah
		mov	ebx, [ebp+var_8]
		mov	eax, ds:dword_40400C
		mov	esi, [ebp+var_4]
		mov	eax, [eax+0Ch]
		mov	[ebp+arg_4], eax
		mov	esp, ebp
		pop	ebp
		jmp	loc_4024C0
sub_401A38	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		dd 26B48D90h, 0, 27BC8Dh
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401AB8	proc near		; CODE XREF: sub_401BD8+21Bp
					; sub_401BD8+2B5p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+arg_0]
		lea	edx, [ebp+arg_4]
		mov	[esp+8+var_4], edx
		mov	[esp+8+var_8], eax
		call	sub_401A38
		mov	esp, ebp
		pop	ebp
		retn
sub_401AB8	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401AD8	proc near		; CODE XREF: sub_401B18+33p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	eax, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		cdq
		idiv	ebx
		test	edx, edx
		mov	ecx, edx
		jz	short loc_401B05
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401AF8:				; CODE XREF: sub_401AD8+2Bj
		mov	eax, ebx
		mov	ebx, ecx
		cdq
		idiv	ecx
		test	edx, edx
		mov	ecx, edx
		jnz	short loc_401AF8

loc_401B05:				; CODE XREF: sub_401AD8+11j
		mov	eax, ebx
		pop	ebx
		pop	ebp
		retn
sub_401AD8	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		lea	esi, [esi+0]
		lea	edi, [edi+0]

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401B18	proc near		; CODE XREF: sub_401BD8+94p
					; sub_401F38+5Cp ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edx, [ebp+arg_4]
		sub	eax, ebx
		mov	edi, [ebp+arg_C]
		mov	[ebp+var_18], eax
		mov	eax, esi
		sub	esi, ebx
		sub	eax, edx
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_18]
		mov	[esp+28h+var_28], eax
		mov	eax, [ebp+var_1C]
		mov	[esp+28h+var_24], eax
		call	sub_401AD8
		mov	[ebp+var_14], eax
		mov	eax, esi
		cdq
		idiv	[ebp+var_14]
		mov	[ebp+var_10], 0
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_14]
		cmp	[ebp+var_10], eax
		jge	short loc_401BBC
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401B78:				; CODE XREF: sub_401B18+A2j
		mov	esi, [ebp+arg_4]
		mov	eax, [ebp+var_10]
		mov	ebx, [ebp+var_20]
		add	esi, eax
		test	ebx, ebx
		mov	ecx, esi
		jle	short loc_401BB1
		mov	ebx, [ebp+var_20]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401B98:				; CODE XREF: sub_401B18+97j
		cmp	ecx, [ebp+arg_4]
		jl	short loc_401BC8
		mov	edx, [ebp+var_18]
		sub	ecx, edx

loc_401BA2:				; CODE XREF: sub_401B18+B5j
		mov	edx, [edi+ecx*4]
		dec	ebx
		mov	eax, [edi+esi*4]
		mov	[edi+ecx*4], eax
		mov	[edi+esi*4], edx
		jnz	short loc_401B98

loc_401BB1:				; CODE XREF: sub_401B18+6Fj
		inc	[ebp+var_10]
		mov	eax, [ebp+var_14]
		cmp	[ebp+var_10], eax
		jl	short loc_401B78

loc_401BBC:				; CODE XREF: sub_401B18+51j
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_401BC8:				; CODE XREF: sub_401B18+83j
		mov	eax, [ebp+var_1C]
		add	ecx, eax
		jmp	short loc_401BA2
sub_401B18	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		dd 0B48D9090h, 26h
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401BD8	proc near		; CODE XREF: sub_401F38+1Dp
					; .text:00401FE5p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		xor	ebx, ebx
		sub	esp, 1Ch
		mov	ds:dword_404004, ebx
		mov	ecx, dword_40300C
		mov	esi, [ebp+arg_0]
		mov	edi, [ebp+arg_8]
		test	ecx, ecx
		jnz	loc_401F28
		mov	eax, ds:dword_404000
		test	eax, eax
		jnz	short loc_401C19
		mov	edx, 1
		mov	dword_40300C, edx

loc_401C11:				; CODE XREF: sub_401BD8+355j
		test	eax, eax
		jz	loc_401F10

loc_401C19:				; CODE XREF: sub_401BD8+2Cj
		mov	eax, 0FFFFFFFFh
		mov	dword_40301C, eax
		mov	eax, 0FFFFFFFFh
		mov	dword_403018, eax

loc_401C2D:				; CODE XREF: sub_401BD8+346j
		mov	edx, dword_40300C
		xor	ebx, ebx
		mov	ds:dword_404000, ebx
		cmp	edx, esi
		jl	short loc_401CB9
		mov	ecx, offset dword_401938
		mov	dword_403014, ecx
		mov	ecx, dword_40301C
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_401CA8
		mov	[esp+28h+var_20], edx
		mov	eax, dword_403018
		mov	[esp+28h+var_24], ecx
		mov	[esp+28h+var_28], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_1C], eax
		call	sub_401B18
		mov	edx, dword_403018
		mov	eax, dword_40301C
		sub	eax, edx
		sub	dword_40300C, eax

loc_401C84:				; CODE XREF: sub_401BD8+D8j
					; sub_401BD8+DFj
		mov	eax, 0FFFFFFFFh
		mov	dword_40301C, eax
		mov	eax, 0FFFFFFFFh
		mov	dword_403018, eax

loc_401C98:				; CODE XREF: sub_401BD8+FBj
		mov	eax, 0FFFFFFFFh

loc_401C9D:				; CODE XREF: sub_401BD8+1AEj
					; sub_401BD8+23Bj ...
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401CA8:				; CODE XREF: sub_401BD8+7Bj
		mov	eax, dword_403018
		cmp	eax, 0FFFFFFFFh
		jz	short loc_401C84
		mov	dword_40300C, eax
		jmp	short loc_401C84
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401CB9:				; CODE XREF: sub_401BD8+65j
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx+edx*4]
		mov	dword_403014, eax
		cmp	byte ptr [eax],	2Dh
		jz	short loc_401CD8

loc_401CC9:				; CODE XREF: sub_401BD8+104j
		mov	eax, offset dword_401938
		mov	dword_403014, eax
		jmp	short loc_401C98
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401CD8:				; CODE XREF: sub_401BD8+EFj
		cmp	byte ptr [eax+1], 0
		jz	short loc_401CC9
		cmp	dword_403018, 0FFFFFFFFh
		jz	short loc_401CF4
		cmp	dword_40301C, 0FFFFFFFFh
		jz	loc_401F05

loc_401CF4:				; CODE XREF: sub_401BD8+10Dj
					; sub_401BD8+333j
		mov	eax, dword_403014
		mov	edx, eax
		cmp	byte ptr [eax+1], 0
		jz	short loc_401D18
		inc	eax
		mov	dword_403014, eax
		cmp	byte ptr [edx+1], 2Dh
		jz	loc_401F00
		lea	esi, [esi+0]

loc_401D18:				; CODE XREF: sub_401BD8+127j
					; sub_401BD8+340j
		movsx	ebx, byte ptr [eax]
		lea	ecx, [eax+1]
		mov	dword_403014, ecx
		cmp	ebx, 3Ah
		jz	loc_401EBD
		movzx	eax, byte ptr [edi]
		xor	edx, edx
		cmp	al, 2Dh
		jz	loc_401EF6
		cmp	al, 2Bh
		jz	loc_401EF6

loc_401D42:				; CODE XREF: sub_401BD8+323j
		lea	edx, [edx+edi]
		mov	eax, ebx
		mov	ah, al

loc_401D49:				; CODE XREF: sub_401BD8+17Aj
		mov	al, [edx]
		cmp	al, ah
		jz	short loc_401D56
		inc	edx
		test	al, al
		jnz	short loc_401D49
		xor	edx, edx

loc_401D56:				; CODE XREF: sub_401BD8+175j
		mov	eax, edx
		mov	[ebp+var_14], eax
		test	eax, eax
		jz	loc_401EBD
		cmp	ebx, 57h
		jz	loc_401E3B

loc_401D6C:				; CODE XREF: sub_401BD8+267j
		mov	eax, [ebp+var_14]
		mov	edx, [ebp+var_14]
		inc	eax
		cmp	byte ptr [edx+1], 3Ah
		jz	short loc_401D8B
		cmp	byte ptr [ecx],	0
		jnz	short loc_401D84
		inc	dword_40300C

loc_401D84:				; CODE XREF: sub_401BD8+1A4j
					; sub_401BD8+1DEj
		mov	eax, ebx
		jmp	loc_401C9D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D8B:				; CODE XREF: sub_401BD8+19Fj
		xor	edx, edx
		mov	ds:dword_404004, edx
		cmp	byte ptr [ecx],	0
		jz	short loc_401DB8
		mov	ds:dword_404004, ecx

loc_401D9E:				; CODE XREF: sub_401BD8+1E4j
		mov	edx, dword_40300C

loc_401DA4:				; CODE XREF: sub_401BD8+25Ej
		mov	ecx, offset dword_401938
		inc	edx
		mov	dword_403014, ecx
		mov	dword_40300C, edx
		jmp	short loc_401D84
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401DB8:				; CODE XREF: sub_401BD8+1BEj
		cmp	byte ptr [eax+1], 3Ah
		jz	short loc_401D9E
		mov	edx, dword_40300C
		inc	edx
		cmp	edx, esi
		mov	dword_40300C, edx
		jl	short loc_401E2B
		mov	esi, dword_403008
		mov	eax, offset dword_401938
		mov	dword_403014, eax
		test	esi, esi
		jz	short loc_401DF8
		cmp	byte ptr [edi],	3Ah
		jz	short loc_401DF8
		mov	[esp+28h+var_28], offset aOptionRequires ; "option requires an argument	-- %c"
		mov	[esp+28h+var_24], ebx
		call	sub_401AB8

loc_401DF8:				; CODE XREF: sub_401BD8+209j
					; sub_401BD8+20Ej
		mov	dword_403010, ebx
		movzx	edx, byte ptr [edi]
		cmp	dl, 2Dh
		jz	short loc_401E23
		cmp	dl, 2Bh

loc_401E09:				; CODE XREF: sub_401BD8+2CBj
		jz	short loc_401E23

loc_401E0B:				; CODE XREF: sub_401BD8+24Fj
		cmp	dl, 3Ah
		mov	eax, 3Fh
		jnz	loc_401C9D

loc_401E19:				; CODE XREF: sub_401BD8+251j
		mov	eax, 3Ah
		jmp	loc_401C9D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E23:				; CODE XREF: sub_401BD8+22Cj
					; sub_401BD8+231j ...
		cmp	byte ptr [edi+1], 3Ah
		jnz	short loc_401E0B
		jmp	short loc_401E19
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E2B:				; CODE XREF: sub_401BD8+1F5j
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx+edx*4]
		mov	ds:dword_404004, eax
		jmp	loc_401DA4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E3B:				; CODE XREF: sub_401BD8+18Ej
		cmp	byte ptr [eax+1], 3Bh
		jnz	loc_401D6C
		cmp	byte ptr [ecx],	0
		mov	eax, 0FFFFFFFEh
		jnz	loc_401C9D
		mov	edx, dword_40300C
		inc	edx
		cmp	edx, esi
		mov	dword_40300C, edx
		jl	short loc_401EA8
		mov	ecx, dword_403008
		mov	esi, offset dword_401938
		mov	dword_403014, esi
		test	ecx, ecx
		jz	short loc_401E92
		cmp	byte ptr [edi],	3Ah
		jz	short loc_401E92
		mov	[esp+28h+var_28], offset aOptionRequires ; "option requires an argument	-- %c"
		mov	[esp+28h+var_24], 57h
		call	sub_401AB8

loc_401E92:				; CODE XREF: sub_401BD8+29Fj
					; sub_401BD8+2A4j
		mov	dword_403010, ebx
		movzx	eax, byte ptr [edi]
		cmp	al, 2Dh
		mov	dl, al
		jz	short loc_401E23
		cmp	al, 2Bh
		jmp	loc_401E09
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401EA8:				; CODE XREF: sub_401BD8+28Aj
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx+edx*4]

loc_401EAE:				; CODE XREF: sub_401BD8+32Bj
		mov	dword_403014, eax
		mov	eax, 0FFFFFFFEh
		jmp	loc_401C9D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401EBD:				; CODE XREF: sub_401BD8+14Fj
					; sub_401BD8+185j
		cmp	byte ptr [ecx],	0
		jnz	short loc_401EC8
		inc	dword_40300C

loc_401EC8:				; CODE XREF: sub_401BD8+2E8j
		mov	eax, dword_403008
		test	eax, eax
		jz	short loc_401EE6
		cmp	byte ptr [edi],	3Ah
		jz	short loc_401EE6
		mov	[esp+28h+var_28], offset aUnknownOptionC ; "unknown option -- %c"
		mov	[esp+28h+var_24], ebx
		call	sub_401AB8

loc_401EE6:				; CODE XREF: sub_401BD8+2F7j
					; sub_401BD8+2FCj
		mov	dword_403010, ebx
		mov	eax, 3Fh
		jmp	loc_401C9D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401EF6:				; CODE XREF: sub_401BD8+15Cj
					; sub_401BD8+164j
		mov	edx, 1
		jmp	loc_401D42
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F00:				; CODE XREF: sub_401BD8+133j
		lea	eax, [edx+2]
		jmp	short loc_401EAE
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F05:				; CODE XREF: sub_401BD8+116j
		mov	dword_40301C, edx
		jmp	loc_401CF4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F10:				; CODE XREF: sub_401BD8+3Bj
		mov	eax, dword_403014
		cmp	byte ptr [eax],	0
		jnz	loc_401D18
		jmp	loc_401C2D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_401F28:				; CODE XREF: sub_401BD8+1Fj
		mov	eax, ds:dword_404000
		jmp	loc_401C11
sub_401BD8	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401F38	proc near		; CODE XREF: sub_4010FC+57p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], ebx
		mov	eax, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	[esp+18h+var_18], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_10], eax
		call	sub_401BD8
		cmp	eax, 0FFFFFFFEh
		jz	short loc_401F68

loc_401F5F:				; CODE XREF: sub_401F38+8Dj
		mov	ebx, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401F68:				; CODE XREF: sub_401F38+25j
		mov	ecx, dword_40300C
		mov	edx, dword_40301C
		inc	ecx
		mov	dword_40300C, ecx
		cmp	edx, 0FFFFFFFFh
		jz	short loc_401FAC
		mov	[esp+18h+var_14], edx
		mov	eax, dword_403018
		mov	[esp+18h+var_10], ecx
		mov	[esp+18h+var_C], ebx
		mov	[esp+18h+var_18], eax
		call	sub_401B18
		mov	edx, dword_403018
		mov	eax, dword_40301C
		sub	eax, edx
		sub	dword_40300C, eax

loc_401FAC:				; CODE XREF: sub_401F38+46j
		mov	eax, 0FFFFFFFFh
		mov	dword_40301C, eax
		mov	eax, 0FFFFFFFFh
		mov	dword_403018, eax
		mov	eax, 0FFFFFFFFh
		jmp	short loc_401F5F
sub_401F38	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	eax, [ebp+8]
		mov	edx, [ebp+10h]
		mov	[esp], eax
		mov	eax, [ebp+0Ch]
		mov	[esp+8], edx
		mov	[esp+4], eax
		call	sub_401BD8
		cmp	eax, 0FFFFFFFEh
		jz	short loc_401FF8

loc_401FEF:				; CODE XREF: .text:00402075j
					; .text:00402168j ...
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401FF8:				; CODE XREF: .text:00401FEDj
		mov	dword ptr [ebp-18h], 0FFFFFFFFh
		mov	ecx, dword_40300C
		mov	ebx, offset dword_401938
		mov	edi, dword_403014
		mov	dword_403014, ebx
		inc	ecx
		mov	dword_40300C, ecx
		cmp	byte ptr [edi],	0
		jnz	short loc_40207A
		mov	edx, dword_40301C
		cmp	edx, 0FFFFFFFFh
		jz	short loc_40205C
		mov	[esp+8], ecx
		mov	eax, dword_403018
		mov	ecx, [ebp+0Ch]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[esp+0Ch], ecx
		call	sub_401B18
		mov	edx, dword_403018
		mov	eax, dword_40301C
		sub	eax, edx
		sub	dword_40300C, eax

loc_40205C:				; CODE XREF: .text:0040202Bj
		mov	eax, 0FFFFFFFFh
		mov	dword_40301C, eax
		mov	eax, 0FFFFFFFFh
		mov	dword_403018, eax
		mov	eax, 0FFFFFFFFh
		jmp	loc_401FEF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40207A:				; CODE XREF: .text:00402020j
		mov	ecx, 3Dh
		mov	eax, ecx
		mov	edx, edi
		mov	ah, al

loc_402085:				; CODE XREF: .text:0040208Ej
		mov	al, [edx]
		cmp	al, ah
		jz	short loc_402092
		inc	edx
		test	al, al
		jnz	short loc_402085
		xor	edx, edx

loc_402092:				; CODE XREF: .text:00402089j
		mov	eax, edx
		mov	[ebp-10h], eax
		test	eax, eax
		jz	loc_40231F
		inc	dword ptr [ebp-10h]
		sub	eax, edi
		mov	[ebp-14h], eax

loc_4020A7:				; CODE XREF: .text:0040232Aj
		mov	ecx, [ebp+14h]
		xor	esi, esi
		mov	eax, [ecx]
		test	eax, eax
		jz	short loc_4020E7
		xor	ebx, ebx
		lea	esi, [esi+0]

loc_4020B8:				; CODE XREF: .text:004020E5j
		mov	[esp], edi
		mov	edx, [ebp+14h]
		mov	ecx, [ebp-14h]
		mov	eax, [edx+ebx]
		mov	[esp+8], ecx
		mov	[esp+4], eax
		call	strncmp
		test	eax, eax
		jz	loc_4022CC

loc_4020D9:				; CODE XREF: .text:004022E8j
		mov	edx, [ebp+14h]
		add	ebx, 10h
		inc	esi
		mov	eax, [edx+ebx]
		test	eax, eax
		jnz	short loc_4020B8

loc_4020E7:				; CODE XREF: .text:004020B0j
					; .text:0040231Aj
		cmp	dword ptr [ebp-18h], 0FFFFFFFFh
		jz	loc_402298
		mov	eax, [ebp-18h]
		mov	ecx, [ebp+14h]
		shl	eax, 4
		mov	esi, [ecx+eax+4]
		test	esi, esi
		jnz	loc_40218C
		mov	ebx, [ebp-10h]
		test	ebx, ebx
		jz	short loc_40218C
		mov	ecx, dword_403008
		test	ecx, ecx
		jz	short loc_402136
		mov	eax, [ebp+10h]
		cmp	byte ptr [eax],	3Ah
		jz	short loc_402136
		mov	dword ptr [esp], offset	aOptionDoesnTTa	; "option doesn't take an argument -- %.*s"...
		mov	edx, [ebp-14h]
		mov	[esp+8], edi
		mov	[esp+4], edx
		call	sub_401AB8

loc_402136:				; CODE XREF: .text:00402115j
					; .text:0040211Dj
		mov	eax, [ebp-18h]
		mov	ecx, [ebp+14h]
		shl	eax, 4
		mov	edx, [ecx+eax+8]
		test	edx, edx
		jnz	short loc_402183
		mov	eax, [ecx+eax+0Ch]
		mov	dword_403010, eax

loc_402150:				; CODE XREF: .text:0040218Aj
		mov	edx, [ebp+10h]
		movzx	eax, byte ptr [edx]
		cmp	al, 2Dh
		mov	dl, al
		jz	short loc_402178
		cmp	al, 2Bh
		jz	short loc_402178

loc_402160:				; CODE XREF: .text:0040217Fj
					; .text:00402258j
		cmp	dl, 3Ah
		mov	eax, 3Fh
		jnz	loc_401FEF

loc_40216E:				; CODE XREF: .text:00402181j
		mov	eax, 3Ah
		jmp	loc_401FEF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402178:				; CODE XREF: .text:0040215Aj
					; .text:0040215Ej
		mov	ecx, [ebp+10h]
		cmp	byte ptr [ecx+1], 3Ah

loc_40217F:				; CODE XREF: .text:00402265j
		jnz	short loc_402160
		jmp	short loc_40216E
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402183:				; CODE XREF: .text:00402145j
		xor	eax, eax
		mov	dword_403010, eax
		jmp	short loc_402150
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40218C:				; CODE XREF: .text:00402100j
					; .text:0040210Bj
		mov	eax, [ebp-18h]
		mov	ecx, [ebp+14h]
		shl	eax, 4
		mov	edx, [ecx+eax+4]
		lea	eax, [edx-1]
		cmp	eax, 1
		ja	short loc_4021B4
		mov	eax, [ebp-10h]
		test	eax, eax
		jz	loc_402274
		mov	eax, [ebp-10h]
		mov	ds:dword_404004, eax

loc_4021B4:				; CODE XREF: .text:0040219Fj
					; .text:00402275j ...
		mov	eax, [ebp-18h]
		mov	edx, [ebp+14h]
		shl	eax, 4
		cmp	dword ptr [edx+eax+4], 1
		jz	short loc_4021FE

loc_4021C4:				; CODE XREF: .text:00402206j
		mov	eax, [ebp-18h]
		mov	ecx, [ebp+14h]
		shl	eax, 4
		mov	edx, [ecx+eax+8]
		test	edx, edx
		jz	short loc_4021F5
		mov	eax, [ecx+eax+0Ch]
		mov	[edx], eax
		xor	eax, eax

loc_4021DD:				; CODE XREF: .text:004021FCj
		mov	ecx, [ebp+18h]
		test	ecx, ecx
		jz	loc_401FEF
		mov	edx, [ebp-18h]
		mov	ecx, [ebp+18h]
		mov	[ecx], edx
		jmp	loc_401FEF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4021F5:				; CODE XREF: .text:004021D3j
		mov	edx, [ebp+14h]
		mov	eax, [edx+eax+0Ch]
		jmp	short loc_4021DD
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4021FE:				; CODE XREF: .text:004021C2j
		mov	esi, ds:dword_404004
		test	esi, esi
		jnz	short loc_4021C4
		mov	ebx, dword_403008
		test	ebx, ebx
		jz	short loc_40222A
		mov	ecx, [ebp+10h]
		cmp	byte ptr [ecx],	3Ah
		jz	short loc_40222A
		mov	dword ptr [esp], offset	aOptionRequir_0	; "option requires an argument -- %s"
		mov	[esp+4], edi
		call	sub_401AB8

loc_40222A:				; CODE XREF: .text:00402210j
					; .text:00402218j
		mov	eax, [ebp-18h]
		mov	edx, [ebp+14h]
		shl	eax, 4
		mov	ecx, [edx+eax+8]
		test	ecx, ecx
		jnz	short loc_40226A
		mov	eax, [edx+eax+0Ch]
		mov	dword_403010, eax

loc_402244:				; CODE XREF: .text:00402272j
		dec	dword_40300C
		mov	ecx, [ebp+10h]
		movzx	edx, byte ptr [ecx]
		cmp	dl, 2Dh
		jz	short loc_40225E
		cmp	dl, 2Bh
		jnz	loc_402160

loc_40225E:				; CODE XREF: .text:00402253j
		mov	eax, [ebp+10h]
		cmp	byte ptr [eax+1], 3Ah
		jmp	loc_40217F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40226A:				; CODE XREF: .text:00402239j
		xor	edi, edi
		mov	dword_403010, edi
		jmp	short loc_402244
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402274:				; CODE XREF: .text:004021A6j
		dec	edx
		jnz	loc_4021B4
		mov	eax, dword_40300C
		mov	ecx, [ebp+0Ch]
		mov	edx, [ecx+eax*4]
		inc	eax
		mov	dword_40300C, eax
		mov	ds:dword_404004, edx
		jmp	loc_4021B4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_402298:				; CODE XREF: .text:004020EBj
		mov	esi, dword_403008
		test	esi, esi
		jz	short loc_4022BA
		mov	edx, [ebp+10h]
		cmp	byte ptr [edx],	3Ah
		jz	short loc_4022BA
		mov	dword ptr [esp], offset	aUnknownOptionS	; "unknown option -- %s"
		mov	[esp+4], edi
		call	sub_401AB8

loc_4022BA:				; CODE XREF: .text:004022A0j
					; .text:004022A8j ...
		xor	ebx, ebx
		mov	eax, 3Fh
		mov	dword_403010, ebx
		jmp	loc_401FEF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4022CC:				; CODE XREF: .text:004020D3j
		mov	edx, [ebp+14h]
		mov	eax, [edx+ebx]
		mov	[esp], eax
		call	strlen
		cmp	eax, [ebp-14h]
		jz	short loc_402317
		cmp	dword ptr [ebp-18h], 0FFFFFFFFh
		jnz	short loc_4022ED
		mov	[ebp-18h], esi
		jmp	loc_4020D9
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4022ED:				; CODE XREF: .text:004022E3j
		mov	eax, dword_403008
		test	eax, eax
		jz	short loc_4022BA
		mov	ecx, [ebp+10h]
		cmp	byte ptr [ecx],	3Ah
		jz	short loc_4022BA
		mov	dword ptr [esp], offset	aAmbiguousOptio	; "ambiguous option -- %.*s"
		mov	eax, [ebp-14h]
		mov	[esp+8], edi
		mov	[esp+4], eax
		call	sub_401AB8
		jmp	short loc_4022BA
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402317:				; CODE XREF: .text:004022DDj
		mov	[ebp-18h], esi
		jmp	loc_4020E7
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40231F:				; CODE XREF: .text:00402099j
		mov	[esp], edi
		call	strlen
		mov	[ebp-14h], eax
		jmp	loc_4020A7
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		dd 2 dup(90909090h)
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402338	proc near		; CODE XREF: sub_4018D0+1Cp
					; sub_4018D0+41p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		xor	eax, eax
		push	ebx
		sub	esp, 4		; lpModuleName
		mov	ebx, [ebp+arg_4]
		test	ebx, ebx
		jz	loc_402434

loc_40234C:				; CODE XREF: sub_402338+118j
		mov	dword ptr [ebx+4], 0A8h
		xor	ecx, ecx
		mov	edx, 35h
		mov	dword ptr [ebx+8], 3EBh
		test	eax, eax
		mov	dword ptr [ebx+0Ch], 0Bh
		mov	[ebx+80h], ecx
		mov	[ebx+84h], edx
		mov	dword ptr [ebx+2Ch], offset dword_402530
		mov	dword ptr [ebx+30h], offset dword_402538
		mov	dword ptr [ebx+14h], offset unk_404008
		jz	loc_402428
		mov	eax, [ebx+0A4h]
		mov	ds:dword_40400C, eax

loc_40239C:				; CODE XREF: sub_402338+F7j
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [ebx+24h], offset unk_404010
		mov	dword ptr [ebx+48h], offset sub_402510
		mov	dword ptr [ebx+4Ch], offset sub_402500
		mov	[ebx+28h], eax
		mov	dword ptr [ebx+50h], offset sub_4024F0
		mov	dword ptr [ebx+54h], offset sub_4024E0
		mov	eax, [ebp+0]
		mov	dword ptr [ebx+44h], offset calloc
		mov	dword ptr [ebx+18h], offset loc_4024D8
		mov	dword ptr [ebx+1Ch], offset loc_4024D0
		mov	[ebx], eax
		mov	dword ptr [ebx+20h], offset loc_4024C8
		mov	[esp+8+var_8], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	eax, 1
		mov	dword ptr [ebx+34h], offset dword_403000
		mov	dword ptr [ebx+38h], offset unk_403030
		mov	dword ptr [ebx+3Ch], offset dword_404000
		mov	dword ptr [ebx+40h], 404024h

loc_402420:				; CODE XREF: sub_402338+10Fj
		mov	ebx, [ebp+var_4]
		leave
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_402428:				; CODE XREF: sub_402338+53j
		mov	dword ptr [ebx+10h], offset dword_40400C
		jmp	loc_40239C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402434:				; CODE XREF: sub_402338+Ej
		mov	[esp+8+var_8], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_402420
		mov	ebx, edx
		mov	eax, 1
		jmp	loc_40234C
sub_402338	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION exit. PRESS KEYPAD "+" TO	EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fprintf. PRESS KEYPAD "+"	TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION calloc. PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION raise. PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION signal. PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fflush. PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __errno. PRESS KEYPAD "+"	TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strerror.	PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION vfprintf.	PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strtol. PRESS KEYPAD "+" TO EXPAND]
		align 4
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strncmp. PRESS KEYPAD "+"	TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strlen. PRESS KEYPAD "+" TO EXPAND]
		align 4

loc_4024C0:				; CODE XREF: sub_401A38+6Cj
		jmp	ds:fputc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4024C8:				; DATA XREF: sub_402338+AEo
		jmp	ds:realloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4024D0:				; DATA XREF: sub_402338+A5o
		jmp	ds:free
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4024D8:				; DATA XREF: sub_402338+9Eo
		jmp	ds:malloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4024E0	proc near		; DATA XREF: sub_402338+8Do
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4024E0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4024F0	proc near		; DATA XREF: sub_402338+86o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4024F0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402500	proc near		; DATA XREF: sub_402338+7Co
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402500	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402510	proc near		; DATA XREF: sub_402338+75o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402510	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 4
dword_402530	dd 0FFFFFFFFh, 0	; DATA XREF: sub_402338+3Eo
dword_402538	dd 0FFFFFFFFh, 31h dup(0) ; DATA XREF: sub_402338+45o
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 00000030 (	 48.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001A00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 403000h
dword_403000	dd 0			; DATA XREF: start+6r sub_402338+CCo
dword_403004	dd 4010CCh		; DATA XREF: sub_401364+42r
					; .text:00401509r ...
dword_403008	dd 1			; DATA XREF: sub_401BD8+1F7r
					; sub_401BD8+28Cr ...
dword_40300C	dd 1			; DATA XREF: sub_4010FC+64r
					; sub_401BD8+11r ...
dword_403010	dd 3Fh			; DATA XREF: sub_401BD8+220w
					; sub_401BD8+2BAw ...
dword_403014	dd 401938h		; DATA XREF: sub_401BD8+6Cw
					; sub_401BD8+E7w ...
dword_403018	dd 0FFFFFFFFh		; DATA XREF: sub_401BD8+50w
					; sub_401BD8+81r ...
dword_40301C	dd 0FFFFFFFFh		; DATA XREF: sub_401BD8+46w
					; sub_401BD8+72r ...
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_403030	db    0	;		; DATA XREF: sub_402338+D3o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_data		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 00000024 (	 36.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 404000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_404000	dd ?			; DATA XREF: sub_401BD8+25r
					; sub_401BD8+5Dw ...
dword_404004	dd ?			; DATA XREF: sub_4010FC+2Cr
					; sub_401BD8+Bw ...
unk_404008	db    ?	;		; DATA XREF: sub_402338+4Co
		db    ?	;
		db    ?	;
		db    ?	;
dword_40400C	dd ?			; DATA XREF: sub_4010FC+185r
					; sub_401364+37r ...
unk_404010	db    ?	;		; DATA XREF: sub_402338+6Eo
		db    ?	;
		db    ?	;
		db    ?	;
dword_404014	dd ?			; DATA XREF: sub_4010FC+1A3r
					; sub_4010FC+22Cr ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
_bss		ends

;
; Imports from cygdb2
;
; Section 4. (virtual address 00005000)
; Virtual size			: 000003DC (	988.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001C00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp___bam_init_print:dword ; DATA XREF:	__bam_init_printr
		extrn __imp___db_dispatch:dword	; DATA XREF: __db_dispatchr
		extrn __imp___db_init_print:dword ; DATA XREF: __db_init_printr
		extrn __imp___ham_init_print:dword ; DATA XREF:	__ham_init_printr
		extrn __imp___log_init_print:dword ; DATA XREF:	__log_init_printr
		extrn __imp___txn_init_print:dword ; DATA XREF:	__txn_init_printr
		extrn __imp_db_appexit:dword ; DATA XREF: db_appexitr
		extrn __imp_db_appinit:dword ; DATA XREF: db_appinitr
		extrn __imp_db_value_set:dword ; DATA XREF: db_value_setr
		extrn __imp_log_get:dword ; DATA XREF: log_getr


;
; Imports from cygwin1
;
		extrn __imp___errno:dword ; DATA XREF: __errnor
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn __progname:dword	; DATA XREF: sub_401A38+25r
; void *__cdecl	_imp_calloc(size_t,size_t)
		extrn __imp_calloc:dword ; DATA	XREF: callocr
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_4018D0+4Cr
					; .text:004024A8r
; void __cdecl _imp_exit(int)
		extrn __imp_exit:dword	; DATA XREF: exitr
		extrn __imp_fflush:dword ; DATA	XREF: fflushr
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
		extrn fputc:dword	; DATA XREF: .text:004024C0r
; void __cdecl free(void *)
		extrn free:dword	; DATA XREF: .text:004024D0r
; void *__cdecl	malloc(size_t)
		extrn malloc:dword	; DATA XREF: .text:004024D8r
		extrn __imp_raise:dword	; DATA XREF: raiser
; void *__cdecl	realloc(void *,size_t)
		extrn realloc:dword	; DATA XREF: .text:004024C8r
		extrn __imp_signal:dword ; DATA	XREF: signalr
; char *__cdecl	_imp_strerror(int)
		extrn __imp_strerror:dword ; DATA XREF:	strerrorr
; size_t __cdecl _imp_strlen(const char	*)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; int __cdecl _imp_strncmp(const char *,const char *,size_t)
		extrn __imp_strncmp:dword ; DATA XREF: strncmpr
; __int32 __cdecl _imp_strtol(const char *,char	**,int)
		extrn __imp_strtol:dword ; DATA	XREF: strtolr
		extrn __imp_vfprintf:dword ; DATA XREF:	vfprintfr


;
; Imports from KERNEL32
;
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr



		end start
