

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\db2_archive.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00001480 (   5248.)
; Section size in file		: 00001600 (   5632.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, dword_403000
		test	eax, eax
		jz	short loc_401010
		int	3		; Trap to Debugger

loc_401010:				; CODE XREF: start+Dj
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_4010E4
		call	sub_401818
		mov	esp, ebp
		pop	ebp
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
a@CopyrightC199	db '@(#) Copyright (c) 1996, 1997, 1998',0Ah
		db 9,'Sleepycat Software Inc.  All rights reserved.',0Ah,0
		align 10h
a@Db_archive_c1	db '@(#)db_archive.c',9,'10.20 (Sleepycat) 10/3/98',0
aDb_archive	db 'db_archive',0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4010D6:				; DATA XREF: sub_4010E4+150o
		popa
		push	76736C3Ah
		add	ds:8D000A73h, ah ; DATA	XREF: sub_4010E4+1D9o
		jbe	short $+2

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4010E4	proc near		; DATA XREF: start+30o

var_28		= dword	ptr -28h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	edi
		push	esi
		xor	edi, edi
		push	ebx
		mov	esi, [ebp+arg_0]
		xor	ebx, ebx
		call	__main
		mov	[ebp+var_8], 0
		lea	eax, [ebp+var_4]
		mov	[ebp+var_C], eax
		jmp	loc_401231
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_40110C:				; CODE XREF: sub_4010E4+165j
		add	eax, 0FFFFFFC1h	; switch 56 cases
		cmp	eax, 37h
		ja	loc_40122C	; default
		jmp	ds:off_401120[eax*4] ; switch jump
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
off_401120	dd offset loc_40122C, offset loc_40122C, offset	loc_40122C
					; DATA XREF: sub_4010E4+34r
		dd offset loc_40122C, offset loc_40122C, offset	loc_40122C ; jump table	for switch statement
		dd offset loc_40122C, offset loc_40122C, offset	loc_40122C
		dd offset loc_40122C, offset loc_40122C, offset	loc_40122C
		dd offset loc_40122C, offset loc_40122C, offset	loc_40122C
		dd offset loc_40122C, offset loc_40122C, offset	loc_40122C
		dd offset loc_40122C, offset loc_40122C, offset	loc_40122C
		dd offset loc_40122C, offset loc_40122C, offset	loc_40122C
		dd offset loc_40122C, offset loc_40122C, offset	loc_40122C
		dd offset loc_40122C, offset loc_40122C, offset	loc_40122C
		dd offset loc_40122C, offset loc_40122C, offset	loc_40122C
		dd offset loc_40122C, offset loc_401200, offset	loc_40122C
		dd offset loc_40122C, offset loc_40122C, offset	loc_40122C
		dd offset loc_40122C, offset loc_40122C, offset	loc_401208
		dd offset loc_40122C, offset loc_40122C, offset	loc_40122C
		dd offset loc_401210, offset loc_40122C, offset	loc_40122C
		dd offset loc_40122C, offset loc_40122C, offset	loc_40122C
		dd offset loc_40122C, offset loc_401218, offset	loc_40122C
		dd offset loc_40122C, offset loc_401220
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401200:				; CODE XREF: sub_4010E4+34j
					; DATA XREF: sub_4010E4+3Co
		or	ebx, 1		; case 0x61
		jmp	short loc_401231
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401208:				; CODE XREF: sub_4010E4+34j
					; DATA XREF: sub_4010E4+3Co
		mov	edi, ds:dword_404004 ; case 0x68
		jmp	short loc_401231
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401210:				; CODE XREF: sub_4010E4+34j
					; DATA XREF: sub_4010E4+3Co
		or	ebx, 4		; case 0x6C
		jmp	short loc_401231
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401218:				; CODE XREF: sub_4010E4+34j
					; DATA XREF: sub_4010E4+3Co
		or	ebx, 2		; case 0x73
		jmp	short loc_401231
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401220:				; CODE XREF: sub_4010E4+34j
					; DATA XREF: sub_4010E4+3Co
		mov	[ebp+var_8], 1	; case 0x76
		jmp	short loc_401231
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_40122C:				; CODE XREF: sub_4010E4+2Ej
					; sub_4010E4+34j
					; DATA XREF: ...
		call	sub_401408	; default

loc_401231:				; CODE XREF: sub_4010E4+22j
					; sub_4010E4+11Fj ...
		add	esp, 0FFFFFFFCh
		push	offset loc_4010D6
		mov	edx, [ebp+arg_4]
		push	edx
		push	esi
		call	sub_401E80
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	loc_40110C
		cmp	esi, dword_40300C
		jz	short loc_40125C
		call	sub_401408

loc_40125C:				; CODE XREF: sub_4010E4+171j
		call	sub_4013A8
		add	esp, 0FFFFFFF8h
		mov	eax, [ebp+var_8]
		push	eax
		push	edi
		call	sub_40131C
		mov	edi, eax
		call	__errno
		push	0
		mov	esi, eax
		push	ebx
		mov	edx, [ebp+var_C]
		push	edx
		mov	eax, [edi+48h]
		push	eax
		call	log_archive
		mov	[esi], eax
		add	esp, 20h
		test	eax, eax
		jz	short loc_4012A8
		add	esp, 0FFFFFFF4h
		push	0
		call	sub_401574
		add	esp, 0FFFFFFF4h
		push	edi
		call	db_appexit
		jmp	short loc_401302
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4012A8:				; CODE XREF: sub_4010E4+1AAj
		mov	eax, [ebp+var_4]
		test	eax, eax
		jz	short loc_4012D9
		cmp	dword ptr [eax], 0
		jz	short loc_4012D9

loc_4012B4:				; CODE XREF: sub_4010E4+1F3j
		mov	eax, [ebp+var_4]
		add	esp, 0FFFFFFF8h
		mov	eax, [eax]
		push	eax
		push	(offset	loc_4010DC+1)
		call	printf
		mov	eax, [ebp+var_4]
		add	esp, 10h
		lea	edx, [eax+4]
		mov	[ebp+var_4], edx
		cmp	dword ptr [eax+4], 0
		jnz	short loc_4012B4

loc_4012D9:				; CODE XREF: sub_4010E4+1C9j
					; sub_4010E4+1CEj
		call	__errno
		add	esp, 0FFFFFFF4h
		mov	ebx, eax
		push	edi
		call	db_appexit
		mov	[ebx], eax
		add	esp, 10h
		test	eax, eax
		jnz	short loc_4012F8
		xor	eax, eax
		jmp	short loc_401307
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4012F8:				; CODE XREF: sub_4010E4+20Cj
		add	esp, 0FFFFFFF4h
		push	0
		call	sub_401574

loc_401302:				; CODE XREF: sub_4010E4+1BFj
		mov	eax, 1

loc_401307:				; CODE XREF: sub_4010E4+210j
		lea	esp, [ebp-28h]
		pop	ebx
		pop	esi
		pop	edi
		mov	esp, ebp
		pop	ebp
		retn
sub_4010E4	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
aDb_appinit	db 'db_appinit',0       ; DATA XREF: sub_40131C+74o

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_40131C	proc near		; CODE XREF: sub_4010E4+185p

var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		push	ebx
		add	esp, 0FFFFFFF8h
		push	1
		push	7Ch
		call	calloc
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jnz	short loc_401353
		call	__errno
		add	esp, 0FFFFFFF8h
		mov	dword ptr [eax], 0Ch
		push	0
		push	1
		call	near ptr loc_40146B+5
		add	esp, 10h

loc_401353:				; CODE XREF: sub_40131C+1Bj
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		mov	[ebx+8], eax
		mov	eax, dword_403004
		mov	[ebx+0Ch], eax
		mov	eax, [ebp+arg_4]
		mov	[ebx+10h], eax
		call	__errno
		push	10A1h
		mov	esi, eax
		push	ebx
		push	0
		mov	eax, [ebp+arg_0]
		push	eax
		call	db_appinit
		mov	[esi], eax
		add	esp, 10h
		test	eax, eax
		jz	short loc_40139C
		add	esp, 0FFFFFFF8h
		push	offset aDb_appinit ; "db_appinit"
		push	1
		call	near ptr loc_40146B+5

loc_40139C:				; CODE XREF: sub_40131C+6Fj
		lea	esp, [ebp-18h]
		mov	eax, ebx
		pop	ebx
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_40131C	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4013A8	proc near		; CODE XREF: sub_4010E4+178p
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		add	esp, 0FFFFFFF8h
		push	1
		push	1
		call	signal
		add	esp, 0FFFFFFF8h
		push	1
		push	2
		call	signal
		add	esp, 20h
		add	esp, 0FFFFFFF8h
		push	1
		push	0Fh
		call	signal
		mov	esp, ebp
		pop	ebp
		retn
sub_4013A8	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8
aUsageDb_archiv	db 'usage: db_archive [-alsv] [-h home]',0Ah,0 ; DATA XREF: sub_401408+Eo
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401408	proc near		; CODE XREF: sub_4010E4+148p
					; sub_4010E4+173p
		push	ebp
		mov	eax, ds:dword_40400C
		mov	ebp, esp
		sub	esp, 8
		add	esp, 0FFFFFFF8h
		push	offset aUsageDb_archiv ; "usage: db_archive [-alsv] [-h	home]\n"
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 0FFFFFFF4h
		push	1
		call	exit
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		inc	eax
		sub	[ebx], ah
		sub	[ebp+72h], esp
		jb	short loc_401476
		arpl	[ecx], cx
		xor	[eax], esi
		db	2Eh
		xor	eax, 6C532820h
		db	65h, 65h
		jo	short near ptr loc_4014CD+2
		arpl	[ecx+74h], sp
		sub	[eax], esp
		xor	[ecx], esi
		das
		xor	dh, [edi+ebp]
		cmp	[eax], edi
		add	ds:203A73h, ah

loc_401469:				; DATA XREF: .text:004014C4o
					; sub_401574+4Fo
		cmp	ah, [eax]

loc_40146B:				; CODE XREF: sub_40131C+2Fp
					; sub_40131C+7Bp ...
		add	ds:55000A73h, ah
sub_401408	endp

		mov	ebp, esp
		sub	esp, 0Ch

loc_401476:				; CODE XREF: sub_401408+3Ej
		push	edi
		push	esi
		push	ebx
		mov	esi, [ebp+0Ch]
		lea	ebx, [ebp+10h]
		call	__errno
		mov	edi, [eax]
		add	esp, 0FFFFFFFCh
		mov	eax, dword_403004
		push	eax
		mov	eax, ds:dword_40400C
		push	401464h
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 10h
		test	esi, esi
		jz	short loc_4014D5
		add	esp, 0FFFFFFFCh
		mov	eax, ds:dword_40400C
		push	ebx
		push	esi
		mov	eax, [eax+0Ch]
		push	eax
		call	vfprintf
		mov	eax, ds:dword_40400C
		add	esp, 0FFFFFFF8h
		push	offset loc_401469
		mov	eax, [eax+0Ch]
		push	eax

loc_4014CD:				; CODE XREF: sub_401408+4Aj
		call	fprintf
		add	esp, 20h

loc_4014D5:				; CODE XREF: .text:004014A7j
		add	esp, 0FFFFFFFCh
		add	esp, 0FFFFFFF4h
		push	edi
		call	strerror
		push	eax
		mov	eax, ds:dword_40400C
		push	40146Ch
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 20h
		mov	eax, [ebp+8]
		add	esp, 0FFFFFFF4h
		push	eax
		call	exit

loc_401504:				; DATA XREF: sub_401508+4Fo
					; .text:0040164Eo
		or	al, [eax]
		mov	esi, esi

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401508	proc near		; CODE XREF: .text:004017BBp
					; .text:004017D0p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	eax, dword_403004
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		push	ebx
		add	esp, 0FFFFFFFCh
		mov	esi, [ebp+arg_4]
		push	eax
		lea	ebx, [ebp+arg_8]
		mov	eax, ds:dword_40400C
		push	401464h
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 10h
		test	esi, esi
		jz	short loc_40154F
		add	esp, 0FFFFFFFCh
		mov	eax, ds:dword_40400C
		push	ebx
		push	esi
		mov	eax, [eax+0Ch]
		push	eax
		call	vfprintf
		add	esp, 10h

loc_40154F:				; CODE XREF: sub_401508+2Fj
		mov	eax, ds:dword_40400C
		add	esp, 0FFFFFFF8h
		push	offset loc_401504
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 0FFFFFFF4h
		mov	eax, [ebp+arg_0]
		push	eax
		call	exit
		lea	esi, [esi+0]
sub_401508	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401574	proc near		; CODE XREF: sub_4010E4+1B1p
					; sub_4010E4+219p

var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	edi
		push	esi
		push	ebx
		mov	esi, [ebp+arg_0]
		lea	ebx, [ebp+arg_4]
		call	__errno
		mov	edi, [eax]
		add	esp, 0FFFFFFFCh
		mov	eax, dword_403004
		push	eax
		push	401464h
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 10h
		test	esi, esi
		jz	short loc_4015D9
		add	esp, 0FFFFFFFCh
		push	ebx
		push	esi
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	vfprintf
		add	esp, 0FFFFFFF8h
		push	offset loc_401469
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 20h

loc_4015D9:				; CODE XREF: sub_401574+37j
		add	esp, 0FFFFFFFCh
		add	esp, 0FFFFFFF4h
		push	edi
		call	strerror
		push	eax
		push	40146Ch
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		lea	esp, [ebp-18h]
		pop	ebx
		pop	esi
		pop	edi
		mov	esp, ebp
		pop	ebp
		retn
sub_401574	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		push	ebx
		add	esp, 0FFFFFFFCh
		mov	eax, dword_403004
		mov	esi, [ebp+8]
		lea	ebx, [ebp+0Ch]
		push	eax
		push	401464h
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 10h
		test	esi, esi
		jz	short loc_40164B
		add	esp, 0FFFFFFFCh
		push	ebx
		push	esi
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	vfprintf
		add	esp, 10h

loc_40164B:				; CODE XREF: .text:00401633j
		add	esp, 0FFFFFFF8h
		push	offset loc_401504
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		lea	esp, [ebp-18h]
		pop	ebx
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
aRrrrrrrrrrrrrr	db '@(#)getlong.c',9,'10.3 (Sleepycat) 4/1'
		db '0/98',0
aS_0		db '%s',0               ; DATA XREF: .text:00401794o
aSInvalidNumeri	db '%s: Invalid numeric argument',0 ; DATA XREF: .text:004017B4o
		dd 6 dup(90909090h)
		align 4
aSLessThanMinim	db '%s: Less than minimum value (%ld)',0 ; DATA XREF: .text:004017C9o
		dd 7 dup(90909090h)
		align 4
aSGreaterThanMa	db '%s: Greater than maximum value (%ld)',0 ; DATA XREF: .text:004017E2o
		align 4
		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	edi
		push	esi
		push	ebx
		mov	esi, [ebp+8]
		mov	edi, [ebp+0Ch]
		call	__errno
		mov	dword ptr [eax], 0
		add	esp, 0FFFFFFFCh
		push	0Ah
		lea	eax, [ebp-4]
		push	eax
		push	esi
		call	strtol
		mov	ebx, eax
		add	esp, 10h
		cmp	ebx, 80000000h
		jz	short loc_401786
		cmp	ebx, 7FFFFFFFh
		jnz	short loc_4017A3

loc_401786:				; CODE XREF: .text:0040177Cj
		call	__errno
		cmp	dword ptr [eax], 22h
		jnz	short loc_4017A3
		add	esp, 0FFFFFFFCh
		push	esi
		push	offset aS_0	; "%s"
		push	1
		call	near ptr loc_40146B+5
		add	esp, 10h

loc_4017A3:				; CODE XREF: .text:00401784j
					; .text:0040178Ej
		cmp	byte ptr [esi],	0
		jz	short loc_4017B0
		mov	eax, [ebp-4]
		cmp	byte ptr [eax],	0
		jz	short loc_4017C3

loc_4017B0:				; CODE XREF: .text:004017A6j
		add	esp, 0FFFFFFFCh
		push	esi
		push	offset aSInvalidNumeri ; "%s: Invalid numeric argument"
		push	1
		call	sub_401508
		add	esp, 10h

loc_4017C3:				; CODE XREF: .text:004017AEj
		cmp	ebx, edi
		jge	short loc_4017D8
		push	edi
		push	esi
		push	offset aSLessThanMinim ; "%s: Less than	minimum	value (%ld)"
		push	1
		call	sub_401508
		add	esp, 10h

loc_4017D8:				; CODE XREF: .text:004017C5j
		cmp	ebx, [ebp+10h]
		jle	short loc_4017EE
		mov	eax, [ebp+10h]
		push	eax
		push	esi
		push	offset aSGreaterThanMa ; "%s: Greater than maximum value (%ld)"
		push	1
		call	sub_401508

loc_4017EE:				; CODE XREF: .text:004017DBj
		mov	eax, [ebp+14h]
		lea	esp, [ebp-28h]
		mov	[eax], ebx
		pop	ebx
		pop	esi
		pop	edi
		mov	esp, ebp
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION db_appinit. PRESS	KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION db_appexit. PRESS	KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION log_archive. PRESS KEYPAD	"+" TO EXPAND]
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401818	proc near		; CODE XREF: start+37p

var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		xor	ebx, ebx
		mov	[esp+18h+var_18], esi
		mov	[esp+18h+var_14], 0
		call	sub_402280
		sub	esp, 8
		test	eax, eax
		jnz	short loc_401861
		sub	esp, 0B0h
		lea	ebx, [esp+0C8h+var_C0]
		mov	[esp+0C8h+var_C0], 0
		mov	[esp+0C8h+var_C8], esi
		mov	[esp+0C8h+var_C4], ebx
		call	sub_402280
		sub	esp, 8

loc_401861:				; CODE XREF: sub_401818+26j
		mov	[esp+0C8h+var_C8], ebx
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
sub_401818	endp

; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 4
dword_401880	dd 90909000h, 7	dup(90909090h) ; DATA XREF: sub_401B20+67o
					; sub_401B20+F1o ...
aOptionRequires	db 'option requires an argument -- %c',0 ; DATA XREF: sub_401B20+210o
					; sub_401B20+2A6o
		dd 7 dup(90909090h)
		align 4
aOptionRequir_0	db 'option requires an argument -- %s',0 ; DATA XREF: .text:00402162o
aAmbiguousOptio	db 'ambiguous option -- %.*s',0 ; DATA XREF: .text:00402246o
		align 8
aOptionDoesnTTa	db 'option doesn',27h,'t take an argument -- %.*s',0
					; DATA XREF: .text:00402067o
aUnknownOptionC	db 'unknown option -- %c',0 ; DATA XREF: sub_401B20+2FEo
aUnknownOptionS	db 'unknown option -- %s',0 ; DATA XREF: .text:004021F2o
aS		db '%s: ',0             ; DATA XREF: sub_401980+1Ao
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401980	proc near		; CODE XREF: sub_401A00+13p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_8], ebx
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_4]
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_14], offset aS ; "%s: "
		mov	[esp+18h+var_18], eax
		mov	eax, ds:__progname
		mov	eax, [eax]
		mov	[esp+18h+var_10], eax
		call	fprintf
		test	ebx, ebx
		jz	short loc_4019D1
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_10], esi
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], eax
		call	vfprintf

loc_4019D1:				; CODE XREF: sub_401980+37j
		mov	[ebp+arg_0], 0Ah
		mov	ebx, [ebp+var_8]
		mov	eax, ds:dword_40400C
		mov	esi, [ebp+var_4]
		mov	eax, [eax+0Ch]
		mov	[ebp+arg_4], eax
		mov	esp, ebp
		pop	ebp
		jmp	loc_402400
sub_401980	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401A00	proc near		; CODE XREF: sub_401B20+21Bp
					; sub_401B20+2B5p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+arg_0]
		lea	edx, [ebp+arg_4]
		mov	[esp+8+var_4], edx
		mov	[esp+8+var_8], eax
		call	sub_401980
		mov	esp, ebp
		pop	ebp
		retn
sub_401A00	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401A20	proc near		; CODE XREF: sub_401A60+33p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	eax, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		cdq
		idiv	ebx
		test	edx, edx
		mov	ecx, edx
		jz	short loc_401A4D
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401A40:				; CODE XREF: sub_401A20+2Bj
		mov	eax, ebx
		mov	ebx, ecx
		cdq
		idiv	ecx
		test	edx, edx
		mov	ecx, edx
		jnz	short loc_401A40

loc_401A4D:				; CODE XREF: sub_401A20+11j
		mov	eax, ebx
		pop	ebx
		pop	ebp
		retn
sub_401A20	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401A60	proc near		; CODE XREF: sub_401B20+94p
					; sub_401E80+5Cp ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edx, [ebp+arg_4]
		sub	eax, ebx
		mov	edi, [ebp+arg_C]
		mov	[ebp+var_18], eax
		mov	eax, esi
		sub	esi, ebx
		sub	eax, edx
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_18]
		mov	[esp+28h+var_28], eax
		mov	eax, [ebp+var_1C]
		mov	[esp+28h+var_24], eax
		call	sub_401A20
		mov	[ebp+var_14], eax
		mov	eax, esi
		cdq
		idiv	[ebp+var_14]
		mov	[ebp+var_10], 0
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_14]
		cmp	[ebp+var_10], eax
		jge	short loc_401B04
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401AC0:				; CODE XREF: sub_401A60+A2j
		mov	esi, [ebp+arg_4]
		mov	eax, [ebp+var_10]
		mov	ebx, [ebp+var_20]
		add	esi, eax
		test	ebx, ebx
		mov	ecx, esi
		jle	short loc_401AF9
		mov	ebx, [ebp+var_20]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401AE0:				; CODE XREF: sub_401A60+97j
		cmp	ecx, [ebp+arg_4]
		jl	short loc_401B10
		mov	edx, [ebp+var_18]
		sub	ecx, edx

loc_401AEA:				; CODE XREF: sub_401A60+B5j
		mov	edx, [edi+ecx*4]
		dec	ebx
		mov	eax, [edi+esi*4]
		mov	[edi+ecx*4], eax
		mov	[edi+esi*4], edx
		jnz	short loc_401AE0

loc_401AF9:				; CODE XREF: sub_401A60+6Fj
		inc	[ebp+var_10]
		mov	eax, [ebp+var_14]
		cmp	[ebp+var_10], eax
		jl	short loc_401AC0

loc_401B04:				; CODE XREF: sub_401A60+51j
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_401B10:				; CODE XREF: sub_401A60+83j
		mov	eax, [ebp+var_1C]
		add	ecx, eax
		jmp	short loc_401AEA
sub_401A60	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401B20	proc near		; CODE XREF: sub_401E80+1Dp
					; .text:00401F2Dp

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		xor	ebx, ebx
		sub	esp, 1Ch
		mov	ds:dword_404004, ebx
		mov	ecx, dword_40300C
		mov	esi, [ebp+arg_0]
		mov	edi, [ebp+arg_8]
		test	ecx, ecx
		jnz	loc_401E70
		mov	eax, ds:dword_404000
		test	eax, eax
		jnz	short loc_401B61
		mov	edx, 1
		mov	dword_40300C, edx

loc_401B59:				; CODE XREF: sub_401B20+355j
		test	eax, eax
		jz	loc_401E58

loc_401B61:				; CODE XREF: sub_401B20+2Cj
		mov	eax, 0FFFFFFFFh
		mov	dword_40301C, eax
		mov	eax, 0FFFFFFFFh
		mov	dword_403018, eax

loc_401B75:				; CODE XREF: sub_401B20+346j
		mov	edx, dword_40300C
		xor	ebx, ebx
		mov	ds:dword_404000, ebx
		cmp	edx, esi
		jl	short loc_401C01
		mov	ecx, offset dword_401880
		mov	dword_403014, ecx
		mov	ecx, dword_40301C
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_401BF0
		mov	[esp+28h+var_20], edx
		mov	eax, dword_403018
		mov	[esp+28h+var_24], ecx
		mov	[esp+28h+var_28], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_1C], eax
		call	sub_401A60
		mov	edx, dword_403018
		mov	eax, dword_40301C
		sub	eax, edx
		sub	dword_40300C, eax

loc_401BCC:				; CODE XREF: sub_401B20+D8j
					; sub_401B20+DFj
		mov	eax, 0FFFFFFFFh
		mov	dword_40301C, eax
		mov	eax, 0FFFFFFFFh
		mov	dword_403018, eax

loc_401BE0:				; CODE XREF: sub_401B20+FBj
		mov	eax, 0FFFFFFFFh

loc_401BE5:				; CODE XREF: sub_401B20+1AEj
					; sub_401B20+23Bj ...
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401BF0:				; CODE XREF: sub_401B20+7Bj
		mov	eax, dword_403018
		cmp	eax, 0FFFFFFFFh
		jz	short loc_401BCC
		mov	dword_40300C, eax
		jmp	short loc_401BCC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C01:				; CODE XREF: sub_401B20+65j
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx+edx*4]
		mov	dword_403014, eax
		cmp	byte ptr [eax],	2Dh
		jz	short loc_401C20

loc_401C11:				; CODE XREF: sub_401B20+104j
		mov	eax, offset dword_401880
		mov	dword_403014, eax
		jmp	short loc_401BE0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401C20:				; CODE XREF: sub_401B20+EFj
		cmp	byte ptr [eax+1], 0
		jz	short loc_401C11
		cmp	dword_403018, 0FFFFFFFFh
		jz	short loc_401C3C
		cmp	dword_40301C, 0FFFFFFFFh
		jz	loc_401E4D

loc_401C3C:				; CODE XREF: sub_401B20+10Dj
					; sub_401B20+333j
		mov	eax, dword_403014
		mov	edx, eax
		cmp	byte ptr [eax+1], 0
		jz	short loc_401C60
		inc	eax
		mov	dword_403014, eax
		cmp	byte ptr [edx+1], 2Dh
		jz	loc_401E48
		lea	esi, [esi+0]

loc_401C60:				; CODE XREF: sub_401B20+127j
					; sub_401B20+340j
		movsx	ebx, byte ptr [eax]
		lea	ecx, [eax+1]
		mov	dword_403014, ecx
		cmp	ebx, 3Ah
		jz	loc_401E05
		movzx	eax, byte ptr [edi]
		xor	edx, edx
		cmp	al, 2Dh
		jz	loc_401E3E
		cmp	al, 2Bh
		jz	loc_401E3E

loc_401C8A:				; CODE XREF: sub_401B20+323j
		lea	edx, [edx+edi]
		mov	eax, ebx
		mov	ah, al

loc_401C91:				; CODE XREF: sub_401B20+17Aj
		mov	al, [edx]
		cmp	al, ah
		jz	short loc_401C9E
		inc	edx
		test	al, al
		jnz	short loc_401C91
		xor	edx, edx

loc_401C9E:				; CODE XREF: sub_401B20+175j
		mov	eax, edx
		mov	[ebp+var_14], eax
		test	eax, eax
		jz	loc_401E05
		cmp	ebx, 57h
		jz	loc_401D83

loc_401CB4:				; CODE XREF: sub_401B20+267j
		mov	eax, [ebp+var_14]
		mov	edx, [ebp+var_14]
		inc	eax
		cmp	byte ptr [edx+1], 3Ah
		jz	short loc_401CD3
		cmp	byte ptr [ecx],	0
		jnz	short loc_401CCC
		inc	dword_40300C

loc_401CCC:				; CODE XREF: sub_401B20+1A4j
					; sub_401B20+1DEj
		mov	eax, ebx
		jmp	loc_401BE5
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401CD3:				; CODE XREF: sub_401B20+19Fj
		xor	edx, edx
		mov	ds:dword_404004, edx
		cmp	byte ptr [ecx],	0
		jz	short loc_401D00
		mov	ds:dword_404004, ecx

loc_401CE6:				; CODE XREF: sub_401B20+1E4j
		mov	edx, dword_40300C

loc_401CEC:				; CODE XREF: sub_401B20+25Ej
		mov	ecx, offset dword_401880
		inc	edx
		mov	dword_403014, ecx
		mov	dword_40300C, edx
		jmp	short loc_401CCC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D00:				; CODE XREF: sub_401B20+1BEj
		cmp	byte ptr [eax+1], 3Ah
		jz	short loc_401CE6
		mov	edx, dword_40300C
		inc	edx
		cmp	edx, esi
		mov	dword_40300C, edx
		jl	short loc_401D73
		mov	esi, dword_403008
		mov	eax, offset dword_401880
		mov	dword_403014, eax
		test	esi, esi
		jz	short loc_401D40
		cmp	byte ptr [edi],	3Ah
		jz	short loc_401D40
		mov	[esp+28h+var_28], offset aOptionRequires ; "option requires an argument	-- %c"
		mov	[esp+28h+var_24], ebx
		call	sub_401A00

loc_401D40:				; CODE XREF: sub_401B20+209j
					; sub_401B20+20Ej
		mov	dword_403010, ebx
		movzx	edx, byte ptr [edi]
		cmp	dl, 2Dh
		jz	short loc_401D6B
		cmp	dl, 2Bh

loc_401D51:				; CODE XREF: sub_401B20+2CBj
		jz	short loc_401D6B

loc_401D53:				; CODE XREF: sub_401B20+24Fj
		cmp	dl, 3Ah
		mov	eax, 3Fh
		jnz	loc_401BE5

loc_401D61:				; CODE XREF: sub_401B20+251j
		mov	eax, 3Ah
		jmp	loc_401BE5
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D6B:				; CODE XREF: sub_401B20+22Cj
					; sub_401B20+231j ...
		cmp	byte ptr [edi+1], 3Ah
		jnz	short loc_401D53
		jmp	short loc_401D61
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D73:				; CODE XREF: sub_401B20+1F5j
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx+edx*4]
		mov	ds:dword_404004, eax
		jmp	loc_401CEC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D83:				; CODE XREF: sub_401B20+18Ej
		cmp	byte ptr [eax+1], 3Bh
		jnz	loc_401CB4
		cmp	byte ptr [ecx],	0
		mov	eax, 0FFFFFFFEh
		jnz	loc_401BE5
		mov	edx, dword_40300C
		inc	edx
		cmp	edx, esi
		mov	dword_40300C, edx
		jl	short loc_401DF0
		mov	ecx, dword_403008
		mov	esi, offset dword_401880
		mov	dword_403014, esi
		test	ecx, ecx
		jz	short loc_401DDA
		cmp	byte ptr [edi],	3Ah
		jz	short loc_401DDA
		mov	[esp+28h+var_28], offset aOptionRequires ; "option requires an argument	-- %c"
		mov	[esp+28h+var_24], 57h
		call	sub_401A00

loc_401DDA:				; CODE XREF: sub_401B20+29Fj
					; sub_401B20+2A4j
		mov	dword_403010, ebx
		movzx	eax, byte ptr [edi]
		cmp	al, 2Dh
		mov	dl, al
		jz	short loc_401D6B
		cmp	al, 2Bh
		jmp	loc_401D51
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401DF0:				; CODE XREF: sub_401B20+28Aj
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx+edx*4]

loc_401DF6:				; CODE XREF: sub_401B20+32Bj
		mov	dword_403014, eax
		mov	eax, 0FFFFFFFEh
		jmp	loc_401BE5
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E05:				; CODE XREF: sub_401B20+14Fj
					; sub_401B20+185j
		cmp	byte ptr [ecx],	0
		jnz	short loc_401E10
		inc	dword_40300C

loc_401E10:				; CODE XREF: sub_401B20+2E8j
		mov	eax, dword_403008
		test	eax, eax
		jz	short loc_401E2E
		cmp	byte ptr [edi],	3Ah
		jz	short loc_401E2E
		mov	[esp+28h+var_28], offset aUnknownOptionC ; "unknown option -- %c"
		mov	[esp+28h+var_24], ebx
		call	sub_401A00

loc_401E2E:				; CODE XREF: sub_401B20+2F7j
					; sub_401B20+2FCj
		mov	dword_403010, ebx
		mov	eax, 3Fh
		jmp	loc_401BE5
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E3E:				; CODE XREF: sub_401B20+15Cj
					; sub_401B20+164j
		mov	edx, 1
		jmp	loc_401C8A
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E48:				; CODE XREF: sub_401B20+133j
		lea	eax, [edx+2]
		jmp	short loc_401DF6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E4D:				; CODE XREF: sub_401B20+116j
		mov	dword_40301C, edx
		jmp	loc_401C3C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E58:				; CODE XREF: sub_401B20+3Bj
		mov	eax, dword_403014
		cmp	byte ptr [eax],	0
		jnz	loc_401C60
		jmp	loc_401B75
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_401E70:				; CODE XREF: sub_401B20+1Fj
		mov	eax, ds:dword_404000
		jmp	loc_401B59
sub_401B20	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401E80	proc near		; CODE XREF: sub_4010E4+15Ap

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], ebx
		mov	eax, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	[esp+18h+var_18], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_10], eax
		call	sub_401B20
		cmp	eax, 0FFFFFFFEh
		jz	short loc_401EB0

loc_401EA7:				; CODE XREF: sub_401E80+8Dj
		mov	ebx, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401EB0:				; CODE XREF: sub_401E80+25j
		mov	ecx, dword_40300C
		mov	edx, dword_40301C
		inc	ecx
		mov	dword_40300C, ecx
		cmp	edx, 0FFFFFFFFh
		jz	short loc_401EF4
		mov	[esp+18h+var_14], edx
		mov	eax, dword_403018
		mov	[esp+18h+var_10], ecx
		mov	[esp+18h+var_C], ebx
		mov	[esp+18h+var_18], eax
		call	sub_401A60
		mov	edx, dword_403018
		mov	eax, dword_40301C
		sub	eax, edx
		sub	dword_40300C, eax

loc_401EF4:				; CODE XREF: sub_401E80+46j
		mov	eax, 0FFFFFFFFh
		mov	dword_40301C, eax
		mov	eax, 0FFFFFFFFh
		mov	dword_403018, eax
		mov	eax, 0FFFFFFFFh
		jmp	short loc_401EA7
sub_401E80	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	eax, [ebp+8]
		mov	edx, [ebp+10h]
		mov	[esp], eax
		mov	eax, [ebp+0Ch]
		mov	[esp+8], edx
		mov	[esp+4], eax
		call	sub_401B20
		cmp	eax, 0FFFFFFFEh
		jz	short loc_401F40

loc_401F37:				; CODE XREF: .text:00401FBDj
					; .text:004020B0j ...
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401F40:				; CODE XREF: .text:00401F35j
		mov	dword ptr [ebp-18h], 0FFFFFFFFh
		mov	ecx, dword_40300C
		mov	ebx, offset dword_401880
		mov	edi, dword_403014
		mov	dword_403014, ebx
		inc	ecx
		mov	dword_40300C, ecx
		cmp	byte ptr [edi],	0
		jnz	short loc_401FC2
		mov	edx, dword_40301C
		cmp	edx, 0FFFFFFFFh
		jz	short loc_401FA4
		mov	[esp+8], ecx
		mov	eax, dword_403018
		mov	ecx, [ebp+0Ch]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[esp+0Ch], ecx
		call	sub_401A60
		mov	edx, dword_403018
		mov	eax, dword_40301C
		sub	eax, edx
		sub	dword_40300C, eax

loc_401FA4:				; CODE XREF: .text:00401F73j
		mov	eax, 0FFFFFFFFh
		mov	dword_40301C, eax
		mov	eax, 0FFFFFFFFh
		mov	dword_403018, eax
		mov	eax, 0FFFFFFFFh
		jmp	loc_401F37
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401FC2:				; CODE XREF: .text:00401F68j
		mov	ecx, 3Dh
		mov	eax, ecx
		mov	edx, edi
		mov	ah, al

loc_401FCD:				; CODE XREF: .text:00401FD6j
		mov	al, [edx]
		cmp	al, ah
		jz	short loc_401FDA
		inc	edx
		test	al, al
		jnz	short loc_401FCD
		xor	edx, edx

loc_401FDA:				; CODE XREF: .text:00401FD1j
		mov	eax, edx
		mov	[ebp-10h], eax
		test	eax, eax
		jz	loc_402267
		inc	dword ptr [ebp-10h]
		sub	eax, edi
		mov	[ebp-14h], eax

loc_401FEF:				; CODE XREF: .text:00402272j
		mov	ecx, [ebp+14h]
		xor	esi, esi
		mov	eax, [ecx]
		test	eax, eax
		jz	short loc_40202F
		xor	ebx, ebx
		lea	esi, [esi+0]

loc_402000:				; CODE XREF: .text:0040202Dj
		mov	[esp], edi
		mov	edx, [ebp+14h]
		mov	ecx, [ebp-14h]
		mov	eax, [edx+ebx]
		mov	[esp+8], ecx
		mov	[esp+4], eax
		call	strncmp
		test	eax, eax
		jz	loc_402214

loc_402021:				; CODE XREF: .text:00402230j
		mov	edx, [ebp+14h]
		add	ebx, 10h
		inc	esi
		mov	eax, [edx+ebx]
		test	eax, eax
		jnz	short loc_402000

loc_40202F:				; CODE XREF: .text:00401FF8j
					; .text:00402262j
		cmp	dword ptr [ebp-18h], 0FFFFFFFFh
		jz	loc_4021E0
		mov	eax, [ebp-18h]
		mov	ecx, [ebp+14h]
		shl	eax, 4
		mov	esi, [ecx+eax+4]
		test	esi, esi
		jnz	loc_4020D4
		mov	ebx, [ebp-10h]
		test	ebx, ebx
		jz	short loc_4020D4
		mov	ecx, dword_403008
		test	ecx, ecx
		jz	short loc_40207E
		mov	eax, [ebp+10h]
		cmp	byte ptr [eax],	3Ah
		jz	short loc_40207E
		mov	dword ptr [esp], offset	aOptionDoesnTTa	; "option doesn't take an argument -- %.*s"...
		mov	edx, [ebp-14h]
		mov	[esp+8], edi
		mov	[esp+4], edx
		call	sub_401A00

loc_40207E:				; CODE XREF: .text:0040205Dj
					; .text:00402065j
		mov	eax, [ebp-18h]
		mov	ecx, [ebp+14h]
		shl	eax, 4
		mov	edx, [ecx+eax+8]
		test	edx, edx
		jnz	short loc_4020CB
		mov	eax, [ecx+eax+0Ch]
		mov	dword_403010, eax

loc_402098:				; CODE XREF: .text:004020D2j
		mov	edx, [ebp+10h]
		movzx	eax, byte ptr [edx]
		cmp	al, 2Dh
		mov	dl, al
		jz	short loc_4020C0
		cmp	al, 2Bh
		jz	short loc_4020C0

loc_4020A8:				; CODE XREF: .text:004020C7j
					; .text:004021A0j
		cmp	dl, 3Ah
		mov	eax, 3Fh
		jnz	loc_401F37

loc_4020B6:				; CODE XREF: .text:004020C9j
		mov	eax, 3Ah
		jmp	loc_401F37
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4020C0:				; CODE XREF: .text:004020A2j
					; .text:004020A6j
		mov	ecx, [ebp+10h]
		cmp	byte ptr [ecx+1], 3Ah

loc_4020C7:				; CODE XREF: .text:004021ADj
		jnz	short loc_4020A8
		jmp	short loc_4020B6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4020CB:				; CODE XREF: .text:0040208Dj
		xor	eax, eax
		mov	dword_403010, eax
		jmp	short loc_402098
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4020D4:				; CODE XREF: .text:00402048j
					; .text:00402053j
		mov	eax, [ebp-18h]
		mov	ecx, [ebp+14h]
		shl	eax, 4
		mov	edx, [ecx+eax+4]
		lea	eax, [edx-1]
		cmp	eax, 1
		ja	short loc_4020FC
		mov	eax, [ebp-10h]
		test	eax, eax
		jz	loc_4021BC
		mov	eax, [ebp-10h]
		mov	ds:dword_404004, eax

loc_4020FC:				; CODE XREF: .text:004020E7j
					; .text:004021BDj ...
		mov	eax, [ebp-18h]
		mov	edx, [ebp+14h]
		shl	eax, 4
		cmp	dword ptr [edx+eax+4], 1
		jz	short loc_402146

loc_40210C:				; CODE XREF: .text:0040214Ej
		mov	eax, [ebp-18h]
		mov	ecx, [ebp+14h]
		shl	eax, 4
		mov	edx, [ecx+eax+8]
		test	edx, edx
		jz	short loc_40213D
		mov	eax, [ecx+eax+0Ch]
		mov	[edx], eax
		xor	eax, eax

loc_402125:				; CODE XREF: .text:00402144j
		mov	ecx, [ebp+18h]
		test	ecx, ecx
		jz	loc_401F37
		mov	edx, [ebp-18h]
		mov	ecx, [ebp+18h]
		mov	[ecx], edx
		jmp	loc_401F37
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40213D:				; CODE XREF: .text:0040211Bj
		mov	edx, [ebp+14h]
		mov	eax, [edx+eax+0Ch]
		jmp	short loc_402125
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402146:				; CODE XREF: .text:0040210Aj
		mov	esi, ds:dword_404004
		test	esi, esi
		jnz	short loc_40210C
		mov	ebx, dword_403008
		test	ebx, ebx
		jz	short loc_402172
		mov	ecx, [ebp+10h]
		cmp	byte ptr [ecx],	3Ah
		jz	short loc_402172
		mov	dword ptr [esp], offset	aOptionRequir_0	; "option requires an argument -- %s"
		mov	[esp+4], edi
		call	sub_401A00

loc_402172:				; CODE XREF: .text:00402158j
					; .text:00402160j
		mov	eax, [ebp-18h]
		mov	edx, [ebp+14h]
		shl	eax, 4
		mov	ecx, [edx+eax+8]
		test	ecx, ecx
		jnz	short loc_4021B2
		mov	eax, [edx+eax+0Ch]
		mov	dword_403010, eax

loc_40218C:				; CODE XREF: .text:004021BAj
		dec	dword_40300C
		mov	ecx, [ebp+10h]
		movzx	edx, byte ptr [ecx]
		cmp	dl, 2Dh
		jz	short loc_4021A6
		cmp	dl, 2Bh
		jnz	loc_4020A8

loc_4021A6:				; CODE XREF: .text:0040219Bj
		mov	eax, [ebp+10h]
		cmp	byte ptr [eax+1], 3Ah
		jmp	loc_4020C7
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4021B2:				; CODE XREF: .text:00402181j
		xor	edi, edi
		mov	dword_403010, edi
		jmp	short loc_40218C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4021BC:				; CODE XREF: .text:004020EEj
		dec	edx
		jnz	loc_4020FC
		mov	eax, dword_40300C
		mov	ecx, [ebp+0Ch]
		mov	edx, [ecx+eax*4]
		inc	eax
		mov	dword_40300C, eax
		mov	ds:dword_404004, edx
		jmp	loc_4020FC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4021E0:				; CODE XREF: .text:00402033j
		mov	esi, dword_403008
		test	esi, esi
		jz	short loc_402202
		mov	edx, [ebp+10h]
		cmp	byte ptr [edx],	3Ah
		jz	short loc_402202
		mov	dword ptr [esp], offset	aUnknownOptionS	; "unknown option -- %s"
		mov	[esp+4], edi
		call	sub_401A00

loc_402202:				; CODE XREF: .text:004021E8j
					; .text:004021F0j ...
		xor	ebx, ebx
		mov	eax, 3Fh
		mov	dword_403010, ebx
		jmp	loc_401F37
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402214:				; CODE XREF: .text:0040201Bj
		mov	edx, [ebp+14h]
		mov	eax, [edx+ebx]
		mov	[esp], eax
		call	strlen
		cmp	eax, [ebp-14h]
		jz	short loc_40225F
		cmp	dword ptr [ebp-18h], 0FFFFFFFFh
		jnz	short loc_402235
		mov	[ebp-18h], esi
		jmp	loc_402021
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402235:				; CODE XREF: .text:0040222Bj
		mov	eax, dword_403008
		test	eax, eax
		jz	short loc_402202
		mov	ecx, [ebp+10h]
		cmp	byte ptr [ecx],	3Ah
		jz	short loc_402202
		mov	dword ptr [esp], offset	aAmbiguousOptio	; "ambiguous option -- %.*s"
		mov	eax, [ebp-14h]
		mov	[esp+8], edi
		mov	[esp+4], eax
		call	sub_401A00
		jmp	short loc_402202
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40225F:				; CODE XREF: .text:00402225j
		mov	[ebp-18h], esi
		jmp	loc_40202F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402267:				; CODE XREF: .text:00401FE1j
		mov	[esp], edi
		call	strlen
		mov	[ebp-14h], eax
		jmp	loc_401FEF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402280	proc near		; CODE XREF: sub_401818+1Cp
					; sub_401818+41p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		xor	eax, eax
		push	ebx
		sub	esp, 4		; lpModuleName
		mov	ebx, [ebp+arg_4]
		test	ebx, ebx
		jz	loc_40237C

loc_402294:				; CODE XREF: sub_402280+118j
		mov	dword ptr [ebx+4], 0A8h
		xor	ecx, ecx
		mov	edx, 35h
		mov	dword ptr [ebx+8], 3EBh
		test	eax, eax
		mov	dword ptr [ebx+0Ch], 0Bh
		mov	[ebx+80h], ecx
		mov	[ebx+84h], edx
		mov	dword ptr [ebx+2Ch], offset dword_402470
		mov	dword ptr [ebx+30h], offset dword_402478
		mov	dword ptr [ebx+14h], offset unk_404008
		jz	loc_402370
		mov	eax, [ebx+0A4h]
		mov	ds:dword_40400C, eax

loc_4022E4:				; CODE XREF: sub_402280+F7j
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [ebx+24h], offset unk_404010
		mov	dword ptr [ebx+48h], offset sub_402450
		mov	dword ptr [ebx+4Ch], offset sub_402440
		mov	[ebx+28h], eax
		mov	dword ptr [ebx+50h], offset sub_402430
		mov	dword ptr [ebx+54h], offset sub_402420
		mov	eax, [ebp+0]
		mov	dword ptr [ebx+44h], offset calloc
		mov	dword ptr [ebx+18h], offset loc_402418
		mov	dword ptr [ebx+1Ch], offset loc_402410
		mov	[ebx], eax
		mov	dword ptr [ebx+20h], offset loc_402408
		mov	[esp+8+var_8], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	eax, 1
		mov	dword ptr [ebx+34h], offset dword_403000
		mov	dword ptr [ebx+38h], offset unk_403030
		mov	dword ptr [ebx+3Ch], offset dword_404000
		mov	dword ptr [ebx+40h], 404014h

loc_402368:				; CODE XREF: sub_402280+10Fj
		mov	ebx, [ebp+var_4]
		leave
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_402370:				; CODE XREF: sub_402280+53j
		mov	dword ptr [ebx+10h], offset dword_40400C
		jmp	loc_4022E4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40237C:				; CODE XREF: sub_402280+Ej
		mov	[esp+8+var_8], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_402368
		mov	ebx, edx
		mov	eax, 1
		jmp	loc_402294
sub_402280	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION exit. PRESS KEYPAD "+" TO	EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fprintf. PRESS KEYPAD "+"	TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION signal. PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION calloc. PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION printf. PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __errno. PRESS KEYPAD "+"	TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strerror.	PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION vfprintf.	PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strtol. PRESS KEYPAD "+" TO EXPAND]
		align 4
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strncmp. PRESS KEYPAD "+"	TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strlen. PRESS KEYPAD "+" TO EXPAND]
		align 4

loc_402400:				; CODE XREF: sub_401980+6Cj
		jmp	ds:fputc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_402408:				; DATA XREF: sub_402280+AEo
		jmp	ds:realloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_402410:				; DATA XREF: sub_402280+A5o
		jmp	ds:free
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_402418:				; DATA XREF: sub_402280+9Eo
		jmp	ds:malloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402420	proc near		; DATA XREF: sub_402280+8Do
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402420	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402430	proc near		; DATA XREF: sub_402280+86o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402430	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402440	proc near		; DATA XREF: sub_402280+7Co
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402440	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402450	proc near		; DATA XREF: sub_402280+75o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402450	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 4
dword_402470	dd 0FFFFFFFFh, 0	; DATA XREF: sub_402280+3Eo
dword_402478	dd 0FFFFFFFFh, 61h dup(0) ; DATA XREF: sub_402280+45o
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 00000030 (	 48.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001A00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 403000h
dword_403000	dd 0			; DATA XREF: start+6r sub_402280+CCo
dword_403004	dd 4010CBh		; DATA XREF: sub_40131C+42r
					; .text:00401489r ...
dword_403008	dd 1			; DATA XREF: sub_401B20+1F7r
					; sub_401B20+28Cr ...
dword_40300C	dd 1			; DATA XREF: sub_4010E4+16Br
					; sub_401B20+11r ...
dword_403010	dd 3Fh			; DATA XREF: sub_401B20+220w
					; sub_401B20+2BAw ...
dword_403014	dd 401880h		; DATA XREF: sub_401B20+6Cw
					; sub_401B20+E7w ...
dword_403018	dd 0FFFFFFFFh		; DATA XREF: sub_401B20+50w
					; sub_401B20+81r ...
dword_40301C	dd 0FFFFFFFFh		; DATA XREF: sub_401B20+46w
					; sub_401B20+72r ...
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_403030	db    0	;		; DATA XREF: sub_402280+D3o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_data		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 00000014 (	 20.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 404000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_404000	dd ?			; DATA XREF: sub_401B20+25r
					; sub_401B20+5Dw ...
dword_404004	dd ?			; DATA XREF: sub_4010E4+124r
					; sub_401B20+Bw ...
unk_404008	db    ?	;		; DATA XREF: sub_402280+4Co
		db    ?	;
		db    ?	;
		db    ?	;
dword_40400C	dd ?			; DATA XREF: sub_40131C+37r
					; sub_401408+1r ...
unk_404010	db    ?	;		; DATA XREF: sub_402280+6Eo
		db    ?	;
		db    ?	;
		db    ?	;
_bss		ends

;
; Imports from cygdb2
;
; Section 4. (virtual address 00005000)
; Virtual size			: 000002F4 (	756.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001C00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp_db_appexit:dword ; DATA XREF: db_appexitr
		extrn __imp_db_appinit:dword ; DATA XREF: db_appinitr
		extrn __imp_log_archive:dword ;	DATA XREF: log_archiver


;
; Imports from cygwin1
;
		extrn __imp___errno:dword ; DATA XREF: __errnor
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn __progname:dword	; DATA XREF: sub_401980+25r
; void *__cdecl	_imp_calloc(size_t,size_t)
		extrn __imp_calloc:dword ; DATA	XREF: callocr
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_401818+4Cr
					; .text:004023E8r
; void __cdecl _imp_exit(int)
		extrn __imp_exit:dword	; DATA XREF: exitr
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
		extrn fputc:dword	; DATA XREF: .text:00402400r
; void __cdecl free(void *)
		extrn free:dword	; DATA XREF: .text:00402410r
; void *__cdecl	malloc(size_t)
		extrn malloc:dword	; DATA XREF: .text:00402418r
		extrn __imp_printf:dword ; DATA	XREF: printfr
; void *__cdecl	realloc(void *,size_t)
		extrn realloc:dword	; DATA XREF: .text:00402408r
		extrn __imp_signal:dword ; DATA	XREF: signalr
; char *__cdecl	_imp_strerror(int)
		extrn __imp_strerror:dword ; DATA XREF:	strerrorr
; size_t __cdecl _imp_strlen(const char	*)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; int __cdecl _imp_strncmp(const char *,const char *,size_t)
		extrn __imp_strncmp:dword ; DATA XREF: strncmpr
; __int32 __cdecl _imp_strtol(const char *,char	**,int)
		extrn __imp_strtol:dword ; DATA	XREF: strtolr
		extrn __imp_vfprintf:dword ; DATA XREF:	vfprintfr


;
; Imports from KERNEL32
;
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr



		end start
