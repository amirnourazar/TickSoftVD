

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\pamstretch.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00000E68 (   3688.)
; Section size in file		: 00001000 (   4096.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		and	esp, 0FFFFFFF0h
		mov	eax, ds:dword_403000
		test	eax, eax
		jz	short loc_401013
		int	3		; Trap to Debugger

loc_401013:				; CODE XREF: start+10j
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_401240
		call	sub_401AB0
		leave
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401050	proc near		; CODE XREF: sub_401240+44Fp
					; sub_401240+714p

var_58		= dword	ptr -58h
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	ecx, [ebp+arg_4]
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_14], edx
		mov	edx, [ebp+arg_8]
		mov	[ebp+var_18], eax
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], edx

loc_401075:				; CODE XREF: sub_401050+2Fj
		add	[ebp+var_20], ecx
		cmp	[ebp+var_20], 0FFh
		jle	short loc_401075
		mov	[ebp+var_28], 0
		mov	eax, [ebp+var_20]
		xor	edx, edx
		mov	[ebp+var_24], 0
		mov	ebx, [ebp+var_10]
		div	ecx
		mov	ecx, [ebx+18h]
		cmp	ecx, 0
		mov	[ebp+var_38], ecx
		mov	[ebp+var_2C], eax
		jmp	short loc_4010DB
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4010A7:				; CODE XREF: sub_401050+98j
		cmp	[ebp+var_1C], 1
		jz	loc_40116E
		jb	short loc_4010D2
		cmp	[ebp+var_1C], 2
		jz	loc_4011DA
		mov	[esp+58h+var_58], offset aInternalErrorI ; "INTERNAL ERROR: invalid value for edge_"...
		call	pm_error
		mov	edi, [ebp+var_10]
		mov	esi, [edi+18h]
		mov	[ebp+var_38], esi

loc_4010D2:				; CODE XREF: sub_401050+61j
					; sub_401050+A5j ...
		inc	[ebp+var_24]
		mov	esi, [ebp+var_24]
		cmp	[ebp+var_38], esi

loc_4010DB:				; CODE XREF: sub_401050+55j
		jbe	loc_401166
		mov	esi, [ebp+var_38]
		dec	esi
		cmp	esi, [ebp+var_24]
		jbe	short loc_4010A7
		cmp	[ebp+var_20], 0
		mov	[ebp+var_30], 0
		jbe	short loc_4010D2
		mov	eax, [ebp+var_10]
		mov	ecx, [eax+1Ch]
		mov	[ebp+var_40], ecx

loc_401100:				; CODE XREF: sub_401050+10Fj
		xor	ecx, ecx
		cmp	[ebp+var_40], 0
		jbe	short loc_401150
		mov	edi, [ebp+var_28]
		mov	edx, [ebp+var_18]
		mov	ebx, [ebp+var_14]
		mov	eax, [ebp+var_24]
		mov	esi, [edx+edi*4]
		mov	edx, [ebp+var_30]
		mov	edi, [ebx+eax*4]
		mov	[ebp+var_44], esi
		mov	esi, [ebx+eax*4+4]
		mov	ebx, [ebp+var_20]
		sub	ebx, edx
		lea	esi, [esi+0]

loc_401130:				; CODE XREF: sub_401050+FEj
		mov	eax, [edi+ecx*4]
		mov	edx, [ebp+var_30]
		imul	edx, [esi+ecx*4]
		imul	eax, ebx
		add	eax, edx
		xor	edx, edx
		div	[ebp+var_20]
		mov	edx, [ebp+var_44]
		mov	[edx+ecx*4], eax
		inc	ecx
		cmp	[ebp+var_40], ecx
		ja	short loc_401130

loc_401150:				; CODE XREF: sub_401050+B6j
		inc	[ebp+var_28]
		mov	ebx, [ebp+var_2C]
		add	[ebp+var_30], ebx
		mov	ecx, [ebp+var_30]
		cmp	[ebp+var_20], ecx
		ja	short loc_401100
		jmp	loc_4010D2
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401166:				; CODE XREF: sub_401050+8Bj
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40116E:				; CODE XREF: sub_401050+5Bj
		cmp	[ebp+var_20], 0
		mov	[ebp+var_34], 0
		jbe	loc_4010D2
		mov	edx, [ebp+var_10]
		mov	edi, [edx+1Ch]
		mov	[ebp+var_3C], edi

loc_401188:				; CODE XREF: sub_401050+183j
		xor	ecx, ecx
		cmp	[ebp+var_3C], 0
		jbe	short loc_4011C4
		mov	eax, [ebp+var_28]
		mov	esi, [ebp+var_18]
		mov	ebx, [ebp+var_14]
		mov	edx, [ebp+var_24]
		mov	edi, [esi+eax*4]
		mov	eax, [ebp+var_34]
		mov	esi, [ebx+edx*4]
		mov	ebx, [ebp+var_20]
		sub	ebx, eax
		lea	esi, [esi+0]

loc_4011B0:				; CODE XREF: sub_401050+172j
		mov	eax, [esi+ecx*4]
		xor	edx, edx
		imul	eax, ebx
		div	[ebp+var_20]
		mov	[edi+ecx*4], eax
		inc	ecx
		cmp	[ebp+var_3C], ecx
		ja	short loc_4011B0

loc_4011C4:				; CODE XREF: sub_401050+13Ej
		inc	[ebp+var_28]
		mov	edi, [ebp+var_2C]
		add	[ebp+var_34], edi
		mov	ecx, [ebp+var_34]
		cmp	[ebp+var_20], ecx
		ja	short loc_401188
		jmp	loc_4010D2
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4011DA:				; CODE XREF: sub_401050+67j
		cmp	[ebp+var_20], 0
		mov	[ebp+var_48], 0
		jbe	loc_4010D2
		mov	ebx, [ebp+var_10]
		mov	esi, [ebx+1Ch]

loc_4011F1:				; CODE XREF: sub_401050+1DAj
		xor	edx, edx
		cmp	esi, 0
		jbe	short loc_40121B
		mov	ecx, [ebp+var_28]
		mov	edi, [ebp+var_18]
		mov	eax, [ebp+var_24]
		mov	ebx, [edi+ecx*4]
		mov	edi, [ebp+var_14]
		mov	ecx, [edi+eax*4]
		lea	esi, [esi+0]

loc_401210:				; CODE XREF: sub_401050+1C9j
		mov	eax, [ecx+edx*4]
		mov	[ebx+edx*4], eax
		inc	edx
		cmp	esi, edx
		ja	short loc_401210

loc_40121B:				; CODE XREF: sub_401050+1A6j
		inc	[ebp+var_28]
		mov	ebx, [ebp+var_2C]
		add	[ebp+var_48], ebx
		mov	edx, [ebp+var_48]
		cmp	[ebp+var_20], edx
		ja	short loc_4011F1
		jmp	loc_4010D2
sub_401050	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		jmp	short sub_401240
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401240	proc near		; CODE XREF: .text:00401231j
					; DATA XREF: start+33o

var_318		= dword	ptr -318h
var_314		= dword	ptr -314h
var_310		= dword	ptr -310h
var_30C		= dword	ptr -30Ch
var_308		= dword	ptr -308h
var_304		= dword	ptr -304h
var_2F8		= dword	ptr -2F8h
var_2F4		= dword	ptr -2F4h
var_2F0		= dword	ptr -2F0h
var_2EC		= dword	ptr -2ECh
var_2E8		= dword	ptr -2E8h
var_2E4		= dword	ptr -2E4h
var_2E0		= dword	ptr -2E0h
var_2DC		= dword	ptr -2DCh
var_2D8		= dword	ptr -2D8h
var_2D4		= dword	ptr -2D4h
var_2D0		= dword	ptr -2D0h
var_2CC		= dword	ptr -2CCh
var_2C8		= dword	ptr -2C8h
var_2C4		= dword	ptr -2C4h
var_2C0		= dword	ptr -2C0h
var_2BC		= dword	ptr -2BCh
var_2B8		= dword	ptr -2B8h
var_2B4		= dword	ptr -2B4h
var_2B0		= dword	ptr -2B0h
var_2AC		= dword	ptr -2ACh
var_2A8		= dword	ptr -2A8h
var_2A4		= dword	ptr -2A4h
var_2A0		= dword	ptr -2A0h
var_29C		= dword	ptr -29Ch
var_298		= dword	ptr -298h
var_294		= dword	ptr -294h
var_290		= dword	ptr -290h
var_28C		= dword	ptr -28Ch
var_288		= dword	ptr -288h
var_280		= dword	ptr -280h
var_27C		= dword	ptr -27Ch
var_274		= dword	ptr -274h
var_270		= dword	ptr -270h
var_26C		= dword	ptr -26Ch
var_158		= dword	ptr -158h
var_14C		= dword	ptr -14Ch
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	eax, 10h
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 30Ch
		xor	ebx, ebx
		and	esp, 0FFFFFFF0h
		call	sub_401A80
		call	__main
		mov	edx, [ebp+arg_4]
		lea	eax, [ebp+arg_0]
		and	ebx, 0FFFFFF00h
		mov	[esp+318h+var_318], eax
		lea	esi, [ebp+var_290]
		mov	bh, 0
		mov	[esp+318h+var_314], edx
		call	pnm_init
		mov	[esp+318h+var_318], 960h
		mov	edi, [ebp+arg_0]
		mov	[ebp+var_29C], edi
		lea	edi, [ebp+var_28]
		call	malloc
		mov	byte ptr [eax],	62h
		lea	ecx, [ebp+var_28C]
		lea	edx, [ebp+var_294]
		mov	[eax+10h], ecx
		lea	ecx, [ebp+var_20]
		mov	[eax+28h], esi
		lea	esi, [ebp+var_298]
		mov	byte ptr [eax+18h], 64h
		mov	[eax+40h], edx
		lea	edx, [ebp+var_1C]
		mov	byte ptr [eax+30h], 0
		mov	byte ptr [eax+48h], 0
		mov	[eax+3Ch], ecx
		mov	ecx, 8
		mov	[eax+58h], esi
		mov	esi, eax
		mov	[eax+54h], edx
		lea	edx, [ebp+var_29C]
		mov	dword ptr [eax+4], offset aBlackedge ; "blackedge"
		mov	dword ptr [eax+8], 1
		mov	dword ptr [eax+0Ch], 0
		mov	dword ptr [eax+14h], 0
		mov	dword ptr [eax+1Ch], offset aDropedge ;	"dropedge"
		mov	dword ptr [eax+20h], 1
		mov	dword ptr [eax+24h], 0
		mov	dword ptr [eax+2Ch], 0
		mov	dword ptr [eax+34h], offset aXscale ; "xscale"
		mov	dword ptr [eax+38h], 4
		mov	dword ptr [eax+44h], 0
		mov	dword ptr [eax+4Ch], offset aYscale ; "yscale"
		mov	dword ptr [eax+50h], 4
		mov	dword ptr [eax+5Ch], 0
		mov	dword ptr [eax+68h], 0
		xor	eax, eax
		mov	[esp+318h+var_310], ebx
		mov	ebx, [ebp+arg_4]
		mov	[esp+318h+var_304], eax
		mov	[esp+318h+var_308], ecx
		mov	[esp+318h+var_30C], esi
		mov	[esp+318h+var_314], ebx
		mov	[esp+318h+var_318], edx
		call	optParseOptions3
		mov	eax, [ebp+var_28C]
		test	eax, eax
		jz	short loc_401389
		mov	ebx, [ebp+var_290]
		test	ebx, ebx
		jnz	loc_4018DA
		mov	[ebp+var_24], 1
		jmp	short loc_401398
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401389:				; CODE XREF: sub_401240+130j
		cmp	[ebp+var_290], 1
		sbb	esi, esi
		and	esi, 2
		mov	[ebp+var_24], esi

loc_401398:				; CODE XREF: sub_401240+147j
					; sub_401240+6A6j
		mov	ecx, [ebp+var_294]
		test	ecx, ecx
		jz	short loc_4013AD
		mov	edx, [edi+8]
		test	edx, edx
		jz	loc_401902

loc_4013AD:				; CODE XREF: sub_401240+160j
					; sub_401240+6CEj
		mov	edx, [ebp+var_298]
		test	edx, edx
		jz	short loc_4013C2
		mov	eax, [edi+0Ch]
		test	eax, eax
		jz	loc_4018EB

loc_4013C2:				; CODE XREF: sub_401240+175j
					; sub_401240+6BDj
		mov	eax, [ebp+var_294]
		test	eax, eax
		jz	short loc_4013E5
		test	edx, edx
		jz	loc_4018CE

loc_4013D4:				; CODE XREF: sub_401240+1A7j
		test	eax, eax
		jnz	loc_40195E
		mov	dword ptr [edi+8], 1
		jmp	short loc_4013F1
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4013E5:				; CODE XREF: sub_401240+18Aj
		test	edx, edx
		jnz	short loc_4013D4

loc_4013E9:				; CODE XREF: sub_401240+695j
		test	eax, eax
		jnz	loc_40195E

loc_4013F1:				; CODE XREF: sub_401240+1A3j
		test	edx, edx
		jnz	loc_40195E
		mov	edx, [ebp+var_29C]
		lea	ebx, [edx-2]
		cmp	ebx, 1
		jbe	short loc_40141A
		mov	[esp+318h+var_318], offset aWrongNumberOfA ; "Wrong number of arguments	(%d).  Withou"...
		lea	esi, [edx-1]
		mov	[esp+318h+var_314], esi
		call	pm_error

loc_40141A:				; CODE XREF: sub_401240+1C5j
		mov	ebx, [ebp+arg_4]
		mov	ecx, 0Ah
		lea	esi, [ebp+var_2A0]
		mov	[esp+318h+var_310], ecx
		mov	[esp+318h+var_314], esi
		mov	eax, [ebx+4]
		mov	[esp+318h+var_318], eax
		call	strtol
		mov	edx, [ebp+arg_4]
		mov	ebx, eax
		mov	ecx, [edx+4]
		cmp	byte ptr [ecx],	0
		jz	loc_401A21
		mov	edx, [ebp+var_2A0]
		movzx	eax, byte ptr [edx]
		test	al, al
		jnz	loc_401A69
		cmp	ebx, 1
		jbe	loc_401A54

loc_401466:				; CODE XREF: sub_401240+7EDj
					; sub_401240+824j
		mov	[edi+8], ebx
		mov	[edi+0Ch], ebx
		mov	ebx, [ebp+var_29C]
		dec	ebx
		dec	ebx
		jle	loc_4019FA
		mov	esi, [ebp+arg_4]
		mov	eax, [esi+8]

loc_401480:				; CODE XREF: sub_401240+73Bj
		mov	[edi], eax

loc_401482:				; CODE XREF: sub_401240+7C0j
		mov	eax, [ebp+var_28]
		lea	edi, [ebp+var_158]
		mov	[esp+318h+var_318], eax
		call	pm_openr
		mov	[ebp+var_2A4], eax
		mov	edx, 128h
		mov	[esp+318h+var_310], edx
		mov	[esp+318h+var_314], edi
		mov	[esp+318h+var_318], eax
		call	pnm_readpaminit
		cmp	[ebp+var_140], 1
		jle	loc_401A43

loc_4014BB:				; CODE XREF: sub_401240+80Fj
		cmp	[ebp+var_144], 1
		jle	loc_401A32

loc_4014C8:				; CODE XREF: sub_401240+7FEj
		lea	ecx, [ebp+var_288]
		mov	eax, 12Ch
		lea	edi, [ebp+var_158]
		mov	[esp+318h+var_318], ecx
		mov	[esp+318h+var_310], eax
		mov	[esp+318h+var_314], edi
		call	memcpy
		call	__getreent
		mov	ecx, [ebp+var_14C]
		mov	esi, [eax+8]
		cmp	ecx, 5033h
		mov	[ebp+var_280], esi
		setnz	bl
		xor	edx, edx
		cmp	ecx, 5036h
		setnz	dl
		test	ebx, edx
		jz	short loc_401549
		cmp	ecx, 5032h
		setnz	bl
		xor	edx, edx
		cmp	ecx, 5035h
		setnz	dl
		test	ebx, edx
		jz	short loc_401549
		cmp	ecx, 5031h
		setz	al
		cmp	ecx, 5034h
		setz	bl
		or	eax, ebx
		test	al, 1
		jnz	loc_401A05

loc_401549:				; CODE XREF: sub_401240+2D3j
					; sub_401240+2EBj
		mov	[ebp+var_27C], ecx

loc_40154F:				; CODE XREF: sub_401240+7DCj
		xor	ecx, ecx
		cmp	[ebp+var_24], 0
		mov	edi, [ebp+var_140]
		mov	esi, [ebp+var_20]
		mov	eax, [ebp+var_144]
		setz	cl
		mov	ebx, [ebp+var_1C]
		sub	edi, ecx
		sub	eax, ecx
		imul	edi, esi
		imul	eax, ebx
		mov	[ebp+var_270], edi
		lea	edi, [ebp+var_288]
		mov	[ebp+var_274], eax
		mov	[esp+318h+var_318], edi
		call	pnm_writepaminit
		mov	[esp+318h+var_318], edi
		mov	edx, offset dword_403020
		lea	edi, [ebp+var_158]
		mov	[esp+318h+var_314], edx
		call	pnm_createBlackTuple
		mov	esi, [ebp+var_20]
		lea	edx, [ebp+var_158]
		mov	ebx, [ebp+var_1C]
		mov	[esp+318h+var_318], edx
		mov	eax, [ebp+var_24]
		mov	[ebp+var_2A8], esi
		lea	esi, [ebp+var_288]
		mov	[ebp+var_2AC], ebx
		lea	ebx, [ebp+var_288]
		mov	[ebp+var_2B0], eax
		call	pnm_allocpamrow
		mov	[ebp+var_2B4], eax
		mov	[esp+318h+var_318], edi
		call	pnm_allocpamrow
		mov	[ebp+var_2B8], eax
		lea	ecx, [ebp+var_288]
		mov	[esp+318h+var_318], ecx
		call	pnm_allocpamrow
		mov	[ebp+var_2C4], eax
		mov	[esp+318h+var_318], esi
		call	pnm_allocpamrow
		mov	[ebp+var_2C8], eax
		mov	[esp+318h+var_318], ebx
		lea	ebx, [ebp+var_158]
		call	pnm_allocpamrow
		mov	[ebp+var_2D4], eax
		mov	ecx, [ebp+var_2C8]
		mov	eax, [ebp+var_2B4]
		mov	[esp+318h+var_318], ebx
		mov	edx, [ebp+var_2C4]
		mov	edi, [ebp+var_2B8]
		mov	[ebp+var_2D0], ecx
		mov	esi, [ebp+var_2B4]
		mov	[ebp+var_2BC], eax
		mov	[ebp+var_2CC], edx
		mov	[ebp+var_2C0], edi
		mov	[esp+318h+var_314], esi
		call	pnm_readpamrow
		mov	edx, [ebp+var_2A8]
		mov	eax, [ebp+var_2B0]
		mov	edi, [ebp+var_2C4]
		mov	[esp+318h+var_314], edx
		mov	edx, [ebp+var_2B4]
		mov	[esp+318h+var_310], eax
		lea	eax, [ebp+var_158]
		mov	[esp+318h+var_318], edi
		call	sub_401050
		cmp	[ebp+var_2B0], 1
		mov	eax, [ebp+var_144]
		sbb	eax, 0
		xor	ecx, ecx
		mov	[ebp+var_2D8], ecx
		cmp	[ebp+var_2D8], eax
		mov	[ebp+var_2DC], eax
		jnb	loc_40186E

loc_4016BE:				; CODE XREF: sub_401240+628j
		mov	edx, [ebp+var_144]
		dec	edx
		cmp	edx, [ebp+var_2D8]
		jnz	loc_401913
		cmp	[ebp+var_2B0], 1
		jz	loc_401980
		jb	loc_4019A5
		cmp	[ebp+var_2B0], 2
		jz	loc_4019B6

loc_4016F1:				; CODE XREF: sub_401240+719j
					; sub_401240+760j ...
		xor	ebx, ebx
		mov	[ebp+var_2E0], ebx

loc_4016F9:				; CODE XREF: sub_401240+4CFj
		mov	ebx, [ebp+var_2AC]
		add	[ebp+var_2E0], ebx
		cmp	[ebp+var_2E0], 0FFh
		jbe	short loc_4016F9
		mov	eax, [ebp+var_2E0]
		xor	edx, edx
		mov	ecx, [ebp+var_2E0]
		div	ebx
		xor	edx, edx
		mov	[ebp+var_2E4], edx
		cmp	[ebp+var_2E4], ecx
		mov	[ebp+var_2E8], eax
		jnb	loc_401826

loc_40173B:				; CODE XREF: sub_401240+5E0j
		mov	edi, [ebp+var_270]
		xor	esi, esi
		mov	[ebp+var_2EC], esi
		cmp	edi, 0
		mov	[ebp+var_2F0], edi
		jbe	loc_4017F0
		mov	ebx, [ebp+var_2E0]
		mov	ecx, [ebp+var_2E4]
		mov	edx, [ebp+var_26C]
		sub	ebx, ecx
		mov	[ebp+var_2F4], edx
		mov	[ebp+var_2F8], ebx
		nop
		lea	esi, [esi+0]

loc_401780:				; CODE XREF: sub_401240+5AEj
		xor	ecx, ecx
		cmp	[ebp+var_2F4], 0
		jbe	short loc_4017DC
		mov	ebx, [ebp+var_2EC]
		mov	esi, [ebp+var_2D4]
		mov	edx, [ebp+var_2CC]
		mov	edi, [esi+ebx*4]
		mov	esi, [edx+ebx*4]
		mov	edx, [ebp+var_2D0]
		mov	ebx, [edx+ebx*4]
		lea	esi, [esi+0]

loc_4017B0:				; CODE XREF: sub_401240+59Aj
		mov	edx, [esi+ecx*4]
		mov	eax, [ebp+var_2F8]
		imul	eax, edx
		mov	edx, [ebp+var_2E4]
		imul	edx, [ebx+ecx*4]
		add	eax, edx
		xor	edx, edx
		div	[ebp+var_2E0]
		mov	[edi+ecx*4], eax
		inc	ecx
		cmp	[ebp+var_2F4], ecx
		ja	short loc_4017B0

loc_4017DC:				; CODE XREF: sub_401240+549j
		inc	[ebp+var_2EC]
		mov	edi, [ebp+var_2EC]
		cmp	[ebp+var_2F0], edi
		ja	short loc_401780

loc_4017F0:				; CODE XREF: sub_401240+512j
		mov	eax, [ebp+var_2D4]
		lea	esi, [ebp+var_288]
		mov	[esp+318h+var_318], esi
		mov	[esp+318h+var_314], eax
		call	pnm_writepamrow
		mov	ebx, [ebp+var_2E8]
		mov	ecx, [ebp+var_2E0]
		add	[ebp+var_2E4], ebx
		cmp	[ebp+var_2E4], ecx
		jb	loc_40173B

loc_401826:				; CODE XREF: sub_401240+4F5j
		inc	[ebp+var_2D8]
		mov	ecx, [ebp+var_2BC]
		mov	ebx, [ebp+var_2C0]
		mov	edx, [ebp+var_2CC]
		mov	edi, [ebp+var_2D0]
		mov	[ebp+var_2C0], ecx
		mov	eax, [ebp+var_2DC]
		mov	[ebp+var_2BC], ebx
		mov	[ebp+var_2CC], edi
		mov	[ebp+var_2D0], edx
		cmp	[ebp+var_2D8], eax
		jb	loc_4016BE

loc_40186E:				; CODE XREF: sub_401240+478j
		mov	ebx, [ebp+var_2D4]
		mov	[esp+318h+var_318], ebx
		call	free
		mov	ecx, [ebp+var_2C8]
		mov	[esp+318h+var_318], ecx
		call	free
		mov	edi, [ebp+var_2C4]
		mov	[esp+318h+var_318], edi
		call	free
		mov	edx, [ebp+var_2B8]
		mov	[esp+318h+var_318], edx
		call	free
		mov	eax, [ebp+var_2B4]
		mov	[esp+318h+var_318], eax
		call	free
		mov	esi, [ebp+var_2A4]
		mov	[esp+318h+var_318], esi
		call	pm_close
		mov	[esp+318h+var_318], 0
		call	exit

loc_4018CE:				; CODE XREF: sub_401240+18Ej
		mov	dword ptr [edi+0Ch], 1
		jmp	loc_4013E9
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4018DA:				; CODE XREF: sub_401240+13Aj
		mov	[esp+318h+var_318], offset aCanTSpecifyBot ; "Can't specify both -blackedge and -drop"...
		call	pm_error
		jmp	loc_401398
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4018EB:				; CODE XREF: sub_401240+17Cj
		mov	[esp+318h+var_318], offset aYouSpecifiedZe ; "You specified zero for the Y scale fact"...
		call	pm_error
		mov	edx, [ebp+var_298]
		jmp	loc_4013C2
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401902:				; CODE XREF: sub_401240+167j
		mov	[esp+318h+var_318], offset aYouSpecified_0 ; "You specified zero for the X scale fact"...
		call	pm_error
		jmp	loc_4013AD
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401913:				; CODE XREF: sub_401240+48Bj
		mov	esi, [ebp+var_2C0]
		lea	edi, [ebp+var_158]
		mov	[esp+318h+var_318], edi
		mov	[esp+318h+var_314], esi
		call	pnm_readpamrow
		mov	edx, [ebp+var_2A8]
		mov	eax, [ebp+var_2B0]
		mov	ecx, [ebp+var_2D0]
		mov	[esp+318h+var_314], edx
		mov	edx, [ebp+var_2C0]
		mov	[esp+318h+var_310], eax
		lea	eax, [ebp+var_158]
		mov	[esp+318h+var_318], ecx
		call	sub_401050
		jmp	loc_4016F1
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40195E:				; CODE XREF: sub_401240+196j
					; sub_401240+1ABj ...
		mov	eax, [ebp+var_29C]
		lea	edx, [eax-1]
		cmp	edx, 1
		jg	short loc_4019DF

loc_40196C:				; CODE XREF: sub_401240+7B5j
		dec	eax
		test	eax, eax
		jle	loc_4019FA
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx+4]
		jmp	loc_401480
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401980:				; CODE XREF: sub_401240+498j
		mov	ecx, [ebp+var_270]
		xor	edx, edx
		cmp	ecx, 0
		jmp	short loc_40199E
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40198D:				; CODE XREF: sub_401240+75Ej
		mov	eax, ds:dword_403020
		mov	ebx, [ebp+var_2D0]
		mov	[ebx+edx*4], eax
		inc	edx
		cmp	ecx, edx

loc_40199E:				; CODE XREF: sub_401240+74Bj
		jg	short loc_40198D
		jmp	loc_4016F1
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019A5:				; CODE XREF: sub_401240+49Ej
		mov	[esp+318h+var_318], offset aInternalErrorP ; "INTERNAL ERROR: processing last row, bu"...
		call	pm_error
		jmp	loc_4016F1
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019B6:				; CODE XREF: sub_401240+4ABj
		mov	ecx, [ebp+var_270]
		xor	edx, edx
		cmp	ecx, 0
		jmp	short loc_4019D8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019C3:				; CODE XREF: sub_401240+798j
		mov	ebx, [ebp+var_2CC]
		mov	edi, [ebp+var_2D0]
		mov	esi, [ebx+edx*4]
		mov	[edi+edx*4], esi
		inc	edx
		cmp	ecx, edx

loc_4019D8:				; CODE XREF: sub_401240+781j
		jg	short loc_4019C3
		jmp	loc_4016F1
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019DF:				; CODE XREF: sub_401240+72Aj
		mov	[esp+318h+var_314], edx
		mov	[esp+318h+var_318], offset aTooManyArgumen ; "Too many arguments (%d).	With a scale "...
		call	pm_error
		mov	eax, [ebp+var_29C]
		jmp	loc_40196C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019FA:				; CODE XREF: sub_401240+234j
					; sub_401240+72Fj
		mov	dword ptr [edi], offset	asc_40220C ; "-"
		jmp	loc_401482
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A05:				; CODE XREF: sub_401240+303j
		mov	[esp+318h+var_318], offset aPromotingFromP ; "promoting	from PBM to PGM"
		mov	esi, 5032h
		mov	[ebp+var_27C], esi
		call	pm_message
		jmp	loc_40154F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A21:				; CODE XREF: sub_401240+206j
		mov	[esp+318h+var_318], offset aScaleArgumentI ; "Scale argument is	a null string.	Must "...
		call	pm_error
		jmp	loc_401466
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A32:				; CODE XREF: sub_401240+282j
		mov	[esp+318h+var_318], offset aImageIsTooShor ; "Image is too short.  Must	be at least 2"...
		call	pm_error
		jmp	loc_4014C8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A43:				; CODE XREF: sub_401240+275j
		mov	[esp+318h+var_318], offset aImageIsTooNarr ; "Image is too narrow.  Must be at least "...
		call	pm_error
		jmp	loc_4014BB
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A54:				; CODE XREF: sub_401240+220j
		mov	[esp+318h+var_314], ebx
		mov	[esp+318h+var_318], offset aScaleArgumentM ; "Scale argument must be at	least 2.  You"...

loc_401A5F:				; CODE XREF: sub_401240+837j
		call	pm_error
		jmp	loc_401466
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A69:				; CODE XREF: sub_401240+217j
		mov	[esp+318h+var_318], offset aScaleArgumentC ; "Scale argument contains non-numeric cha"...
		movsx	eax, al
		mov	[esp+318h+var_314], eax
		jmp	short loc_401A5F
sub_401240	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401A80	proc near		; CODE XREF: sub_401240+16p
		push	ecx
		mov	ecx, esp
		add	ecx, 8

loc_401A86:				; CODE XREF: sub_401A80+1Bj
		cmp	eax, 1000h
		jb	short loc_401A9D
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		jmp	short loc_401A86
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A9D:				; CODE XREF: sub_401A80+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		jmp	eax
sub_401A80	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401AB0	proc near		; CODE XREF: start+3Ap

var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_C2		= dword	ptr -0C2h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		mov	[esp+18h+var_14], eax
		mov	[esp+18h+var_18], esi
		call	sub_401B80
		sub	esp, 8
		test	eax, eax
		jz	short loc_401AE1
		mov	[esp+18h+var_18], 0

loc_401ADB:				; CODE XREF: sub_401AB0+56j
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)

loc_401AE1:				; CODE XREF: sub_401AB0+22j
		sub	esp, 0C0h
		lea	ebx, [esp+0D8h+var_C2+1]
		and	ebx, 0FFFFFFF0h
		mov	dword ptr [ebx], 0
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	sub_401B80
		sub	esp, 8
		mov	[esp+0D8h+var_D8], ebx
		jmp	short loc_401ADB
sub_401AB0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memcpy. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION exit. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getreent. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strtol. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS KEYPAD "+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401B80	proc near		; CODE XREF: sub_401AB0+18p
					; sub_401AB0+4Bp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		push	ebx
		sub	esp, 4		; lpModuleName
		mov	ebx, [ebp+arg_4]
		test	ebx, ebx
		jz	loc_401C83

loc_401B94:				; CODE XREF: sub_401B80+11Fj
		mov	dword ptr [ebx+4], 0A8h
		xor	ecx, ecx
		mov	edx, 84h
		mov	dword ptr [ebx+8], 3EDh
		test	eax, eax
		mov	dword ptr [ebx+0Ch], 12h
		mov	[ebx+80h], ecx
		mov	[ebx+84h], edx
		mov	dword ptr [ebx+2Ch], offset dword_401E58
		mov	dword ptr [ebx+30h], offset dword_401E60
		mov	dword ptr [ebx+14h], offset unk_403014
		jnz	loc_401C71
		mov	eax, ds:_impure_ptr
		mov	[ebx+10h], eax

loc_401BE1:				; CODE XREF: sub_401B80+FEj
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [ebx+48h], offset sub_401D70
		mov	dword ptr [ebx+4Ch], offset sub_401D60
		mov	[ebx+28h], eax
		mov	eax, [ebp+0]
		mov	dword ptr [ebx+50h], offset sub_401D50
		mov	dword ptr [ebx+54h], offset sub_401D40
		mov	dword ptr [ebx+24h], offset unk_403010
		mov	[ebx], eax
		mov	dword ptr [ebx+18h], offset malloc
		mov	dword ptr [ebx+1Ch], offset free
		mov	dword ptr [ebx+20h], offset loc_401D30
		mov	dword ptr [ebx+44h], offset loc_401D20
		mov	[esp+8+var_8], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	dword ptr [ebx+34h], offset aInternalErrorI ; "INTERNAL	ERROR: invalid value for edge_"...
		mov	dword ptr [ebx+38h], offset aInternalErrorI ; "INTERNAL	ERROR: invalid value for edge_"...
		mov	dword ptr [ebx+3Ch], offset dword_403000
		mov	dword ptr [ebx+40h], 403050h
		call	sub_401CF0
		mov	eax, 1

loc_401C6A:				; CODE XREF: sub_401B80+116j
		mov	ebx, [ebp+var_4]
		leave
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C71:				; CODE XREF: sub_401B80+53j
		mov	edx, [ebx+0A4h]
		mov	eax, ds:_impure_ptr
		mov	[eax], edx
		jmp	loc_401BE1
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C83:				; CODE XREF: sub_401B80+Ej
		mov	[esp+8+var_8], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_401C6A
		mov	ebx, edx
		mov	eax, 1
		jmp	loc_401B94
sub_401B80	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401CC0	proc near		; CODE XREF: sub_401CF0+1Fp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ebx, [ebp+arg_4]
		jmp	short loc_401CDC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401CD0:				; CODE XREF: sub_401CC0+1Ej
		mov	edx, [ecx+4]
		mov	eax, [ecx]
		add	ecx, 8
		add	edx, esi
		add	[edx], eax

loc_401CDC:				; CODE XREF: sub_401CC0+Ej
		cmp	ecx, ebx
		jb	short loc_401CD0
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_401CC0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401CF0	proc near		; CODE XREF: sub_401B80+E0p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	edx, 400000h
		mov	ebp, esp
		mov	eax, offset unk_402330
		sub	esp, 0Ch
		mov	[esp+0Ch+var_4], edx
		mov	[esp+0Ch+var_8], eax
		mov	[esp+0Ch+var_C], offset	unk_402330
		call	sub_401CC0
		leave
		retn
sub_401CF0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401D20:				; DATA XREF: sub_401B80+ABo
		jmp	ds:calloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401D30:				; DATA XREF: sub_401B80+A4o
		jmp	ds:realloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401D40	proc near		; DATA XREF: sub_401B80+86o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401D40	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401D50	proc near		; DATA XREF: sub_401B80+7Fo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401D50	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401D60	proc near		; DATA XREF: sub_401B80+72o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401D60	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401D70	proc near		; DATA XREF: sub_401B80+6Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401D70	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION optParseOptions3.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_close.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_error.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_message. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_openr.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_allocpamrow. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_createBlackTuple. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_init.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_readpaminit. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_readpamrow. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_writepaminit.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_writepamrow. PRESS KEYPAD "+"	TO EXPAND]
		align 4
dword_401E58	dd 0FFFFFFFFh, 0	; DATA XREF: sub_401B80+3Eo
dword_401E60	dd 0FFFFFFFFh, 67h dup(0) ; DATA XREF: sub_401B80+45o
_text		ends

; Section 2. (virtual address 00002000)
; Virtual size			: 00000330 (	816.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001400
; Flags	40000040: Data Readable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 402000h
aInternalErrorI	db 'INTERNAL ERROR: invalid value for edge_mode',0
					; DATA XREF: sub_401050+6Do
					; sub_401B80+C4o ...
aBlackedge	db 'blackedge',0        ; DATA XREF: sub_401240+9Eo
aDropedge	db 'dropedge',0         ; DATA XREF: sub_401240+BAo
aXscale		db 'xscale',0           ; DATA XREF: sub_401240+D6o
aYscale		db 'yscale',0           ; DATA XREF: sub_401240+EBo
		align 4
aWrongNumberOfA	db 'Wrong number of arguments (%d).  Without scale options, you '
					; DATA XREF: sub_401240+1C7o
		db 'must supply 1 or 2 arguments:  scale and optional file speci'
		db 'fication',0
		align 4
aCanTSpecifyBot	db 'Can',27h,'t specify both -blackedge and -dropedge options.',0
					; DATA XREF: sub_401240+69Ao
		align 4
aYouSpecifiedZe	db 'You specified zero for the Y scale factor.',0
					; DATA XREF: sub_401240+6ABo
		align 4
aYouSpecified_0	db 'You specified zero for the X scale factor.',0
					; DATA XREF: sub_401240+6C2o
		align 4
aInternalErrorP	db 'INTERNAL ERROR: processing last row, but edge_mode is EDGE_D'
					; DATA XREF: sub_401240+765o
		db 'ROP.',0
		align 4
aTooManyArgumen	db 'Too many arguments (%d).  With a scale option, the only argu'
					; DATA XREF: sub_401240+7A3o
		db 'ment is the optional file specification',0
asc_40220C	db '-',0                ; DATA XREF: sub_401240+7BAo
aPromotingFromP	db 'promoting from PBM to PGM',0 ; DATA XREF: sub_401240+7C5o
aScaleArgumentI	db 'Scale argument is a null string.  Must be a number.',0
					; DATA XREF: sub_401240+7E1o
aImageIsTooShor	db 'Image is too short.  Must be at least 2 lines.',0
					; DATA XREF: sub_401240+7F2o
		align 4
aImageIsTooNarr	db 'Image is too narrow.  Must be at least 2 columns.',0
					; DATA XREF: sub_401240+803o
		align 4
aScaleArgumentM	db 'Scale argument must be at least 2.  You specified %d',0
					; DATA XREF: sub_401240+818o
		align 4
aScaleArgumentC	db 'Scale argument contains non-numeric character ',27h,'%c',27h
					; DATA XREF: sub_401240+829o
		db '.',0
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_402330	db    0	;		; DATA XREF: sub_401CF0+8o
					; sub_401CF0+18o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_rdata		ends

; Section 3. (virtual address 00003000)
; Virtual size			: 00000050 (	 80.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 403000h
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
dword_403000	dd ?			; DATA XREF: start+9r sub_401B80+D2o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_403010	db    ?	;		; DATA XREF: sub_401B80+8Do
		db    ?	;
		db    ?	;
		db    ?	;
unk_403014	db    ?	;		; DATA XREF: sub_401B80+4Co
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_403020	dd ?			; DATA XREF: sub_401240+351o
					; sub_401240+74Dr
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
_bss		ends

;
; Imports from cygwin1
;
; Section 4. (virtual address 00004000)
; Virtual size			: 00000368 (	872.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001800
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp___getreent:dword ; DATA XREF: __getreentr
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn _impure_ptr:dword	; DATA XREF: sub_401B80+59r
					; sub_401B80+F7r
; void *__cdecl	calloc(size_t,size_t)
		extrn calloc:dword	; DATA XREF: .text:00401D20r
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_401AB0+2Br
					; .text:00401CB0r
; void __cdecl _imp_exit(int)
		extrn __imp_exit:dword	; DATA XREF: exitr
; void __cdecl _imp_free(void *)
		extrn __imp_free:dword	; DATA XREF: freer
; void *__cdecl	_imp_malloc(size_t)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; void *__cdecl	_imp_memcpy(void *,const void *,size_t)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; void *__cdecl	realloc(void *,size_t)
		extrn realloc:dword	; DATA XREF: .text:00401D30r
; __int32 __cdecl _imp_strtol(const char *,char	**,int)
		extrn __imp_strtol:dword ; DATA	XREF: strtolr


;
; Imports from KERNEL32
;
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr


;
; Imports from cygnetpbm-10
;
		extrn __imp_optParseOptions3:dword ; DATA XREF:	optParseOptions3r
		extrn __imp_pm_close:dword ; DATA XREF:	pm_closer
		extrn __imp_pm_error:dword ; DATA XREF:	pm_errorr
		extrn __imp_pm_message:dword ; DATA XREF: pm_messager
		extrn __imp_pm_openr:dword ; DATA XREF:	pm_openrr
		extrn __imp_pnm_allocpamrow:dword ; DATA XREF: pnm_allocpamrowr
		extrn __imp_pnm_createBlackTuple:dword ; DATA XREF: pnm_createBlackTupler
		extrn __imp_pnm_init:dword ; DATA XREF:	pnm_initr
		extrn __imp_pnm_readpaminit:dword ; DATA XREF: pnm_readpaminitr
		extrn __imp_pnm_readpamrow:dword ; DATA	XREF: pnm_readpamrowr
		extrn __imp_pnm_writepaminit:dword ; DATA XREF:	pnm_writepaminitr
		extrn __imp_pnm_writepamrow:dword ; DATA XREF: pnm_writepamrowr



		end start
