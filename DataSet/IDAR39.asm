

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\pbmtext.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00001608 (   5640.)
; Section size in file		: 00001800 (   6144.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		and	esp, 0FFFFFFF0h
		mov	eax, ds:dword_404000
		test	eax, eax
		jz	short loc_401013
		int	3		; Trap to Debugger

loc_401013:				; CODE XREF: start+10j
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_401200
		call	sub_402240
		leave
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401050	proc near		; CODE XREF: sub_401200+230p
					; sub_401200+3ADp ...

var_18		= dword	ptr -18h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, edx
		push	ebx
		sub	esp, 0Ch
		test	edx, edx
		mov	[ebp+var_10], eax
		mov	[eax+4], edx
		jz	short loc_4010D2
		xor	eax, eax
		cmp	edx, 3FFFFFFFh
		jbe	short loc_4010AE

loc_40106F:				; CODE XREF: sub_401050+6Dj
					; sub_401050+8Ej
		mov	edx, [ebp+var_10]
		test	eax, eax
		mov	[edx], eax
		jz	short loc_4010E0
		xor	ebx, ebx
		cmp	ebx, esi
		jnb	short loc_4010C0
		mov	ecx, [ebp+arg_0]
		lea	edi, [ecx+1]
		jmp	short loc_4010A5
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401086:				; CODE XREF: sub_401050+57j
		mov	[esp+18h+var_18], 1

loc_40108D:				; CODE XREF: sub_401050+5Cj
		call	malloc
		mov	ecx, [ebp+var_10]
		mov	edx, eax
		test	edx, edx
		mov	eax, [ecx]
		mov	[eax+ebx*4], edx
		jz	short loc_4010E0
		inc	ebx
		cmp	ebx, esi
		jnb	short loc_4010C0

loc_4010A5:				; CODE XREF: sub_401050+34j
		test	edi, edi
		jz	short loc_401086
		mov	[esp+18h+var_18], edi
		jmp	short loc_40108D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4010AE:				; CODE XREF: sub_401050+1Dj
		lea	eax, ds:0[edx*4]
		mov	[esp+18h+var_18], eax
		call	malloc
		jmp	short loc_40106F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4010C0:				; CODE XREF: sub_401050+2Cj
					; sub_401050+53j
		mov	ebx, [ebp+var_10]
		mov	dword ptr [ebx+8], 0
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4010D2:				; CODE XREF: sub_401050+13j
		mov	[esp+18h+var_18], 1
		call	malloc
		jmp	short loc_40106F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4010E0:				; CODE XREF: sub_401050+26j
					; sub_401050+4Ej
		call	abort
		lea	esi, [esi+0]
		lea	edi, [edi+0]
sub_401050	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4010F0	proc near		; CODE XREF: sub_4010F0+B1j
					; sub_401200+45Ep

var_24		= qword	ptr -24h
var_1C		= dword	ptr -1Ch
var_15		= byte ptr -15h
var_14		= dword	ptr -14h
var_10		= word ptr -10h
var_E		= word ptr -0Eh
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		mov	[ebp+var_C], ebx
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_8], esi
		mov	[ebp+var_4], edi
		mov	ebx, [ecx+8]
		mov	[ebp+var_1C], edx
		mov	edi, [ecx+4]
		mov	[ebp+var_15], al
		cmp	ebx, edi
		jnb	short loc_401137
		movzx	eax, al
		mov	esi, [edx+eax*4+10h]
		test	esi, esi
		jnz	short loc_401144
		mov	esi, [ecx+0Ch]
		cmp	[ecx+1Ch], esi
		jnb	short loc_40116A

loc_401125:				; CODE XREF: sub_4010F0+78j
		mov	eax, [ecx]
		mov	edx, [ecx+14h]
		mov	edi, [eax+ebx*4]
		movzx	ebx, [ebp+var_15]
		mov	[edx+edi], bl
		inc	dword ptr [ecx+14h]

loc_401137:				; CODE XREF: sub_4010F0+20j
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401144:				; CODE XREF: sub_4010F0+2Bj
		mov	edx, [ecx+18h]
		test	edx, edx
		jz	short loc_4011A6
		mov	dword ptr [ecx+18h], 0
		mov	eax, [esi+8]
		test	eax, eax
		jle	short loc_40115C
		add	[ecx+1Ch], eax

loc_40115C:				; CODE XREF: sub_4010F0+67j
					; sub_4010F0+EDj
		mov	eax, [esi+10h]
		mov	esi, [ecx+0Ch]
		add	[ecx+1Ch], eax
		cmp	[ecx+1Ch], esi
		jb	short loc_401125

loc_40116A:				; CODE XREF: sub_4010F0+33j
		cmp	ebx, edi
		jb	short loc_4011E2

loc_40116E:				; CODE XREF: sub_4010F0+101j
		mov	dword ptr [ecx+14h], 0
		mov	ebx, 0
		movsx	eax, [ebp+var_15]
		mov	edx, [ebp+var_1C]
		mov	dword ptr [ecx+18h], 1
		mov	dword ptr [ecx+1Ch], 0
		mov	[ecx+20h], ebx
		mov	ebx, [ebp+var_C]
		mov	[ebp+arg_0], ecx
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		jmp	sub_4010F0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4011A6:				; CODE XREF: sub_4010F0+59j
		fld	dword ptr [ecx+10h]
		fadd	dword ptr [ecx+20h]
		fnstcw	[ebp+var_E]
		movzx	eax, [ebp+var_E]
		or	ax, 0C00h
		mov	[ebp+var_10], ax
		fldcw	[ebp+var_10]
		fist	[ebp+var_14]
		fldcw	[ebp+var_E]
		mov	eax, [ebp+var_14]
		test	eax, eax
		jz	short loc_4011DA
		add	[ecx+1Ch], eax
		xor	edx, edx
		push	edx
		push	eax
		fild	[esp+24h+var_24]
		add	esp, 8
		fsubp	st(1), st

loc_4011DA:				; CODE XREF: sub_4010F0+D9j
		fstp	dword ptr [ecx+20h]
		jmp	loc_40115C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4011E2:				; CODE XREF: sub_4010F0+7Cj
		mov	edx, [ecx]
		mov	edi, [ecx+14h]
		mov	esi, [edx+ebx*4]
		mov	byte ptr [edi+esi], 0
		inc	dword ptr [ecx+8]
		jmp	loc_40116E
sub_4010F0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401200	proc near		; DATA XREF: start+33o

var_14EC	= dword	ptr -14ECh
var_14E4	= dword	ptr -14E4h
var_14E0	= dword	ptr -14E0h
var_14DC	= dword	ptr -14DCh
var_14D6	= byte ptr -14D6h
var_14D5	= byte ptr -14D5h
var_14D4	= dword	ptr -14D4h
var_14D0	= dword	ptr -14D0h
var_14CC	= dword	ptr -14CCh
var_14C8	= dword	ptr -14C8h
var_14C4	= dword	ptr -14C4h
var_14C0	= dword	ptr -14C0h
var_14BC	= dword	ptr -14BCh
var_14B8	= dword	ptr -14B8h
var_14B4	= dword	ptr -14B4h
var_14B0	= dword	ptr -14B0h
var_14AC	= dword	ptr -14ACh
var_14A8	= dword	ptr -14A8h
var_14A4	= dword	ptr -14A4h
var_14A0	= dword	ptr -14A0h
var_149C	= dword	ptr -149Ch
var_1495	= byte ptr -1495h
var_1494	= dword	ptr -1494h
var_1490	= dword	ptr -1490h
var_148C	= dword	ptr -148Ch
var_1488	= dword	ptr -1488h
var_1484	= dword	ptr -1484h
var_1480	= dword	ptr -1480h
var_147C	= dword	ptr -147Ch
var_1478	= dword	ptr -1478h
var_1474	= dword	ptr -1474h
var_1470	= dword	ptr -1470h
var_146C	= dword	ptr -146Ch
var_1468	= dword	ptr -1468h
var_1464	= dword	ptr -1464h
var_1460	= word ptr -1460h
var_145E	= word ptr -145Eh
var_145C	= dword	ptr -145Ch
var_1458	= dword	ptr -1458h
var_1454	= dword	ptr -1454h
var_1450	= dword	ptr -1450h
var_144C	= dword	ptr -144Ch
var_1448	= dword	ptr -1448h
var_1444	= dword	ptr -1444h
var_1440	= dword	ptr -1440h
var_1438	= dword	ptr -1438h
var_1434	= dword	ptr -1434h
var_1430	= dword	ptr -1430h
var_142C	= dword	ptr -142Ch
var_1428	= dword	ptr -1428h
var_1424	= dword	ptr -1424h
var_1420	= dword	ptr -1420h
var_141C	= dword	ptr -141Ch
var_1418	= dword	ptr -1418h
var_1408	= dword	ptr -1408h
var_1404	= dword	ptr -1404h
var_1400	= dword	ptr -1400h
var_13F8	= dword	ptr -13F8h
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= qword	ptr -14h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	eax, 150Ch
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		call	sub_402210
		and	esp, 0FFFFFFF0h
		xor	ebx, ebx
		mov	eax, 10h
		call	sub_402210
		call	__main
		mov	esi, [ebp+arg_4]
		lea	ecx, [ebp+arg_0]
		and	ebx, 0FFFFFF00h
		mov	[esp+0Ch+var_C], ecx
		lea	edi, [ebp+var_34]
		mov	bh, 0
		mov	[esp+0Ch+var_8], esi
		lea	esi, [ebp+var_2C]
		call	pbm_init
		mov	[esp+0Ch+var_C], 960h
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_144C],	eax
		call	malloc
		mov	[eax+0Ch], edi
		lea	edx, [ebp+var_30]
		lea	ecx, [ebp+var_28]
		mov	[eax+24h], edx
		lea	edi, [ebp+var_24]
		xor	edx, edx
		mov	[eax+40h], esi
		mov	esi, 3
		mov	[eax+54h], ecx
		lea	ecx, [ebp+var_20]
		mov	[eax+6Ch], edi
		xor	edi, edi
		mov	[eax+88h], edx
		lea	edx, [ebp+var_1C]
		mov	dword ptr [eax+10h], 0
		mov	byte ptr [eax],	0
		mov	dword ptr [eax+4], offset aFont	; "font"
		mov	dword ptr [eax+8], 2
		mov	dword ptr [eax+14h], 0
		mov	dword ptr [eax+28h], 0
		mov	byte ptr [eax+18h], 0
		mov	dword ptr [eax+1Ch], offset aBuiltin ; "builtin"
		mov	dword ptr [eax+20h], 2
		mov	dword ptr [eax+2Ch], 0
		mov	byte ptr [eax+30h], 0
		mov	dword ptr [eax+34h], offset aDump ; "dump"
		mov	dword ptr [eax+38h], 1
		mov	dword ptr [eax+3Ch], 0
		mov	dword ptr [eax+44h], 0
		mov	dword ptr [eax+58h], 0
		mov	byte ptr [eax+48h], 0
		mov	dword ptr [eax+4Ch], offset aSpace ; "space"
		mov	dword ptr [eax+50h], 7
		mov	dword ptr [eax+5Ch], 0
		mov	dword ptr [eax+70h], 0
		mov	byte ptr [eax+60h], 0
		mov	dword ptr [eax+64h], offset aWidth ; "width"
		mov	dword ptr [eax+68h], 4
		mov	dword ptr [eax+74h], 0
		mov	byte ptr [eax+78h], 0
		mov	dword ptr [eax+7Ch], offset aLspace ; "lspace"
		mov	[eax+80h], esi
		mov	esi, offset aNomargins ; "nomargins"
		mov	[eax+84h], ecx
		mov	ecx, 1
		mov	byte ptr [eax+90h], 0
		mov	[eax+98h], ecx
		mov	ecx, 0
		mov	[ebp+var_28], ecx
		mov	ecx, [ebp+arg_4]
		mov	[eax+8Ch], edi
		xor	edi, edi
		mov	[eax+94h], esi
		xor	esi, esi
		mov	[eax+0A0h], edx
		xor	edx, edx
		mov	[eax+0A4h], edx
		mov	edx, 8
		mov	[eax+9Ch], edi
		xor	edi, edi
		mov	[eax+0B0h], esi
		mov	[esp+0Ch], eax
		lea	eax, [ebp+var_144C]
		mov	[ebp+var_34], 0
		mov	[ebp+var_30], 0
		mov	[ebp+var_24], 0
		mov	[ebp+var_20], 0
		mov	[esp+0Ch+arg_0], edi
		mov	[esp+10h], edx
		mov	[esp+0Ch+var_4], ebx
		mov	[esp+0Ch+var_8], ecx
		mov	[esp+0Ch+var_C], eax
		call	optParseOptions3
		cmp	[ebp+var_144C],	1
		jnz	loc_401725
		mov	[ebp+var_38], 0

loc_4013E1:				; CODE XREF: sub_401200+58Fj
		mov	eax, [ebp+var_34]
		test	eax, eax
		jnz	loc_401D91
		mov	eax, [ebp+var_30]
		test	eax, eax
		jz	loc_401794
		mov	[esp+0Ch+var_C], eax

loc_4013FA:				; CODE XREF: sub_401200+59Bj
		call	pbm_defaultfont

loc_4013FF:				; CODE XREF: sub_401200+B99j
		mov	[ebp+var_1474],	eax
		mov	ebx, [ebp+var_2C]
		test	ebx, ebx
		jnz	loc_4021EC
		mov	ebx, [ebp+var_38]
		test	ebx, ebx
		jz	loc_402002
		mov	[esp+0Ch+var_C], ebx
		lea	edi, [ebp+var_68]
		call	strlen
		mov	[esp+0Ch+var_C], eax
		mov	edx, 1
		mov	eax, edi
		call	sub_401050
		mov	[esp+0Ch+var_8], ebx
		mov	ecx, [ebp+var_68]
		mov	esi, [ecx]
		mov	[esp+0Ch+var_C], esi
		call	strcpy
		mov	eax, [ebp+var_68]
		mov	esi, [eax]
		movzx	edx, byte ptr [esi]
		test	dl, dl
		mov	[ebp+var_14D5],	dl
		jz	short loc_401475
		mov	[esp+0Ch+var_C], esi
		call	strlen
		cmp	byte ptr [eax+esi-1], 0Ah
		jnz	short loc_401475
		mov	byte ptr [eax+esi-1], 0
		movzx	ebx, byte ptr [esi]
		mov	[ebp+var_14D5],	bl

loc_401475:				; CODE XREF: sub_401200+256j
					; sub_401200+265j
		xor	ebx, ebx
		cmp	[ebp+var_14D5],	0
		jz	short loc_4014F2
		movzx	eax, byte ptr [esi]
		jmp	short loc_4014A3
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401485:				; CODE XREF: sub_401200+2A5j
		mov	ecx, [ebp+var_1474]
		movzx	edi, al
		mov	edx, [ecx+edi*4+10h]
		test	edx, edx
		jnz	short loc_40149A
		mov	byte ptr [esi+ebx], 20h

loc_40149A:				; CODE XREF: sub_401200+294j
		inc	ebx
		movzx	eax, byte ptr [esi+ebx]
		test	al, al
		jz	short loc_4014F2

loc_4014A3:				; CODE XREF: sub_401200+283j
					; sub_401200+2F0j
		cmp	al, 9
		jnz	short loc_401485
		mov	eax, ebx
		add	eax, 8
		js	loc_401D9E

loc_4014B2:				; CODE XREF: sub_401200+BA1j
		mov	[esp+0Ch+var_C], esi
		mov	edi, eax
		and	edi, 0FFFFFFF8h
		call	strlen
		cmp	eax, ebx
		mov	ecx, eax
		jle	short loc_4014E4
		mov	eax, edi
		sub	eax, ebx
		add	eax, esi
		lea	edx, [ecx+eax-1]

loc_4014CF:				; CODE XREF: sub_401200+2D9j
		movzx	eax, byte ptr [esi+ecx]
		dec	ecx
		mov	[edx], al
		dec	edx
		cmp	ecx, ebx
		jg	short loc_4014CF
		cmp	ebx, edi
		jge	short loc_4014E8

loc_4014DF:				; CODE XREF: sub_401200+2E6j
		mov	byte ptr [esi+ebx], 20h
		inc	ebx

loc_4014E4:				; CODE XREF: sub_401200+2C3j
		cmp	ebx, edi
		jl	short loc_4014DF

loc_4014E8:				; CODE XREF: sub_401200+2DDj
		dec	ebx
		inc	ebx
		movzx	eax, byte ptr [esi+ebx]
		test	al, al
		jnz	short loc_4014A3

loc_4014F2:				; CODE XREF: sub_401200+27Ej
					; sub_401200+2A1j
		mov	[ebp+var_60], 1

loc_4014F9:				; CODE XREF: sub_401200+F16j
		mov	ecx, [ebp+var_1C]
		xor	edx, edx
		xor	esi, esi
		mov	[ebp+var_1478],	edx
		mov	edi, [ebp+var_68]
		mov	ebx, [ebp+var_64]
		mov	[ebp+var_147C],	esi
		mov	eax, [ebp+var_60]
		test	ecx, ecx
		mov	[ebp+var_48], edi
		mov	[ebp+var_44], ebx
		mov	[ebp+var_40], eax
		jnz	short loc_401548
		dec	eax
		jz	loc_401DA6
		mov	edi, [ebp+var_1474]
		mov	ecx, [ebp+var_1474]
		mov	ebx, [edi]
		mov	eax, [ecx+4]
		add	ebx, ebx
		mov	[ebp+var_1478],	eax
		mov	[ebp+var_147C],	ebx

loc_401548:				; CODE XREF: sub_401200+320j
					; sub_401200+BC6j
		mov	esi, [ebp+var_24]
		test	esi, esi
		mov	[ebp+var_148C],	esi
		jz	loc_4018CA
		mov	edx, [ebp+var_40]
		cmp	edx, 1
		jnz	loc_401DCB
		fld	[ebp+var_28]
		mov	ebx, 1
		xor	edx, edx
		mov	[ebp+var_1400],	ebx
		mov	eax, [ebp+var_48]
		lea	esi, [ebp+var_1438]
		mov	[ebp+var_1494],	edx
		mov	edi, [ebp+var_44]
		mov	[ebp+var_1408],	eax
		mov	[ebp+var_1404],	edi
		fstp	[ebp+var_1490]

loc_401599:				; CODE XREF: sub_401200+648j
		mov	ecx, [ebp+var_148C]
		mov	edx, 32h
		mov	eax, esi
		xor	ebx, ebx
		xor	edi, edi
		mov	[esp+0Ch+var_C], ecx
		call	sub_401050
		fld	[ebp+var_1490]
		mov	ecx, 0
		mov	[ebp+var_1424],	ebx
		mov	edx, [ebp+var_148C]
		mov	[ebp+var_1418],	ecx
		mov	ecx, [ebp+var_1408]
		mov	eax, 1
		mov	[ebp+var_141C],	edi
		xor	edi, edi
		mov	[ebp+var_142C],	edx
		mov	edx, [ebp+var_1494]
		fstp	[ebp+var_1428]
		mov	[ebp+var_1420],	eax
		mov	ebx, [ecx+edx*4]
		cmp	byte ptr [ebx],	0
		jz	loc_4017FD
		mov	eax, [ebp+var_1434]
		mov	ebx, [ebp+var_1430]
		mov	[ebp+var_14EC],	eax
		jmp	short loc_40168F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40161A:				; CODE XREF: sub_401200+4EAj
		mov	edx, [esi+8]
		cmp	edx, [esi+4]
		jnb	short loc_401631
		mov	eax, [esi]
		mov	ecx, [esi+14h]
		mov	ebx, [eax+edx*4]
		mov	byte ptr [ecx+ebx], 0
		inc	dword ptr [esi+8]

loc_401631:				; CODE XREF: sub_401200+420j
		movsx	eax, [ebp+var_1495]
		mov	ebx, 0
		mov	dword ptr [esi+14h], 0
		mov	edx, [ebp+var_1474]
		mov	[esi+20h], ebx
		mov	dword ptr [esi+18h], 1
		mov	dword ptr [esi+1Ch], 0
		mov	[esp+0Ch+var_C], esi
		call	sub_4010F0
		mov	edx, [ebp+var_1434]
		mov	ecx, [ebp+var_1408]
		mov	ebx, [ebp+var_1430]
		mov	[ebp+var_14EC],	edx

loc_40167B:				; CODE XREF: sub_401200+4A8j
					; sub_401200+520j
		mov	edx, [ebp+var_1494]
		inc	edi
		mov	eax, [ecx+edx*4]
		cmp	byte ptr [eax+edi], 0
		jz	loc_40180F

loc_40168F:				; CODE XREF: sub_401200+418j
		cmp	ebx, [ebp+var_14EC]
		mov	edx, [ebp+var_1494]
		mov	eax, [ecx+edx*4]
		movzx	eax, byte ptr [eax+edi]
		mov	[ebp+var_1495],	al
		jnb	short loc_40167B
		mov	ebx, [ebp+var_1474]
		movzx	eax, al
		mov	ecx, [ebx+eax*4+10h]
		test	ecx, ecx
		jz	short loc_4016E4
		mov	edx, [ebp+var_1420]
		test	edx, edx
		jz	loc_4017A0
		xor	ebx, ebx
		mov	[ebp+var_1420],	ebx
		mov	eax, [ecx+8]
		test	eax, eax
		jle	short loc_4016DE
		add	[ebp+var_141C],	eax

loc_4016DE:				; CODE XREF: sub_401200+4D6j
					; sub_401200+5F8j
		mov	ebx, [ecx+10h]
		add	[esi+1Ch], ebx

loc_4016E4:				; CODE XREF: sub_401200+4B9j
		mov	ecx, [esi+0Ch]
		cmp	[esi+1Ch], ecx
		jnb	loc_40161A
		movzx	ecx, [ebp+var_1495]
		mov	eax, [esi]
		mov	edx, [esi+8]
		mov	ebx, [esi+14h]
		mov	edx, [eax+edx*4]
		mov	[ebx+edx], cl
		mov	eax, [ebp+var_1434]
		mov	ecx, [ebp+var_1408]
		inc	dword ptr [esi+14h]
		mov	ebx, [ebp+var_1430]
		mov	[ebp+var_14EC],	eax
		jmp	loc_40167B
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401725:				; CODE XREF: sub_401200+1D4j
		mov	[esp+0Ch+var_C], 1
		call	malloc
		mov	edi, 1
		mov	ebx, eax
		mov	esi, 1
		mov	byte ptr [eax],	0
		jmp	short loc_401784
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401742:				; CODE XREF: sub_401200+58Aj
		cmp	esi, 1
		jg	loc_40186E
		mov	edx, [ebp+arg_4]
		mov	ecx, [edx+esi*4]
		mov	[esp+0Ch+var_C], ecx
		call	strlen
		mov	[esp+0Ch+var_C], ebx
		add	edi, eax
		mov	[esp+0Ch+var_8], edi
		call	realloc
		test	eax, eax
		mov	ebx, eax
		jz	loc_4018B9

loc_401771:				; CODE XREF: sub_401200+6B3j
					; sub_401200+6C5j
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx+esi*4]
		inc	esi
		mov	[esp+0Ch+var_C], ebx
		mov	[esp+0Ch+var_8], eax
		call	strcat

loc_401784:				; CODE XREF: sub_401200+540j
		cmp	esi, [ebp+var_144C]
		jl	short loc_401742
		mov	[ebp+var_38], ebx
		jmp	loc_4013E1
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401794:				; CODE XREF: sub_401200+1F1j
		mov	[esp+0Ch+var_C], offset	aBdf ; "bdf"
		jmp	loc_4013FA
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4017A0:				; CODE XREF: sub_401200+4C3j
		fnstcw	[ebp+var_145E]
		movzx	eax, [ebp+var_145E]
		fld	[ebp+var_1428]
		fadd	[ebp+var_1418]
		or	ax, 0C00h
		mov	[ebp+var_1460],	ax
		fldcw	[ebp+var_1460]
		fist	[ebp+var_1464]
		fldcw	[ebp+var_145E]
		mov	eax, [ebp+var_1464]
		test	eax, eax
		jz	short loc_4017F2
		add	[ebp+var_141C],	eax
		xor	edx, edx
		push	edx
		push	eax
		fild	[esp+14h+var_14]
		add	esp, 8
		fsubp	st(1), st

loc_4017F2:				; CODE XREF: sub_401200+5DEj
		fstp	[ebp+var_1418]
		jmp	loc_4016DE
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4017FD:				; CODE XREF: sub_401200+400j
		mov	edi, [ebp+var_1434]
		mov	ebx, [ebp+var_1430]
		mov	[ebp+var_14EC],	edi

loc_40180F:				; CODE XREF: sub_401200+489j
		cmp	ebx, [ebp+var_14EC]
		jnb	short loc_401836
		mov	eax, [ebp+var_1438]
		mov	ecx, [eax+ebx*4]
		mov	ebx, [ebp+var_1424]
		mov	byte ptr [ebx+ecx], 0
		inc	[ebp+var_1424]
		inc	[ebp+var_1430]

loc_401836:				; CODE XREF: sub_401200+615j
		inc	[ebp+var_1494]
		mov	edx, [ebp+var_1494]
		cmp	[ebp+var_1400],	edx
		ja	loc_401599
		mov	ecx, [ebp+var_1438]
		mov	edi, [ebp+var_1434]
		mov	esi, [ebp+var_1430]
		mov	[ebp+var_58], ecx
		mov	[ebp+var_54], edi
		mov	[ebp+var_50], esi
		jmp	loc_401F5D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40186E:				; CODE XREF: sub_401200+545j
		mov	[esp+0Ch+var_C], ebx
		inc	edi
		mov	[esp+0Ch+var_8], edi
		call	realloc
		test	eax, eax
		mov	ebx, eax
		jz	loc_4021DB

loc_401885:				; CODE XREF: sub_401200+FE7j
		mov	[esp+0Ch+var_C], ebx
		call	strlen
		mov	word ptr [ebx+eax], 20h
		mov	edx, [ebp+arg_4]
		mov	ecx, [edx+esi*4]
		mov	[esp+0Ch+var_C], ecx
		call	strlen
		mov	[esp+0Ch+var_C], ebx
		add	edi, eax
		mov	[esp+0Ch+var_8], edi
		call	realloc
		test	eax, eax
		mov	ebx, eax
		jnz	loc_401771

loc_4018B9:				; CODE XREF: sub_401200+56Bj
		mov	[esp+0Ch+var_C], offset	aOutOfMemoryAll	; "out of memory allocating space for inpu"...
		call	pm_error
		jmp	loc_401771
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4018CA:				; CODE XREF: sub_401200+353j
		mov	ecx, [ebp+var_48]
		mov	eax, [ebp+var_40]
		mov	[ebp+var_14D4],	ecx
		mov	[ebp+var_58], ecx
		mov	ecx, [ebp+var_44]
		mov	[ebp+var_50], eax
		mov	[ebp+var_54], ecx

loc_4018E2:				; CODE XREF: sub_401200+DB3j
		fld	[ebp+var_28]
		mov	edx, [ebp+var_1474]
		mov	ebx, [ebp+var_50]
		mov	eax, [ebp+var_1478]
		mov	esi, [edx+4]
		mov	edi, ebx
		mov	[ebp+var_14A8],	ebx
		imul	edi, esi
		mov	esi, [ebp+var_14A8]
		mov	[ebp+var_1404],	ecx
		mov	ebx, [ebp+var_20]
		dec	esi
		imul	esi, ebx
		xor	ebx, ebx
		lea	edx, [edi+eax*2]
		mov	[ebp+var_1454],	ebx
		xor	edi, edi
		mov	eax, [ebp+var_14D4]
		mov	[ebp+var_1450],	edi
		add	edx, esi
		xor	esi, esi
		mov	[ebp+var_146C],	edx
		mov	edx, [ebp+var_14A8]
		mov	[ebp+var_14AC],	esi
		cmp	[ebp+var_14AC],	edx
		mov	[ebp+var_1408],	eax
		mov	[ebp+var_1400],	edx
		jnb	loc_401AB3
		xor	edi, edi
		xor	ecx, ecx
		fldz
		mov	[ebp+var_14DC],	edi
		lea	esi, [ebp+var_1458]
		mov	[ebp+var_14E0],	ecx

loc_401974:				; CODE XREF: sub_401200+8ABj
		mov	ebx, [ebp+var_14D4]
		xor	eax, eax
		mov	edx, 1
		mov	[ebp+var_14B0],	edx
		mov	ecx, [ebp+var_14AC]
		fld	st
		mov	[ebp+var_1458],	eax
		mov	edi, [ebx+ecx*4]
		xor	ebx, ebx
		movzx	eax, byte ptr [edi]
		test	al, al
		jnz	short loc_401A06
		jmp	loc_401A53
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019A6:				; CODE XREF: sub_401200+81Fj
		fnstcw	[ebp+var_145E]
		fadd	st, st(2)
		movzx	edx, [ebp+var_145E]
		or	dx, 0C00h
		mov	[ebp+var_1460],	dx
		fldcw	[ebp+var_1460]
		fist	[ebp+var_1464]
		fldcw	[ebp+var_145E]
		mov	edx, [ebp+var_1464]
		test	edx, edx
		jle	short loc_401A43
		mov	eax, [esi]
		add	eax, edx
		mov	[esi], eax
		push	edx
		fild	dword ptr [esp+10h+var_14+4]
		add	esp, 4
		fsubp	st(1), st

loc_4019EC:				; CODE XREF: sub_401200+845j
		mov	[ebp+var_14B4],	ecx

loc_4019F2:				; CODE XREF: sub_401200+841j
					; sub_401200+851j
		mov	edx, [ecx+10h]
		add	eax, edx
		mov	[esi], eax

loc_4019F9:				; CODE XREF: sub_401200+815j
		inc	ebx
		movzx	eax, byte ptr [edi+ebx]
		test	al, al
		jz	loc_401FD3

loc_401A06:				; CODE XREF: sub_401200+79Fj
		mov	edx, [ebp+var_1474]
		movzx	eax, al
		mov	ecx, [edx+eax*4+10h]
		test	ecx, ecx
		jz	short loc_4019F9
		mov	edx, [ebp+var_14B0]
		test	edx, edx
		jz	short loc_4019A6
		xor	eax, eax
		mov	[ebp+var_14B0],	eax
		mov	eax, [ecx+8]
		test	eax, eax
		js	short loc_401A47
		xor	eax, eax
		mov	[ebp+var_145C],	eax
		mov	eax, [ecx+8]
		mov	edx, [esi]
		add	eax, edx
		mov	[esi], eax
		jmp	short loc_4019F2
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A43:				; CODE XREF: sub_401200+7DBj
		mov	eax, [esi]
		jmp	short loc_4019EC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A47:				; CODE XREF: sub_401200+82Ej
		neg	eax
		mov	[ebp+var_145C],	eax
		mov	eax, [esi]
		jmp	short loc_4019F2
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A53:				; CODE XREF: sub_401200+7A1j
		fstp	st

loc_401A55:				; CODE XREF: sub_401200+DDDj
		xor	ebx, ebx
		mov	[ebp+var_145C],	ebx

loc_401A5D:				; CODE XREF: sub_401200+DFDj
		mov	edx, [ebp+var_1458]
		mov	eax, [ebp+var_14DC]
		cmp	eax, edx
		jge	short loc_401A6F
		mov	eax, edx

loc_401A6F:				; CODE XREF: sub_401200+86Bj
		mov	[ebp+var_14DC],	eax
		mov	edx, [ebp+var_145C]
		mov	[ebp+var_1450],	eax
		mov	eax, [ebp+var_14E0]
		cmp	eax, edx
		jge	short loc_401A8D
		mov	eax, edx

loc_401A8D:				; CODE XREF: sub_401200+889j
		inc	[ebp+var_14AC]
		mov	edx, [ebp+var_14A8]
		mov	[ebp+var_14E0],	eax
		cmp	[ebp+var_14AC],	edx
		mov	[ebp+var_1454],	eax
		jb	loc_401974
		fstp	st

loc_401AB3:				; CODE XREF: sub_401200+756j
		fstp	st
		mov	ecx, [ebp+var_1450]
		mov	edi, 1
		mov	ebx, [ebp+var_147C]
		mov	[esp+0Ch+var_4], edi
		mov	esi, [ebp+var_146C]
		lea	eax, [ecx+ebx*2]
		mov	[ebp+var_1470],	eax
		mov	[esp+0Ch+var_8], esi
		mov	[esp+0Ch+var_C], eax
		call	pm_allocarray
		mov	[ebp+var_1468],	eax
		xor	ecx, ecx
		cmp	[ebp+var_146C],	0
		jle	short loc_401B20

loc_401AF6:				; CODE XREF: sub_401200+91Ej
		xor	edx, edx
		cmp	[ebp+var_1470],	0
		jmp	short loc_401B15
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B01:				; CODE XREF: sub_401200+915j
		mov	esi, [ebp+var_1468]
		mov	eax, [esi+ecx*4]
		mov	byte ptr [eax+edx], 0
		inc	edx
		cmp	[ebp+var_1470],	edx

loc_401B15:				; CODE XREF: sub_401200+8FFj
		jg	short loc_401B01
		inc	ecx
		cmp	[ebp+var_146C],	ecx
		jg	short loc_401AF6

loc_401B20:				; CODE XREF: sub_401200+8F4j
		fld	[ebp+var_28]
		xor	edi, edi
		mov	eax, [ebp+var_54]
		mov	[ebp+var_14C0],	edi
		mov	esi, [ebp+var_147C]
		mov	ebx, [ebp+var_1454]
		mov	[ebp+var_1404],	eax
		mov	eax, [ebp+var_50]
		mov	edx, [ebp+var_58]
		add	esi, ebx
		cmp	[ebp+var_14C0],	eax
		mov	ecx, [ebp+var_20]
		mov	[ebp+var_1408],	edx
		mov	[ebp+var_1400],	eax
		mov	[ebp+var_14B8],	esi
		mov	[ebp+var_14BC],	ecx
		jnb	loc_401CF7
		fldz

loc_401B71:				; CODE XREF: sub_401200+AEFj
		mov	ebx, [ebp+var_1474]
		fld	st
		mov	eax, [ebp+var_14BC]
		mov	ecx, [ebp+var_14C0]
		mov	esi, [ebx+4]
		mov	edi, [ebp+var_1478]
		mov	ebx, [ebp+var_14B8]
		add	eax, esi
		imul	eax, ecx
		mov	[ebp+var_14C8],	ebx
		mov	ecx, [ebp+var_14C0]
		xor	esi, esi
		mov	[ebp+var_14CC],	esi
		add	eax, edi
		mov	edi, [edx+ecx*4]
		mov	[ebp+var_14C4],	eax
		cmp	byte ptr [edi],	0
		jz	loc_401CDB

loc_401BC1:				; CODE XREF: sub_401200+AD5j
		mov	esi, [ebp+var_14C0]
		mov	ecx, [ebp+var_14CC]
		mov	edi, [edx+esi*4]
		movzx	eax, byte ptr [edi+ecx]
		mov	ecx, [ebp+var_1474]
		mov	ebx, [ecx+eax*4+10h]
		test	ebx, ebx
		jz	loc_401CBC
		mov	esi, [ecx+4]
		mov	eax, [ebp+var_14C4]
		mov	ecx, [ecx+0Ch]
		mov	edi, [ebx+0Ch]
		add	eax, esi
		add	eax, ecx
		mov	[ebp+var_14D0],	eax
		mov	eax, [ebx+4]
		xor	esi, esi
		sub	[ebp+var_14D0],	eax
		sub	[ebp+var_14D0],	edi
		cmp	eax, 0
		jle	short loc_401C6D
		mov	edx, [ebx]
		mov	esi, esi
		lea	edi, [edi+0]

loc_401C20:				; CODE XREF: sub_401200+A65j
		xor	ecx, ecx
		cmp	edx, 0
		jle	short loc_401C62
		mov	edi, [ebp+var_14D0]
		add	edi, esi
		nop

loc_401C30:				; CODE XREF: sub_401200+A5Dj
		mov	eax, edx
		imul	eax, esi
		add	eax, [ebx+14h]
		cmp	byte ptr [eax+ecx], 0
		jz	short loc_401C5A
		mov	edx, [ebp+var_1468]
		mov	eax, [edx+edi*4]
		mov	edx, [ebx+8]
		add	eax, edx
		mov	edx, [ebp+var_14C8]
		add	eax, edx
		mov	byte ptr [eax+ecx], 1
		mov	edx, [ebx]

loc_401C5A:				; CODE XREF: sub_401200+A3Cj
		inc	ecx
		cmp	edx, ecx
		jg	short loc_401C30
		mov	eax, [ebx+4]

loc_401C62:				; CODE XREF: sub_401200+A25j
		inc	esi
		cmp	eax, esi
		jg	short loc_401C20
		mov	edx, [ebp+var_1408]

loc_401C6D:				; CODE XREF: sub_401200+A13j
		mov	edi, [ebx+10h]
		fnstcw	[ebp+var_145E]
		fadd	st, st(2)
		movzx	ebx, [ebp+var_145E]
		add	[ebp+var_14C8],	edi
		or	bx, 0C00h
		mov	[ebp+var_1460],	bx
		fldcw	[ebp+var_1460]
		fist	[ebp+var_1464]
		fldcw	[ebp+var_145E]
		mov	eax, [ebp+var_1464]
		test	eax, eax
		jle	short loc_401CBC
		push	eax
		fild	dword ptr [esp+10h+var_14+4]
		add	esp, 4
		add	[ebp+var_14C8],	eax
		fsubp	st(1), st

loc_401CBC:				; CODE XREF: sub_401200+9E0j
					; sub_401200+AABj
		inc	[ebp+var_14CC]
		mov	eax, [ebp+var_14C0]
		mov	ecx, [ebp+var_14CC]
		mov	esi, [edx+eax*4]
		cmp	byte ptr [esi+ecx], 0
		jnz	loc_401BC1

loc_401CDB:				; CODE XREF: sub_401200+9BBj
		fstp	st
		inc	[ebp+var_14C0]
		mov	ebx, [ebp+var_14C0]
		cmp	ebx, [ebp+var_1400]
		jb	loc_401B71
		fstp	st

loc_401CF7:				; CODE XREF: sub_401200+969j
		fstp	st
		call	__getreent
		mov	edi, [ebp+var_146C]
		xor	ecx, ecx
		mov	edx, [ebp+var_1470]
		mov	[esp+10h], ecx
		mov	ebx, [ebp+var_1468]
		mov	[esp+0Ch], edi
		mov	[esp+0Ch+var_4], edx
		mov	[esp+0Ch+var_8], ebx
		mov	esi, [eax+8]
		xor	ebx, ebx
		mov	[esp+0Ch+var_C], esi
		call	pbm_writepbm
		mov	edx, [ebp+var_54]
		mov	ecx, [ebp+var_58]
		mov	edi, [ebp+var_50]
		mov	[ebp+var_1404],	edx
		cmp	edx, 0
		mov	[ebp+var_1408],	ecx
		mov	[ebp+var_1400],	edi
		jbe	short loc_401D69

loc_401D4F:				; CODE XREF: sub_401200+B67j
		mov	esi, [ebp+var_1408]
		mov	eax, [esi+ebx*4]
		inc	ebx
		mov	[esp+0Ch+var_C], eax
		call	free
		cmp	[ebp+var_1404],	ebx
		ja	short loc_401D4F

loc_401D69:				; CODE XREF: sub_401200+B4Dj
		mov	edx, [ebp+var_1408]
		mov	[esp+0Ch+var_C], edx
		call	free
		call	__getreent
		mov	ebx, [eax+8]
		mov	[esp+0Ch+var_C], ebx
		call	pm_close
		lea	esp, [ebp+var_C]
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D91:				; CODE XREF: sub_401200+1E6j
		mov	[esp+0Ch+var_C], eax
		call	pbm_loadfont
		jmp	loc_4013FF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D9E:				; CODE XREF: sub_401200+2ACj
		lea	eax, [ebx+0Fh]
		jmp	loc_4014B2
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401DA6:				; CODE XREF: sub_401200+323j
		mov	ecx, [ebp+var_1474]
		mov	esi, [ecx+4]
		mov	eax, [ecx]
		mov	edx, esi
		shr	edx, 1Fh
		add	esi, edx
		mov	[ebp+var_147C],	eax
		sar	esi, 1
		mov	[ebp+var_1478],	esi
		jmp	loc_401548
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401DCB:				; CODE XREF: sub_401200+35Fj
		fld	[ebp+var_28]
		xor	ebx, ebx
		mov	[ebp+var_1400],	edx
		mov	eax, [ebp+var_44]
		mov	edi, [ebp+var_48]
		mov	esi, [ebp+var_148C]
		mov	[ebp+var_1404],	eax
		lea	eax, [ebp+var_1448]
		mov	[ebp+var_1408],	edi
		fstp	[ebp+var_149C]
		mov	[esp+0Ch+var_C], esi
		call	sub_401050
		mov	[ebp+var_14A0],	ebx
		mov	edx, [ebp+var_1400]
		cmp	[ebp+var_14A0],	edx
		jnb	loc_401F42
		fnstcw	[ebp+var_145E]
		movzx	edx, [ebp+var_145E]
		fld	[ebp+var_149C]
		or	dx, 0C00h
		mov	[ebp+var_1460],	dx
		fldcw	[ebp+var_1460]
		fistp	[ebp+var_14E4]
		fldcw	[ebp+var_145E]

loc_401E4B:				; CODE XREF: sub_401200+D3Cj
		mov	edx, [ebp+var_14A0]
		mov	esi, 1
		mov	ebx, [ebp+var_1448]
		mov	[ebp+var_14A4],	esi
		xor	esi, esi
		mov	ecx, [ebx+edx*4]
		xor	ebx, ebx
		mov	byte ptr [ecx],	0
		mov	edi, [ebp+var_1408]
		mov	ecx, [edi+edx*4]
		cmp	byte ptr [ecx],	0
		setnz	dl
		xor	eax, eax
		cmp	esi, [ebp+var_148C]
		setb	al
		jmp	loc_401F22
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E8B:				; CODE XREF: sub_401200+D24j
		movzx	edx, byte ptr [ecx+ebx]
		mov	ecx, [ebp+var_1474]
		movzx	eax, dl
		mov	eax, [ecx+eax*4+10h]
		test	eax, eax
		jz	short loc_401ED1
		mov	ecx, [ebp+var_14A4]
		test	ecx, ecx
		jz	loc_401FB8
		mov	eax, [eax+8]
		xor	ecx, ecx
		mov	[ebp+var_14A4],	ecx
		test	eax, eax
		jle	short loc_401EBF
		add	esi, eax

loc_401EBF:				; CODE XREF: sub_401200+CBBj
					; sub_401200+DC0j ...
		movzx	ecx, dl
		mov	edx, [ebp+var_1474]
		mov	eax, [edx+ecx*4+10h]
		mov	edx, [eax+10h]
		add	esi, edx

loc_401ED1:				; CODE XREF: sub_401200+C9Ej
		cmp	esi, [ebp+var_148C]
		jnb	short loc_401F06
		mov	ecx, [ebp+var_14A0]
		mov	eax, [ebp+var_1448]
		mov	edx, [eax+ecx*4]
		mov	eax, [edi+ecx*4]
		movzx	eax, byte ptr [eax+ebx]
		mov	[edx+ebx], al
		mov	eax, [ebp+var_1448]
		mov	edi, [eax+ecx*4]
		mov	byte ptr [edi+ebx+1], 0
		mov	edi, [ebp+var_1408]

loc_401F06:				; CODE XREF: sub_401200+CD7j
		mov	edx, [ebp+var_14A0]
		inc	ebx
		mov	ecx, [edi+edx*4]
		cmp	byte ptr [ecx+ebx], 0
		setnz	al
		xor	edx, edx
		cmp	esi, [ebp+var_148C]
		setb	dl

loc_401F22:				; CODE XREF: sub_401200+C86j
		test	edx, eax
		jnz	loc_401E8B
		inc	[ebp+var_14A0]
		mov	edx, [ebp+var_1400]
		cmp	[ebp+var_14A0],	edx
		jb	loc_401E4B

loc_401F42:				; CODE XREF: sub_401200+C14j
		mov	[ebp+var_1440],	edx
		mov	esi, [ebp+var_1448]
		mov	ebx, [ebp+var_1444]
		mov	[ebp+var_50], edx
		mov	[ebp+var_58], esi
		mov	[ebp+var_54], ebx

loc_401F5D:				; CODE XREF: sub_401200+669j
		mov	edi, [ebp+var_44]
		xor	ebx, ebx
		mov	eax, [ebp+var_48]
		mov	ecx, [ebp+var_40]
		cmp	edi, 0
		mov	[ebp+var_1408],	eax
		mov	[ebp+var_1404],	edi
		mov	[ebp+var_1400],	ecx
		jbe	short loc_401F99

loc_401F7F:				; CODE XREF: sub_401200+D97j
		mov	esi, [ebp+var_1408]
		mov	edx, [esi+ebx*4]
		inc	ebx
		mov	[esp+0Ch+var_C], edx
		call	free
		cmp	[ebp+var_1404],	ebx
		ja	short loc_401F7F

loc_401F99:				; CODE XREF: sub_401200+D7Dj
		mov	edi, [ebp+var_1408]
		mov	[esp+0Ch+var_C], edi
		call	free
		mov	ebx, [ebp+var_58]
		mov	ecx, [ebp+var_54]
		mov	[ebp+var_14D4],	ebx
		jmp	loc_4018E2
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401FB8:				; CODE XREF: sub_401200+CA8j
		mov	eax, [ebp+var_14E4]
		test	eax, eax
		jle	loc_401EBF
		mov	ecx, [ebp+var_14E4]
		add	esi, ecx
		jmp	loc_401EBF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401FD3:				; CODE XREF: sub_401200+800j
		fstp	st
		mov	edi, [ebp+var_14B0]
		test	edi, edi
		jnz	loc_401A55
		mov	ecx, [ebp+var_14B4]
		mov	edx, [esi]
		mov	ebx, [ecx+10h]
		sub	edx, ebx
		mov	[esi], edx
		mov	eax, [ecx+8]
		mov	edi, [ecx]
		add	eax, edi
		add	edx, eax
		mov	[esi], edx
		jmp	loc_401A5D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402002:				; CODE XREF: sub_401200+215j
		mov	[esp+0Ch+var_C], 0C8h
		mov	ebx, 32h
		xor	esi, esi
		mov	[ebp+var_1480],	ebx
		call	malloc
		mov	[ebp+var_1484],	eax
		test	eax, eax
		lea	edi, [ebp+var_13F8]
		mov	[ebp+var_1488],	esi
		jz	loc_402206
		call	__getreent
		mov	ebx, [eax+4]
		mov	edx, 1388h
		mov	[esp+0Ch+var_8], edx
		mov	[esp+0Ch+var_C], edi
		mov	[esp+0Ch+var_4], ebx
		call	fgets
		test	eax, eax
		jz	loc_402101

loc_40205A:				; CODE XREF: sub_401200+EFBj
		cmp	byte ptr [ebp+var_13F8], 0
		jz	short loc_402076
		mov	[esp+0Ch+var_C], edi
		call	strlen
		cmp	byte ptr [eax+edi-1], 0Ah
		jz	loc_40211B

loc_402076:				; CODE XREF: sub_401200+E61j
					; sub_401200+F20j
		movzx	eax, byte ptr [edi]
		xor	ebx, ebx
		test	al, al
		jz	short loc_4020A5

loc_40207F:				; CODE XREF: sub_401200+EA3j
		cmp	al, 9
		jz	loc_402125
		mov	edx, [ebp+var_1474]
		movzx	esi, al
		mov	ecx, [edx+esi*4+10h]
		test	ecx, ecx
		jnz	short loc_40209C
		mov	byte ptr [edi+ebx], 20h

loc_40209C:				; CODE XREF: sub_401200+E96j
		inc	ebx
		movzx	eax, byte ptr [edi+ebx]

loc_4020A1:				; CODE XREF: sub_401200+F68j
		test	al, al
		jnz	short loc_40207F

loc_4020A5:				; CODE XREF: sub_401200+E7Dj
		mov	ecx, [ebp+var_1480]
		cmp	[ebp+var_1488],	ecx
		jnb	loc_402172

loc_4020B7:				; CODE XREF: sub_401200+F99j
		mov	[esp+0Ch+var_C], edi
		call	strdup
		mov	esi, [ebp+var_1488]
		test	eax, eax
		mov	ecx, [ebp+var_1484]
		mov	[ecx+esi*4], eax
		jz	loc_4021CA

loc_4020D6:				; CODE XREF: sub_401200+FC4j
					; sub_401200+FD6j
		inc	[ebp+var_1488]
		call	__getreent
		mov	ebx, [eax+4]
		mov	edx, 1388h
		mov	[esp+0Ch+var_8], edx
		mov	[esp+0Ch+var_C], edi
		mov	[esp+0Ch+var_4], ebx
		call	fgets
		test	eax, eax
		jnz	loc_40205A

loc_402101:				; CODE XREF: sub_401200+E54j
		mov	edi, [ebp+var_1488]
		mov	eax, [ebp+var_1484]
		mov	[ebp+var_60], edi
		mov	[ebp+var_68], eax
		mov	[ebp+var_64], edi
		jmp	loc_4014F9
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40211B:				; CODE XREF: sub_401200+E70j
		mov	byte ptr [eax+edi-1], 0
		jmp	loc_402076
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402125:				; CODE XREF: sub_401200+E81j
		mov	eax, ebx
		add	eax, 8
		js	short loc_40216D

loc_40212C:				; CODE XREF: sub_401200+F70j
		mov	[esp+0Ch+var_C], edi
		mov	esi, eax
		and	esi, 0FFFFFFF8h
		call	strlen
		cmp	eax, ebx
		mov	ecx, eax
		jle	short loc_40215E
		mov	eax, esi
		sub	eax, ebx
		add	eax, edi
		lea	edx, [ecx+eax-1]

loc_402149:				; CODE XREF: sub_401200+F53j
		movzx	eax, byte ptr [edi+ecx]
		dec	ecx
		mov	[edx], al
		dec	edx
		cmp	ecx, ebx
		jg	short loc_402149
		cmp	ebx, esi
		jge	short loc_402162

loc_402159:				; CODE XREF: sub_401200+F60j
		mov	byte ptr [edi+ebx], 20h
		inc	ebx

loc_40215E:				; CODE XREF: sub_401200+F3Dj
		cmp	ebx, esi
		jl	short loc_402159

loc_402162:				; CODE XREF: sub_401200+F57j
		dec	ebx
		inc	ebx
		movzx	eax, byte ptr [edi+ebx]
		jmp	loc_4020A1
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40216D:				; CODE XREF: sub_401200+F2Aj
		lea	eax, [ebx+0Fh]
		jmp	short loc_40212C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402172:				; CODE XREF: sub_401200+EB1j
		mov	eax, ecx
		mov	ebx, [ebp+var_1484]
		add	eax, eax
		mov	[ebp+var_1480],	eax
		shl	eax, 2
		mov	[esp+0Ch+var_8], eax
		mov	[esp+0Ch+var_C], ebx
		call	realloc
		mov	[ebp+var_1484],	eax
		test	eax, eax
		jnz	loc_4020B7
		mov	[esp+0Ch+var_C], offset	aOutOfMemory ; "out of memory"
		call	pm_error
		mov	[esp+0Ch+var_C], edi
		call	strdup
		mov	esi, [ebp+var_1488]
		test	eax, eax
		mov	ecx, [ebp+var_1484]
		mov	[ecx+esi*4], eax
		jnz	loc_4020D6

loc_4021CA:				; CODE XREF: sub_401200+ED0j
		mov	[esp+0Ch+var_C], offset	aOutOfMemory ; "out of memory"
		call	pm_error
		jmp	loc_4020D6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4021DB:				; CODE XREF: sub_401200+67Fj
		mov	[esp+0Ch+var_C], offset	aOutOfMemoryAll	; "out of memory allocating space for inpu"...
		call	pm_error
		jmp	loc_401885
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4021EC:				; CODE XREF: sub_401200+20Aj
		mov	edi, [ebp+var_1474]
		mov	[esp+0Ch+var_C], edi
		call	pbm_dumpfont
		mov	[esp+0Ch+var_C], 0
		call	exit

loc_402206:				; CODE XREF: sub_401200+E2Fj
		call	abort
		nop
		nop
		nop
		nop
		nop
sub_401200	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_402210	proc near		; CODE XREF: sub_401200+Bp
					; sub_401200+1Ap
		push	ecx
		mov	ecx, esp
		add	ecx, 8

loc_402216:				; CODE XREF: sub_402210+1Bj
		cmp	eax, 1000h
		jb	short loc_40222D
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		jmp	short loc_402216
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40222D:				; CODE XREF: sub_402210+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		jmp	eax
sub_402210	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402240	proc near		; CODE XREF: start+3Ap

var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_C2		= dword	ptr -0C2h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		mov	[esp+18h+var_14], eax
		mov	[esp+18h+var_18], esi
		call	sub_402360
		sub	esp, 8
		test	eax, eax
		jz	short loc_402271
		mov	[esp+18h+var_18], 0

loc_40226B:				; CODE XREF: sub_402240+56j
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)

loc_402271:				; CODE XREF: sub_402240+22j
		sub	esp, 0C0h
		lea	ebx, [esp+0D8h+var_C2+1]
		and	ebx, 0FFFFFFF0h
		mov	dword ptr [ebx], 0
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	sub_402360
		sub	esp, 8
		mov	[esp+0D8h+var_D8], ebx
		jmp	short loc_40226B
sub_402240	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strlen. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION exit. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strdup. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getreent. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fgets. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strcpy. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION abort. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strcat. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION realloc. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS KEYPAD "+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402360	proc near		; CODE XREF: sub_402240+18p
					; sub_402240+4Bp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		push	ebx
		sub	esp, 4		; lpModuleName
		mov	ebx, [ebp+arg_4]
		test	ebx, ebx
		jz	loc_402463

loc_402374:				; CODE XREF: sub_402360+11Fj
		mov	dword ptr [ebx+4], 0A8h
		xor	ecx, ecx
		mov	edx, 84h
		mov	dword ptr [ebx+8], 3EDh
		test	eax, eax
		mov	dword ptr [ebx+0Ch], 12h
		mov	[ebx+80h], ecx
		mov	[ebx+84h], edx
		mov	dword ptr [ebx+2Ch], offset dword_4025F8
		mov	dword ptr [ebx+30h], offset dword_402600
		mov	dword ptr [ebx+14h], offset unk_404014
		jnz	loc_402451
		mov	eax, ds:_impure_ptr
		mov	[ebx+10h], eax

loc_4023C1:				; CODE XREF: sub_402360+FEj
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [ebx+48h], offset sub_402540
		mov	dword ptr [ebx+4Ch], offset sub_402530
		mov	[ebx+28h], eax
		mov	eax, [ebp+0]
		mov	dword ptr [ebx+50h], offset sub_402520
		mov	dword ptr [ebx+54h], offset sub_402510
		mov	dword ptr [ebx+24h], offset unk_404010
		mov	[ebx], eax
		mov	dword ptr [ebx+18h], offset malloc
		mov	dword ptr [ebx+1Ch], offset free
		mov	dword ptr [ebx+20h], offset realloc
		mov	dword ptr [ebx+44h], offset loc_402500
		mov	[esp+8+var_8], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	dword ptr [ebx+34h], offset aFont ; "font"
		mov	dword ptr [ebx+38h], offset aFont ; "font"
		mov	dword ptr [ebx+3Ch], offset dword_404000
		mov	dword ptr [ebx+40h], 404040h
		call	sub_4024D0
		mov	eax, 1

loc_40244A:				; CODE XREF: sub_402360+116j
		mov	ebx, [ebp+var_4]
		leave
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402451:				; CODE XREF: sub_402360+53j
		mov	edx, [ebx+0A4h]
		mov	eax, ds:_impure_ptr
		mov	[eax], edx
		jmp	loc_4023C1
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402463:				; CODE XREF: sub_402360+Ej
		mov	[esp+8+var_8], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_40244A
		mov	ebx, edx
		mov	eax, 1
		jmp	loc_402374
sub_402360	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4024A0	proc near		; CODE XREF: sub_4024D0+1Fp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ebx, [ebp+arg_4]
		jmp	short loc_4024BC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4024B0:				; CODE XREF: sub_4024A0+1Ej
		mov	edx, [ecx+4]
		mov	eax, [ecx]
		add	ecx, 8
		add	edx, esi
		add	[edx], eax

loc_4024BC:				; CODE XREF: sub_4024A0+Ej
		cmp	ecx, ebx
		jb	short loc_4024B0
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_4024A0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4024D0	proc near		; CODE XREF: sub_402360+E0p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	edx, 400000h
		mov	ebp, esp
		mov	eax, offset unk_403070
		sub	esp, 0Ch
		mov	[esp+0Ch+var_4], edx
		mov	[esp+0Ch+var_8], eax
		mov	[esp+0Ch+var_C], offset	unk_403070
		call	sub_4024A0
		leave
		retn
sub_4024D0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_402500:				; DATA XREF: sub_402360+ABo
		jmp	ds:calloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402510	proc near		; DATA XREF: sub_402360+86o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402510	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402520	proc near		; DATA XREF: sub_402360+7Fo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402520	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402530	proc near		; DATA XREF: sub_402360+72o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402530	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402540	proc near		; DATA XREF: sub_402360+6Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402540	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION optParseOptions3.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pbm_defaultfont. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pbm_dumpfont. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pbm_init.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pbm_loadfont. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pbm_writepbm. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_allocarray. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_close.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_error.	PRESS KEYPAD "+" TO EXPAND]
		align 4
dword_4025F8	dd 0FFFFFFFFh, 0	; DATA XREF: sub_402360+3Eo
dword_402600	dd 0FFFFFFFFh, 7Fh dup(0) ; DATA XREF: sub_402360+45o
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 00000070 (	112.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001C00
; Flags	40000040: Data Readable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 403000h
aFont		db 'font',0             ; DATA XREF: sub_401200+90o
					; sub_402360+C4o ...
aBuiltin	db 'builtin',0          ; DATA XREF: sub_401200+B0o
aDump		db 'dump',0             ; DATA XREF: sub_401200+C9o
aSpace		db 'space',0            ; DATA XREF: sub_401200+F0o
aWidth		db 'width',0            ; DATA XREF: sub_401200+110o
aLspace		db 'lspace',0           ; DATA XREF: sub_401200+129o
aNomargins	db 'nomargins',0        ; DATA XREF: sub_401200+136o
aBdf		db 'bdf',0              ; DATA XREF: sub_401200+594o
		align 4
aOutOfMemoryAll	db 'out of memory allocating space for input text',0
					; DATA XREF: sub_401200+6B9o
					; sub_401200+FDBo
aOutOfMemory	db 'out of memory',0    ; DATA XREF: sub_401200+F9Fo
					; sub_401200+FCAo
unk_403070	db    0	;		; DATA XREF: sub_4024D0+8o
					; sub_4024D0+18o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_rdata		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 00000040 (	 64.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 404000h
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
dword_404000	dd ?			; DATA XREF: start+9r sub_402360+D2o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_404010	db    ?	;		; DATA XREF: sub_402360+8Do
		db    ?	;
		db    ?	;
		db    ?	;
unk_404014	db    ?	;		; DATA XREF: sub_402360+4Co
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
_bss		ends

;
; Imports from cygwin1
;
; Section 4. (virtual address 00005000)
; Virtual size			: 00000358 (	856.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001E00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp___getreent:dword ; DATA XREF: __getreentr
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn _impure_ptr:dword	; DATA XREF: sub_402360+59r
					; sub_402360+F7r
; void _imp_abort(void)
		extrn __imp_abort:dword	; DATA XREF: abortr
; void *__cdecl	calloc(size_t,size_t)
		extrn calloc:dword	; DATA XREF: .text:00402500r
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_402240+2Br
					; .text:00402490r
; void __cdecl _imp_exit(int)
		extrn __imp_exit:dword	; DATA XREF: exitr
		extrn __imp_fgets:dword	; DATA XREF: fgetsr
; void __cdecl _imp_free(void *)
		extrn __imp_free:dword	; DATA XREF: freer
; void *__cdecl	_imp_malloc(size_t)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; void *__cdecl	_imp_realloc(void *,size_t)
		extrn __imp_realloc:dword ; DATA XREF: reallocr
; char *__cdecl	_imp_strcat(char *,const char *)
		extrn __imp_strcat:dword ; DATA	XREF: strcatr
; char *__cdecl	_imp_strcpy(char *,const char *)
		extrn __imp_strcpy:dword ; DATA	XREF: strcpyr
; char *__cdecl	_imp_strdup(const char *)
		extrn __imp_strdup:dword ; DATA	XREF: strdupr
; size_t __cdecl _imp_strlen(const char	*)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr


;
; Imports from KERNEL32
;
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr


;
; Imports from cygnetpbm-10
;
		extrn __imp_optParseOptions3:dword ; DATA XREF:	optParseOptions3r
		extrn __imp_pbm_defaultfont:dword ; DATA XREF: pbm_defaultfontr
		extrn __imp_pbm_dumpfont:dword ; DATA XREF: pbm_dumpfontr
		extrn __imp_pbm_init:dword ; DATA XREF:	pbm_initr
		extrn __imp_pbm_loadfont:dword ; DATA XREF: pbm_loadfontr
		extrn __imp_pbm_writepbm:dword ; DATA XREF: pbm_writepbmr
		extrn __imp_pm_allocarray:dword	; DATA XREF: pm_allocarrayr
		extrn __imp_pm_close:dword ; DATA XREF:	pm_closer
		extrn __imp_pm_error:dword ; DATA XREF:	pm_errorr



		end start
