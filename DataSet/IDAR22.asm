

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\infotopam.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 000010A8 (   4264.)
; Section size in file		: 00001200 (   4608.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		and	esp, 0FFFFFFF0h
		mov	eax, ds:dword_404000
		test	eax, eax
		jz	short loc_401013
		int	3		; Trap to Debugger

loc_401013:				; CODE XREF: start+10j
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_401160
		call	sub_401CC0
		leave
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401050	proc near		; CODE XREF: sub_401160+3D5p
					; sub_401160+87Ep

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= byte ptr -24h
var_23		= byte ptr -23h
var_22		= byte ptr -22h
var_21		= byte ptr -21h
var_20		= byte ptr -20h
var_1F		= byte ptr -1Fh

		push	ebp
		mov	ecx, 14h
		mov	ebp, esp
		push	esi
		mov	edx, 1
		push	ebx
		sub	esp, 30h
		mov	ebx, eax
		mov	esi, [eax+4]
		lea	eax, [ebp+var_28]
		mov	[esp+38h+var_30], ecx
		mov	[esp+38h+var_2C], esi
		mov	[esp+38h+var_34], edx
		mov	[esp+38h+var_38], eax
		call	fread
		test	eax, eax
		mov	esi, eax
		js	loc_401120

loc_401088:				; CODE XREF: sub_401050+100j
		cmp	esi, 14h
		jz	short loc_4010B7
		mov	edx, [ebx+4]
		mov	[esp+38h+var_38], edx
		call	pm_close
		mov	[esp+38h+var_30], esi
		mov	eax, 14h
		mov	[esp+38h+var_2C], eax
		mov	esi, [ebx]
		mov	[esp+38h+var_38], offset aCannotReadTheE ; "Cannot read	the entire icon	header for "...
		mov	[esp+38h+var_34], esi
		call	pm_error

loc_4010B7:				; CODE XREF: sub_401050+3Bj
		movzx	ecx, [ebp+var_24]
		movzx	esi, [ebp+var_23]
		shl	ecx, 8
		add	ecx, esi
		mov	[ebx+1Ch], ecx
		movzx	eax, [ebp+var_22]
		movzx	edx, [ebp+var_21]
		shl	eax, 8
		add	eax, edx
		mov	[ebx+20h], eax
		movzx	ecx, [ebp+var_20]
		movzx	esi, [ebp+var_1F]
		shl	ecx, 8
		add	ecx, esi
		mov	[ebx+24h], ecx
		dec	ecx
		cmp	ecx, 1
		ja	short loc_4010F4
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4010F4:				; CODE XREF: sub_401050+9Bj
		mov	ecx, [ebx+4]
		mov	[esp+38h+var_38], ecx
		call	pm_close
		mov	edx, [ebx]
		mov	[esp+38h+var_30], edx
		mov	eax, [ebx+24h]
		mov	[esp+38h+var_38], offset aWeDonTKnowHowT ; "We don't know how to interpret %d bitpl"...
		mov	[esp+38h+var_34], eax
		call	pm_error
		add	esp, 30h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401120:				; CODE XREF: sub_401050+32j
		mov	ecx, [ebx+4]
		mov	[esp+38h+var_38], ecx
		call	pm_close
		call	__errno
		mov	edx, [eax]
		mov	[esp+38h+var_38], edx
		call	strerror
		mov	[esp+38h+var_30], eax
		mov	eax, [ebx]
		mov	[esp+38h+var_38], offset aCannotReadIcon ; "Cannot read	icon header for	file %s: %s"...
		mov	[esp+38h+var_34], eax
		call	pm_error
		jmp	loc_401088
sub_401050	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401160	proc near		; DATA XREF: start+33o

var_280		= dword	ptr -280h
var_27C		= dword	ptr -27Ch
var_278		= dword	ptr -278h
var_274		= dword	ptr -274h
var_270		= dword	ptr -270h
var_26C		= dword	ptr -26Ch
var_268		= dword	ptr -268h
var_250		= dword	ptr -250h
var_24C		= dword	ptr -24Ch
var_248		= dword	ptr -248h
var_244		= dword	ptr -244h
var_240		= dword	ptr -240h
var_23C		= dword	ptr -23Ch
var_238		= dword	ptr -238h
var_234		= dword	ptr -234h
var_230		= dword	ptr -230h
var_22C		= dword	ptr -22Ch
var_228		= dword	ptr -228h
var_224		= dword	ptr -224h
var_21C		= dword	ptr -21Ch
var_218		= dword	ptr -218h
var_214		= dword	ptr -214h
var_210		= dword	ptr -210h
var_20C		= dword	ptr -20Ch
var_208		= dword	ptr -208h
var_1C6		= byte ptr -1C6h
var_1C5		= byte ptr -1C5h
var_1C4		= byte ptr -1C4h
var_1C3		= byte ptr -1C3h
var_1B8		= dword	ptr -1B8h
var_1B4		= dword	ptr -1B4h
var_1B0		= dword	ptr -1B0h
var_1AC		= dword	ptr -1ACh
var_1A8		= dword	ptr -1A8h
var_1A4		= dword	ptr -1A4h
var_1A0		= dword	ptr -1A0h
var_19C		= dword	ptr -19Ch
var_194		= dword	ptr -194h
var_190		= dword	ptr -190h
var_18C		= dword	ptr -18Ch
var_188		= dword	ptr -188h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_178		= dword	ptr -178h
var_174		= word ptr -174h
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= dword	ptr -68h
var_64		= dword	ptr -64h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_20		= dword	ptr -20h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		xor	ecx, ecx
		mov	ebp, esp
		push	edi
		xor	edx, edx
		mov	eax, 10h
		push	esi
		push	ebx
		sub	esp, 26Ch
		and	esp, 0FFFFFFF0h
		mov	[ebp+var_228], ecx
		mov	[ebp+var_224], edx
		call	sub_401C90
		call	__main
		mov	eax, [ebp+arg_4]
		lea	edi, [ebp+arg_0]
		mov	ebx, offset a0055aa ; "#0055AA"
		mov	[esp+278h+var_278], edi
		mov	[esp+278h+var_274], eax
		call	pnm_init
		mov	[ebp+var_1B8], ebx
		mov	esi, [ebp+arg_0]
		mov	ecx, offset aFfffff ; "#FFFFFF"
		mov	[ebp+var_1B4], ecx
		mov	edx, offset a000020 ; "#000020"
		mov	eax, offset aFf8a00 ; "#FF8A00"
		mov	[ebp+var_1B0], edx
		mov	[ebp+var_218], esi
		mov	[ebp+var_1AC], eax
		mov	[esp+278h+var_278], 960h
		call	malloc
		test	eax, eax
		mov	ebx, eax
		jz	loc_401C83
		mov	byte ptr [eax],	0
		lea	edx, [ebp+var_20C]
		lea	edi, [ebp+var_6C]
		mov	dword ptr [eax+14h], 0
		lea	esi, [ebp+var_214]
		mov	dword ptr [eax+4], offset aForcecolor ;	"forcecolor"
		mov	dword ptr [eax+8], 1
		mov	[eax+10h], edx
		mov	dword ptr [eax+0Ch], 0
		lea	eax, [ebp+var_210]
		mov	byte ptr [ebx+18h], 0
		mov	byte ptr [ebx+30h], 0
		mov	dword ptr [ebx+2Ch], 0
		mov	dword ptr [ebx+44h], 0
		mov	dword ptr [ebx+1Ch], offset aNumcolors ; "numcolors"
		mov	[ebx+24h], edi
		lea	edi, [ebp+var_50]
		mov	[ebx+40h], esi
		xor	esi, esi
		mov	dword ptr [ebx+34h], offset aSelected ;	"selected"
		mov	[ebx+28h], eax
		mov	dword ptr [ebx+20h], 4
		mov	dword ptr [ebx+38h], 1
		mov	dword ptr [ebx+3Ch], 0
		mov	dword ptr [ebx+50h], 0
		mov	[ebp+var_78], 0
		mov	[ebp+var_74], 0
		mov	[ebp+var_64], 0
		mov	[ebp+var_60], 0
		mov	[ebp+var_5C], 0
		mov	[ebp+var_58], 0
		mov	[ebp+var_54], 0
		mov	[ebp+var_20], 0
		nop
		lea	esi, [esi+0]

loc_4012B0:				; CODE XREF: sub_401160+176j
		mov	[esp+278h+var_278], edi
		mov	ecx, [ebp+esi*4+var_1B8]
		mov	eax, 0FFh
		mov	[esp+278h+var_270], eax
		inc	esi
		add	edi, 0Ch
		mov	[esp+278h+var_274], ecx
		call	ppm_parsecolor
		sub	esp, 4
		cmp	esi, 3
		jbe	short loc_4012B0
		and	[ebp+var_228], 0FFFFFF00h
		xor	edi, edi
		mov	ecx, [ebp+arg_4]
		mov	[ebp+var_224], ebx
		mov	esi, 8
		mov	edx, [ebp+var_228]
		mov	[esp+27Ch+var_268], edi
		mov	ebx, [ebp+var_224]
		mov	[esp+27Ch+var_26C], esi
		mov	dh, 0
		mov	[ebp+var_228], edx
		mov	eax, [ebp+var_228]
		lea	edx, [ebp+var_218]
		mov	[esp+27Ch+var_270], ebx
		mov	[esp+27Ch+var_278], ecx
		mov	[esp+27Ch+var_274], eax
		mov	[esp+27Ch+var_27C], edx
		call	optParseOptions3
		mov	ebx, [ebp+var_210]
		mov	edi, [ebp+var_20C]
		mov	esi, [ebp+var_214]
		test	ebx, ebx
		mov	[ebp+var_70], edi
		mov	[ebp+var_68], esi
		jnz	short loc_401351
		mov	[ebp+var_6C], 0

loc_401351:				; CODE XREF: sub_401160+1E8j
		mov	ecx, [ebp+var_6C]
		mov	edx, [ebp+var_218]
		lea	edi, [ecx+ecx]
		dec	edx
		cmp	edx, edi
		jz	short loc_40137D
		lea	ebx, [edi+1]
		cmp	edx, ebx
		jz	short loc_40137D
		mov	[esp+27Ch+var_274], edi
		mov	[esp+27Ch+var_278], ecx
		mov	[esp+27Ch+var_27C], offset aWrongNumberOfA ; "Wrong number of arguments	for number of"...
		call	pm_error

loc_40137D:				; CODE XREF: sub_401160+200j
					; sub_401160+207j
		mov	esi, 1
		jmp	short loc_4013B2
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401384:				; CODE XREF: sub_401160+287j
		cmp	ebx, 3
		ja	short loc_401404

loc_401389:				; CODE XREF: sub_401160+2A2j
					; sub_401160+2B4j
		mov	ecx, [ebp+arg_4]
		mov	eax, 0FFh
		lea	edx, [ebx+ebx*2]
		mov	[esp+27Ch+var_274], eax
		lea	ebx, [ebp+edx*4+var_50]
		mov	eax, [ecx+esi*4+4]
		mov	[esp+27Ch+var_27C], ebx
		add	esi, 2
		mov	[esp+27Ch+var_278], eax
		call	ppm_parsecolor
		sub	esp, 4

loc_4013B2:				; CODE XREF: sub_401160+222j
		cmp	esi, edi
		jnb	short loc_401419
		mov	edx, [ebp+arg_4]
		xor	ecx, ecx
		xor	eax, eax
		mov	[esp+280h+var_278], ecx
		lea	ebx, [ebp+var_21C]
		mov	[esp+280h+var_27C], ebx
		mov	[ebp+var_21C], eax
		mov	eax, [edx+esi*4]
		mov	[esp+280h+var_280], eax
		call	strtoul
		mov	ecx, [ebp+var_21C]
		mov	ebx, eax
		cmp	byte ptr [ecx],	0
		jz	short loc_401384
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx+esi*4]
		mov	[esp+280h+var_280], offset aSIsNotAValidCo ; "%s is not	a valid	color index\n"
		mov	[esp+280h+var_27C], edx
		call	pm_error
		cmp	ebx, 3
		jbe	short loc_401389

loc_401404:				; CODE XREF: sub_401160+227j
		mov	[esp+280h+var_27C], ebx
		mov	[esp+280h+var_280], offset aDIsNotAValidCo ; "%d is not	a valid	color index (minimum "...
		call	pm_error
		jmp	loc_401389
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401419:				; CODE XREF: sub_401160+254j
		cmp	[ebp+var_218], esi
		jz	loc_401B41
		mov	ebx, [ebp+arg_4]
		mov	edi, [ebx+esi*4]
		mov	[ebp+var_78], edi

loc_40142E:				; CODE XREF: sub_401160+9E8j
		mov	edx, [ebp+var_78]
		lea	esi, [ebp+var_208]
		mov	[esp+280h+var_280], edx
		call	pm_openr
		mov	[ebp+var_74], eax
		mov	ecx, 1
		mov	[esp+280h+var_274], eax
		mov	eax, 4Eh
		mov	[esp+280h+var_278], eax
		mov	[esp+280h+var_27C], ecx
		mov	[esp+280h+var_280], esi
		call	fread
		test	eax, eax
		mov	ebx, eax
		js	loc_401C17

loc_40146A:				; CODE XREF: sub_401160+AE8j
		cmp	ebx, 4Eh
		jz	short loc_40149A
		mov	edx, [ebp+var_74]
		mov	[esp+280h+var_280], edx
		call	pm_close
		mov	[esp+280h+var_278], ebx
		mov	ebx, [ebp+var_78]
		mov	eax, 4Eh
		mov	[esp+280h+var_274], eax
		mov	[esp+280h+var_27C], ebx
		mov	[esp+280h+var_280], offset aCannotReadEnti ; "Cannot read entire disk object header f"...
		call	pm_error

loc_40149A:				; CODE XREF: sub_401160+30Dj
		cmp	byte ptr [ebp+var_208],	0E3h
		jz	short loc_4014E0
		cmp	byte ptr [ebp+var_208+1], 10h
		jz	short loc_4014E0
		mov	ebx, [ebp+var_74]
		mov	[esp+280h+var_280], ebx
		call	pm_close
		movzx	ecx, byte ptr [ebp+var_208+1]
		mov	[esp+280h+var_280], offset aWrongMagicNumb ; "Wrong magic number for file %s\nExpected"...
		mov	edi, [ebp+var_78]
		movzx	esi, byte ptr [ebp+var_208]
		mov	[esp+280h+var_274], ecx
		mov	[esp+280h+var_27C], edi
		mov	[esp+280h+var_278], esi
		call	pm_error

loc_4014E0:				; CODE XREF: sub_401160+341j
					; sub_401160+34Aj
		movzx	edi, [ebp+var_1C6]
		movzx	ebx, [ebp+var_1C5]
		movzx	ecx, [ebp+var_1C4]
		movzx	eax, byte ptr [ebp+var_208+2]
		shl	edi, 18h
		shl	ebx, 10h
		movzx	edx, byte ptr [ebp+var_208+3]
		add	edi, ebx
		shl	ecx, 8
		movzx	esi, [ebp+var_1C3]
		shl	eax, 8
		add	edi, ecx
		add	eax, edx
		mov	[ebp+var_60], eax
		add	edi, esi
		setnz	dl
		movzx	eax, dl
		test	eax, eax
		mov	[ebp+var_64], eax
		jnz	loc_4019E8

loc_401532:				; CODE XREF: sub_401160+8A7j
					; sub_401160+8DEj
		lea	eax, [ebp+var_78]
		call	sub_401050
		mov	edi, [ebp+var_68]
		test	edi, edi
		jnz	loc_4019A4

loc_401545:				; CODE XREF: sub_401160+883j
		mov	ecx, [ebp+var_5C]
		mov	ebx, [ebp+var_58]
		add	ecx, 0Fh
		shr	ecx, 4
		imul	ecx, ebx
		add	ecx, ecx
		mov	[ebp+var_230], ecx
		jnz	loc_401971
		mov	[esp+280h+var_280], 1
		call	malloc
		mov	[ebp+var_234], eax
		mov	edi, [ebp+var_234]
		test	edi, edi
		jz	loc_401993

loc_401582:				; CODE XREF: sub_401160+82Dj
					; sub_401160+83Fj
		mov	eax, [ebp+var_230]
		shl	eax, 3
		jnz	loc_40194D
		mov	[esp+280h+var_280], 1
		call	malloc
		mov	[ebp+var_20], eax
		test	eax, eax
		jz	loc_401960

loc_4015A8:				; CODE XREF: sub_401160+7FAj
					; sub_401160+80Cj
		mov	esi, [ebp+var_230]
		xor	edi, edi
		mov	edx, [ebp+var_234]
		mov	[esp+280h+var_27C], edi
		mov	[esp+280h+var_278], esi
		xor	esi, esi
		mov	[esp+280h+var_280], edx
		call	memset
		mov	ebx, [ebp+var_230]
		xor	eax, eax
		mov	ecx, [ebp+var_20]
		mov	[esp+280h+var_27C], eax
		shl	ebx, 3
		mov	[esp+280h+var_280], ecx
		mov	[esp+280h+var_278], ebx
		call	memset
		mov	[ebp+var_22C], esi
		xor	ecx, ecx
		cmp	ecx, [ebp+var_54]
		jnb	loc_401738
		mov	esi, esi
		lea	edi, [edi+0]

loc_401600:				; CODE XREF: sub_401160+5D2j
		mov	esi, [ebp+var_230]
		mov	edi, [ebp+var_234]
		test	esi, esi
		jle	short loc_401646

loc_401610:				; CODE XREF: sub_401160+4E4j
		mov	[esp+280h+var_278], esi
		mov	eax, [ebp+var_74]
		mov	ecx, 1
		mov	[esp+280h+var_27C], ecx
		mov	[esp+280h+var_280], edi
		mov	[esp+280h+var_274], eax
		call	fread
		test	eax, eax
		mov	ebx, eax
		js	loc_401BC8

loc_401636:				; CODE XREF: sub_401160+AB2j
		test	ebx, ebx
		jz	loc_401910
		sub	esi, ebx
		add	edi, ebx

loc_401642:				; CODE XREF: sub_401160+7E8j
		test	esi, esi
		jg	short loc_401610

loc_401646:				; CODE XREF: sub_401160+4AEj
		xor	ebx, ebx
		cmp	ebx, [ebp+var_230]
		jge	loc_401723
		mov	esi, [ebp+var_234]
		mov	edi, [ebp+var_230]

loc_401660:				; CODE XREF: sub_401160+5BDj
		movzx	eax, byte ptr [esi]
		mov	ecx, [ebp+var_20]
		and	al, 1
		movzx	edx, byte ptr [ecx+ebx]
		add	edx, edx
		or	al, dl
		mov	[ecx+ebx], al
		mov	ecx, [ebp+var_20]
		movzx	eax, byte ptr [esi]
		movzx	edx, byte ptr [ecx+ebx+1]
		shr	al, 1
		and	al, 1
		add	edx, edx
		or	al, dl
		mov	[ecx+ebx+1], al
		mov	ecx, [ebp+var_20]
		movzx	eax, byte ptr [esi]
		movzx	edx, byte ptr [ecx+ebx+2]
		shr	al, 2
		and	al, 1
		add	edx, edx
		or	al, dl
		mov	[ecx+ebx+2], al
		mov	ecx, [ebp+var_20]
		movzx	eax, byte ptr [esi]
		movzx	edx, byte ptr [ecx+ebx+3]
		shr	al, 3
		and	al, 1
		add	edx, edx
		or	al, dl
		mov	[ecx+ebx+3], al
		mov	ecx, [ebp+var_20]
		movzx	eax, byte ptr [esi]
		movzx	edx, byte ptr [ecx+ebx+4]
		shr	al, 4
		and	al, 1
		add	edx, edx
		or	al, dl
		mov	[ecx+ebx+4], al
		mov	ecx, [ebp+var_20]
		movzx	eax, byte ptr [esi]
		movzx	edx, byte ptr [ecx+ebx+5]
		shr	al, 5
		and	al, 1
		add	edx, edx
		or	al, dl
		mov	[ecx+ebx+5], al
		mov	ecx, [ebp+var_20]
		movzx	eax, byte ptr [esi]
		movzx	edx, byte ptr [ecx+ebx+6]
		shr	al, 6
		and	al, 1
		add	edx, edx
		or	al, dl
		mov	[ecx+ebx+6], al
		mov	ecx, [ebp+var_20]
		movzx	eax, byte ptr [esi]
		inc	esi
		movzx	edx, byte ptr [ecx+ebx+7]
		shr	al, 7
		add	edx, edx
		or	al, dl
		mov	[ecx+ebx+7], al
		add	ebx, 8
		dec	edi
		jnz	loc_401660

loc_401723:				; CODE XREF: sub_401160+4EEj
		inc	[ebp+var_22C]
		mov	ecx, [ebp+var_22C]
		cmp	ecx, [ebp+var_54]
		jb	loc_401600

loc_401738:				; CODE XREF: sub_401160+491j
		mov	eax, [ebp+var_234]
		mov	[esp+280h+var_280], eax
		call	free
		mov	ebx, [ebp+var_68]
		mov	eax, offset aSecond ; "second"
		mov	ecx, [ebp+var_54]
		mov	esi, [ebp+var_58]
		mov	edi, [ebp+var_5C]
		test	ebx, ebx
		mov	[esp+280h+var_268], ecx
		mov	[esp+280h+var_26C], esi
		mov	[esp+280h+var_270], edi
		jnz	short loc_40176C
		mov	eax, offset aFirst ; "first"

loc_40176C:				; CODE XREF: sub_401160+605j
		mov	[esp+280h+var_274], eax
		mov	edx, [ebp+var_78]
		mov	ebx, [ebp+var_60]
		mov	[esp+280h+var_280], offset aConvertingSVer ; "converting %s, version %d, %s icon: %d "...
		mov	[esp+280h+var_27C], edx
		mov	[esp+280h+var_278], ebx
		call	pm_message
		mov	eax, 12Ch
		mov	ecx, 128h
		mov	[ebp+var_1A8], eax
		mov	[ebp+var_1A4], ecx
		call	__getreent
		cmp	[ebp+var_54], 1
		mov	edx, 5037h
		mov	esi, [eax+8]
		mov	[ebp+var_19C], edx
		mov	edi, [ebp+var_58]
		mov	ebx, [ebp+var_5C]
		mov	[ebp+var_1A0], esi
		mov	[ebp+var_194], edi
		mov	[ebp+var_190], ebx
		jz	loc_401AEE

loc_4017D5:				; CODE XREF: sub_401160+993j
		mov	eax, 3
		mov	ecx, 0FFh
		mov	esi, 424752h
		mov	[ebp+var_18C], eax
		mov	[ebp+var_188], ecx
		mov	[ebp+var_180], esi

loc_4017F6:				; CODE XREF: sub_401160+9DCj
		lea	edi, [ebp+var_1A8]
		mov	[esp+280h+var_280], edi
		call	pnm_writepaminit
		mov	ebx, [ebp+var_5C]
		lea	edx, [ebp+var_1A8]
		mov	[esp+280h+var_280], edx
		add	ebx, 0Fh
		and	ebx, 0FFFFFFF0h
		mov	[ebp+var_240], ebx
		call	pnm_allocpamrow
		cmp	[ebp+var_54], 1
		mov	[ebp+var_238], eax
		jz	loc_401A43
		xor	edi, edi
		xor	eax, eax
		cmp	edi, [ebp+var_58]
		mov	[ebp+var_250], eax
		jnb	loc_4018CF
		xor	edx, edx
		mov	[ebp+var_244], edx
		lea	esi, [esi+0]

loc_401850:				; CODE XREF: sub_401160+76Dj
		mov	edi, [ebp+var_5C]
		xor	ebx, ebx
		cmp	ebx, edi
		jnb	short loc_40189A
		mov	esi, [ebp+var_244]
		mov	ecx, [ebp+var_20]
		add	esi, ecx
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401870:				; CODE XREF: sub_401160+738j
		movzx	edx, byte ptr [esi+ebx]
		mov	eax, [ebp+var_238]
		mov	ecx, [eax+ebx*4]
		lea	eax, [edx+edx*2]
		inc	ebx
		lea	eax, [ebp+eax*4+var_78]
		mov	edx, [eax+28h]
		cmp	ebx, edi
		mov	[ecx], edx
		mov	edx, [eax+2Ch]
		mov	eax, [eax+30h]
		mov	[ecx+4], edx
		mov	[ecx+8], eax
		jb	short loc_401870

loc_40189A:				; CODE XREF: sub_401160+6F7j
		mov	ecx, [ebp+var_238]
		lea	edi, [ebp+var_1A8]
		mov	[esp+280h+var_280], edi
		mov	[esp+280h+var_27C], ecx
		call	pnm_writepamrow
		inc	[ebp+var_250]
		mov	esi, [ebp+var_240]
		add	[ebp+var_244], esi
		mov	ebx, [ebp+var_250]
		cmp	ebx, [ebp+var_58]
		jb	short loc_401850

loc_4018CF:				; CODE XREF: sub_401160+6DEj
					; sub_401160+8FBj ...
		mov	esi, [ebp+var_238]
		mov	[esp+280h+var_280], esi
		call	pm_freerow
		mov	ebx, [ebp+var_20]
		mov	[esp+280h+var_280], ebx
		call	free
		mov	eax, [ebp+var_1A0]
		mov	[esp+280h+var_280], eax
		call	pm_close
		mov	edx, [ebp+var_74]
		mov	[esp+280h+var_280], edx
		call	pm_close
		lea	esp, [ebp+var_C]
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_401910:				; CODE XREF: sub_401160+4D8j
		mov	ecx, [ebp+var_20]
		add	edi, ebx
		mov	[esp+280h+var_280], ecx
		call	free
		mov	edx, [ebp+var_234]
		mov	[esp+280h+var_280], edx
		call	free
		mov	eax, [ebp+var_74]
		mov	[esp+280h+var_280], eax
		call	pm_close
		mov	[esp+280h+var_27C], esi
		sub	esi, ebx
		mov	[esp+280h+var_280], offset aPrematureEndOf ; "Premature	end-of-file.  Still have 0x%X"...
		call	pm_error
		jmp	loc_401642
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40194D:				; CODE XREF: sub_401160+42Bj
		mov	[esp+280h+var_280], eax
		call	malloc
		mov	[ebp+var_20], eax
		test	eax, eax
		jnz	loc_4015A8

loc_401960:				; CODE XREF: sub_401160+442j
		mov	[esp+280h+var_280], offset aCannotAllocate ; "Cannot allocate memory to	hold icon"
		call	pm_error
		jmp	loc_4015A8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401971:				; CODE XREF: sub_401160+3FCj
		mov	edx, [ebp+var_230]
		mov	[esp+280h+var_280], edx
		call	malloc
		mov	[ebp+var_234], eax
		mov	edi, [ebp+var_234]
		test	edi, edi
		jnz	loc_401582

loc_401993:				; CODE XREF: sub_401160+41Cj
		mov	[esp+280h+var_280], offset aCannotAlloca_0 ; "Cannot allocate memory to	hold icon pix"...
		call	pm_error
		jmp	loc_401582
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019A4:				; CODE XREF: sub_401160+3DFj
		mov	eax, [ebp+var_5C]
		mov	ecx, 1
		mov	edx, [ebp+var_58]
		mov	[esp+280h+var_278], ecx
		mov	ebx, [ebp+var_54]
		add	eax, 0Fh
		shr	eax, 4
		mov	esi, [ebp+var_74]
		imul	eax, edx
		mov	[esp+280h+var_280], esi
		imul	eax, ebx
		add	eax, eax
		mov	[esp+280h+var_27C], eax
		call	fseek
		test	eax, eax
		js	loc_401C4D

loc_4019DB:				; CODE XREF: sub_401160+B1Ej
		lea	eax, [ebp+var_78]
		call	sub_401050
		jmp	loc_401545
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019E8:				; CODE XREF: sub_401160+3CCj
		mov	edi, [ebp+var_74]
		mov	ecx, 1
		mov	esi, 38h
		mov	[esp+280h+var_278], ecx
		mov	[esp+280h+var_27C], esi
		mov	[esp+280h+var_280], edi
		call	fseek
		test	eax, eax
		jns	loc_401532
		mov	edx, [ebp+var_74]
		mov	[esp+280h+var_280], edx
		call	pm_close
		call	__errno
		mov	eax, [eax]
		mov	[esp+280h+var_280], eax
		call	strerror
		mov	[esp+280h+var_278], eax
		mov	ebx, [ebp+var_78]
		mov	[esp+280h+var_280], offset aCannotSkipHead ; "Cannot skip header information in	file "...
		mov	[esp+280h+var_27C], ebx
		call	pm_error
		jmp	loc_401532
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A43:				; CODE XREF: sub_401160+6CBj
		mov	esi, [ebp+var_70]
		test	esi, esi
		jz	loc_401B4D
		xor	ecx, ecx
		xor	eax, eax
		cmp	ecx, [ebp+var_58]
		mov	[ebp+var_23C], eax
		jnb	loc_4018CF
		xor	edx, edx
		mov	[ebp+var_24C], edx

loc_401A69:				; CODE XREF: sub_401160+987j
		mov	esi, [ebp+var_5C]
		xor	ebx, ebx
		cmp	ebx, esi
		jnb	short loc_401AB4
		mov	edi, [ebp+var_24C]
		mov	ecx, [ebp+var_20]
		add	edi, ecx
		lea	esi, [esi+0]

loc_401A80:				; CODE XREF: sub_401160+952j
		movzx	ecx, byte ptr [edi+ebx]
		mov	edx, [ebp+var_238]
		cmp	cl, 1
		sbb	eax, eax
		mov	ecx, [edx+ebx*4]
		add	al, 2
		movzx	edx, al
		inc	ebx
		lea	eax, [edx+edx*2]
		lea	eax, [ebp+eax*4+var_78]
		cmp	ebx, esi
		mov	edx, [eax+28h]
		mov	[ecx], edx
		mov	edx, [eax+2Ch]
		mov	eax, [eax+30h]
		mov	[ecx+4], edx
		mov	[ecx+8], eax
		jb	short loc_401A80

loc_401AB4:				; CODE XREF: sub_401160+910j
		mov	eax, [ebp+var_238]
		lea	esi, [ebp+var_1A8]
		mov	[esp+280h+var_280], esi
		mov	[esp+280h+var_27C], eax
		call	pnm_writepamrow
		inc	[ebp+var_23C]
		mov	edi, [ebp+var_240]
		add	[ebp+var_24C], edi
		mov	ebx, [ebp+var_23C]
		cmp	ebx, [ebp+var_58]
		jb	short loc_401A69
		jmp	loc_4018CF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401AEE:				; CODE XREF: sub_401160+66Fj
		mov	edi, [ebp+var_70]
		test	edi, edi
		jnz	loc_4017D5
		mov	edi, 1
		mov	ebx, 1
		mov	edx, 43414C42h
		mov	[ebp+var_18C], edi
		mov	eax, 444E414Bh
		mov	ecx, 54494857h
		mov	[ebp+var_188], ebx
		mov	esi, 45h
		mov	[ebp+var_180], edx
		mov	[ebp+var_17C], eax
		mov	[ebp+var_178], ecx
		mov	[ebp+var_174], si
		jmp	loc_4017F6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B41:				; CODE XREF: sub_401160+2BFj
		mov	[ebp+var_78], offset asc_40336B	; "-"
		jmp	loc_40142E
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B4D:				; CODE XREF: sub_401160+8E8j
		xor	edi, edi
		cmp	edi, [ebp+var_58]
		jnb	loc_4018CF
		xor	edx, edx
		mov	[ebp+var_248], edx

loc_401B60:				; CODE XREF: sub_401160+A61j
		mov	esi, [ebp+var_5C]
		xor	ecx, ecx
		cmp	ecx, esi
		jnb	short loc_401B99
		mov	ebx, [ebp+var_248]
		mov	eax, [ebp+var_20]
		add	ebx, eax
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401B80:				; CODE XREF: sub_401160+A37j
		mov	edx, [ebp+var_238]
		mov	eax, [edx+ecx*4]
		xor	edx, edx
		cmp	byte ptr [ebx+ecx], 0
		setz	dl
		inc	ecx
		mov	[eax], edx
		cmp	ecx, esi
		jb	short loc_401B80

loc_401B99:				; CODE XREF: sub_401160+A07j
		mov	esi, [ebp+var_238]
		lea	ebx, [ebp+var_1A8]
		inc	edi
		mov	[esp+280h+var_280], ebx
		mov	[esp+280h+var_27C], esi
		call	pnm_writepamrow
		mov	ecx, [ebp+var_240]
		add	[ebp+var_248], ecx
		cmp	edi, [ebp+var_58]
		jb	short loc_401B60
		jmp	loc_4018CF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401BC8:				; CODE XREF: sub_401160+4D0j
		mov	ecx, [ebp+var_20]
		mov	[esp+280h+var_280], ecx
		call	free
		mov	edx, [ebp+var_234]
		mov	[esp+280h+var_280], edx
		call	free
		mov	eax, [ebp+var_74]
		mov	[esp+280h+var_280], eax
		call	pm_close
		call	__errno
		mov	ecx, [eax]
		mov	[esp+280h+var_280], ecx
		call	strerror
		mov	[esp+280h+var_278], eax
		mov	edx, [ebp+var_78]
		mov	[esp+280h+var_280], offset aCannotReadFrom ; "Cannot read from file %s:	%s"
		mov	[esp+280h+var_27C], edx
		call	pm_error
		jmp	loc_401636
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C17:				; CODE XREF: sub_401160+304j
		mov	ecx, [ebp+var_74]
		mov	[esp+280h+var_280], ecx
		call	pm_close
		call	__errno
		mov	esi, [eax]
		mov	[esp+280h+var_280], esi
		call	strerror
		mov	[esp+280h+var_278], eax
		mov	edi, [ebp+var_78]
		mov	[esp+280h+var_280], offset aCannotReadDisk ; "Cannot read disk object header for file"...
		mov	[esp+280h+var_27C], edi
		call	pm_error
		jmp	loc_40146A
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C4D:				; CODE XREF: sub_401160+875j
		mov	eax, [ebp+var_74]
		mov	[esp+280h+var_280], eax
		call	pm_close
		call	__errno
		mov	esi, [eax]
		mov	[esp+280h+var_280], esi
		call	strerror
		mov	[esp+280h+var_278], eax
		mov	edi, [ebp+var_78]
		mov	[esp+280h+var_280], offset aCannotSkipToNe ; "Cannot skip to next icon in file %s: %s"...
		mov	[esp+280h+var_27C], edi
		call	pm_error
		jmp	loc_4019DB
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C83:				; CODE XREF: sub_401160+85j
		call	abort
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
sub_401160	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401C90	proc near		; CODE XREF: sub_401160+24p
		push	ecx
		mov	ecx, esp
		add	ecx, 8

loc_401C96:				; CODE XREF: sub_401C90+1Bj
		cmp	eax, 1000h
		jb	short loc_401CAD
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		jmp	short loc_401C96
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401CAD:				; CODE XREF: sub_401C90+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		jmp	eax
sub_401C90	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401CC0	proc near		; CODE XREF: start+3Ap

var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_C2		= dword	ptr -0C2h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		mov	[esp+18h+var_14], eax
		mov	[esp+18h+var_18], esi
		call	sub_401DD0
		sub	esp, 8
		test	eax, eax
		jz	short loc_401CF1
		mov	[esp+18h+var_18], 0

loc_401CEB:				; CODE XREF: sub_401CC0+56j
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)

loc_401CF1:				; CODE XREF: sub_401CC0+22j
		sub	esp, 0C0h
		lea	ebx, [esp+0D8h+var_C2+1]
		and	ebx, 0FFFFFFF0h
		mov	dword ptr [ebx], 0
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	sub_401DD0
		sub	esp, 8
		mov	[esp+0D8h+var_D8], ebx
		jmp	short loc_401CEB
sub_401CC0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memset. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fread. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strtoul. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION abort. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getreent. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __errno. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strerror.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fseek. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS KEYPAD "+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401DD0	proc near		; CODE XREF: sub_401CC0+18p
					; sub_401CC0+4Bp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		push	ebx
		sub	esp, 4		; lpModuleName
		mov	ebx, [ebp+arg_4]
		test	ebx, ebx
		jz	loc_401ED3

loc_401DE4:				; CODE XREF: sub_401DD0+11Fj
		mov	dword ptr [ebx+4], 0A8h
		xor	ecx, ecx
		mov	edx, 84h
		mov	dword ptr [ebx+8], 3EDh
		test	eax, eax
		mov	dword ptr [ebx+0Ch], 12h
		mov	[ebx+80h], ecx
		mov	[ebx+84h], edx
		mov	dword ptr [ebx+2Ch], offset dword_402098
		mov	dword ptr [ebx+30h], offset dword_4020A0
		mov	dword ptr [ebx+14h], offset unk_404014
		jnz	loc_401EC1
		mov	eax, ds:_impure_ptr
		mov	[ebx+10h], eax

loc_401E31:				; CODE XREF: sub_401DD0+FEj
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [ebx+48h], offset sub_401FC0
		mov	dword ptr [ebx+4Ch], offset sub_401FB0
		mov	[ebx+28h], eax
		mov	eax, [ebp+0]
		mov	dword ptr [ebx+50h], offset sub_401FA0
		mov	dword ptr [ebx+54h], offset sub_401F90
		mov	dword ptr [ebx+24h], offset unk_404010
		mov	[ebx], eax
		mov	dword ptr [ebx+18h], offset malloc
		mov	dword ptr [ebx+1Ch], offset free
		mov	dword ptr [ebx+20h], offset loc_401F80
		mov	dword ptr [ebx+44h], offset loc_401F70
		mov	[esp+8+var_8], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	dword ptr [ebx+34h], offset aCannotReadTheE ; "Cannot read the entire icon header for "...
		mov	dword ptr [ebx+38h], offset aCannotReadTheE ; "Cannot read the entire icon header for "...
		mov	dword ptr [ebx+3Ch], offset dword_404000
		mov	dword ptr [ebx+40h], 404040h
		call	sub_401F40
		mov	eax, 1

loc_401EBA:				; CODE XREF: sub_401DD0+116j
		mov	ebx, [ebp+var_4]
		leave
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401EC1:				; CODE XREF: sub_401DD0+53j
		mov	edx, [ebx+0A4h]
		mov	eax, ds:_impure_ptr
		mov	[eax], edx
		jmp	loc_401E31
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401ED3:				; CODE XREF: sub_401DD0+Ej
		mov	[esp+8+var_8], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_401EBA
		mov	ebx, edx
		mov	eax, 1
		jmp	loc_401DE4
sub_401DD0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401F10	proc near		; CODE XREF: sub_401F40+1Fp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ebx, [ebp+arg_4]
		jmp	short loc_401F2C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F20:				; CODE XREF: sub_401F10+1Ej
		mov	edx, [ecx+4]
		mov	eax, [ecx]
		add	ecx, 8
		add	edx, esi
		add	[edx], eax

loc_401F2C:				; CODE XREF: sub_401F10+Ej
		cmp	ecx, ebx
		jb	short loc_401F20
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_401F10	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401F40	proc near		; CODE XREF: sub_401DD0+E0p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	edx, 400000h
		mov	ebp, esp
		mov	eax, offset unk_4033F0
		sub	esp, 0Ch
		mov	[esp+0Ch+var_4], edx
		mov	[esp+0Ch+var_8], eax
		mov	[esp+0Ch+var_C], offset	unk_4033F0
		call	sub_401F10
		leave
		retn
sub_401F40	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401F70:				; DATA XREF: sub_401DD0+ABo
		jmp	ds:calloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401F80:				; DATA XREF: sub_401DD0+A4o
		jmp	ds:realloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401F90	proc near		; DATA XREF: sub_401DD0+86o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401F90	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401FA0	proc near		; DATA XREF: sub_401DD0+7Fo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401FA0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401FB0	proc near		; DATA XREF: sub_401DD0+72o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401FB0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401FC0	proc near		; DATA XREF: sub_401DD0+6Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401FC0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION optParseOptions3.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_close.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_error.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_freerow. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_message. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_openr.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_allocpamrow. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_init.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_writepaminit.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_writepamrow. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ppm_parsecolor. PRESS KEYPAD "+" TO EXPAND]
		align 4
dword_402098	dd 0FFFFFFFFh, 0	; DATA XREF: sub_401DD0+3Eo
dword_4020A0	dd 0FFFFFFFFh, 57h dup(0) ; DATA XREF: sub_401DD0+45o
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 000003F0 (   1008.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001600
; Flags	40000040: Data Readable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 403000h
aCannotReadTheE	db 'Cannot read the entire icon header for file %s',0Ah
					; DATA XREF: sub_401050+57o
					; sub_401DD0+C4o ...
		db 'Only read 0x%X of 0x%X bytes',0Ah,0
		align 4
aWeDonTKnowHowT	db 'We don',27h,'t know how to interpret %d bitplanes file %s.  '
					; DATA XREF: sub_401050+B8o
		db 0
		align 4
aCannotReadIcon	db 'Cannot read icon header for file %s: %s',0Ah,0
					; DATA XREF: sub_401050+F0o
a0055aa		db '#0055AA',0          ; DATA XREF: sub_401160+34o
aFfffff		db '#FFFFFF',0          ; DATA XREF: sub_401160+4Eo
a000020		db '#000020',0          ; DATA XREF: sub_401160+59o
aFf8a00		db '#FF8A00',0          ; DATA XREF: sub_401160+5Eo
aForcecolor	db 'forcecolor',0       ; DATA XREF: sub_401160+A4o
aNumcolors	db 'numcolors',0        ; DATA XREF: sub_401160+D8o
aSelected	db 'selected',0         ; DATA XREF: sub_401160+EAo
		align 4
aWrongNumberOfA	db 'Wrong number of arguments for number of colors.  For %d',0Ah
					; DATA XREF: sub_401160+211o
		db 'colors, you need %d color arguments, with possibly one more '
		db 'argument',0Ah
		db 'for the input file name.',0Ah,0
		align 4
aSIsNotAValidCo	db '%s is not a valid color index',0Ah,0 ; DATA XREF: sub_401160+28Fo
		align 4
aDIsNotAValidCo	db '%d is not a valid color index (minimum 0, maximum 3)',0Ah,0
					; DATA XREF: sub_401160+2A8o
		align 4
aCannotReadEnti	db 'Cannot read entire disk object header for file %s',0Ah
					; DATA XREF: sub_401160+32Eo
		db 'Only read 0x%X of 0x%X bytes',0Ah,0
aWrongMagicNumb	db 'Wrong magic number for file %s',0Ah ; DATA XREF: sub_401160+35Eo
		db 'Expected 0xE310, but got 0x%X%X',0Ah,0
aSecond		db 'second',0           ; DATA XREF: sub_401160+5E9o
aFirst		db 'first',0            ; DATA XREF: sub_401160+607o
		align 4
aConvertingSVer	db 'converting %s, version %d, %s icon: %d X %d X %d',0
					; DATA XREF: sub_401160+616o
		align 4
aPrematureEndOf	db 'Premature end-of-file.  Still have 0x%X bytes to read ',0Ah,0
					; DATA XREF: sub_401160+7DCo
aCannotAllocate	db 'Cannot allocate memory to hold icon',0 ; DATA XREF: sub_401160+800o
aCannotAlloca_0	db 'Cannot allocate memory to hold icon pixels',0
					; DATA XREF: sub_401160+833o
		align 4
aCannotSkipHead	db 'Cannot skip header information in file %s: %s',0Ah,0
					; DATA XREF: sub_401160+8CEo
asc_40336B	db '-',0                ; DATA XREF: sub_401160+9E1o
aCannotReadFrom	db 'Cannot read from file %s: %s',0 ; DATA XREF: sub_401160+AA2o
		align 4
aCannotReadDisk	db 'Cannot read disk object header for file %s: %s',0Ah,0
					; DATA XREF: sub_401160+AD8o
aCannotSkipToNe	db 'Cannot skip to next icon in file %s: %s',0Ah,0
					; DATA XREF: sub_401160+B0Eo
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_4033F0	db    0	;		; DATA XREF: sub_401F40+8o
					; sub_401F40+18o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_rdata		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 00000040 (	 64.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 404000h
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
dword_404000	dd ?			; DATA XREF: start+9r sub_401DD0+D2o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_404010	db    ?	;		; DATA XREF: sub_401DD0+8Do
		db    ?	;
		db    ?	;
		db    ?	;
unk_404014	db    ?	;		; DATA XREF: sub_401DD0+4Co
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
_bss		ends

;
; Imports from cygwin1
;
; Section 4. (virtual address 00005000)
; Virtual size			: 00000398 (	920.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001A00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp___errno:dword ; DATA XREF: __errnor
		extrn __imp___getreent:dword ; DATA XREF: __getreentr
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn _impure_ptr:dword	; DATA XREF: sub_401DD0+59r
					; sub_401DD0+F7r
; void _imp_abort(void)
		extrn __imp_abort:dword	; DATA XREF: abortr
; void *__cdecl	calloc(size_t,size_t)
		extrn calloc:dword	; DATA XREF: .text:00401F70r
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_401CC0+2Br
					; .text:00401F00r
		extrn __imp_fread:dword	; DATA XREF: freadr
; void __cdecl _imp_free(void *)
		extrn __imp_free:dword	; DATA XREF: freer
		extrn __imp_fseek:dword	; DATA XREF: fseekr
; void *__cdecl	_imp_malloc(size_t)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; void *__cdecl	_imp_memset(void *,int,size_t)
		extrn __imp_memset:dword ; DATA	XREF: memsetr
; void *__cdecl	realloc(void *,size_t)
		extrn realloc:dword	; DATA XREF: .text:00401F80r
; char *__cdecl	_imp_strerror(int)
		extrn __imp_strerror:dword ; DATA XREF:	strerrorr
; unsigned __int32 __cdecl _imp_strtoul(const char *,char **,int)
		extrn __imp_strtoul:dword ; DATA XREF: strtoulr


;
; Imports from KERNEL32
;
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr


;
; Imports from cygnetpbm-10
;
		extrn __imp_optParseOptions3:dword ; DATA XREF:	optParseOptions3r
		extrn __imp_pm_close:dword ; DATA XREF:	pm_closer
		extrn __imp_pm_error:dword ; DATA XREF:	pm_errorr
		extrn __imp_pm_freerow:dword ; DATA XREF: pm_freerowr
		extrn __imp_pm_message:dword ; DATA XREF: pm_messager
		extrn __imp_pm_openr:dword ; DATA XREF:	pm_openrr
		extrn __imp_pnm_allocpamrow:dword ; DATA XREF: pnm_allocpamrowr
		extrn __imp_pnm_init:dword ; DATA XREF:	pnm_initr
		extrn __imp_pnm_writepaminit:dword ; DATA XREF:	pnm_writepaminitr
		extrn __imp_pnm_writepamrow:dword ; DATA XREF: pnm_writepamrowr
		extrn __imp_ppm_parsecolor:dword ; DATA	XREF: ppm_parsecolorr



		end start
