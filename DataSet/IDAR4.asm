

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\column.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 000012C0 (   4800.)
; Section size in file		: 00001400 (   5120.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		and	esp, 0FFFFFFF0h
		mov	eax, ds:dword_405000
		test	eax, eax
		jz	short loc_401013
		int	3		; Trap to Debugger

loc_401013:				; CODE XREF: start+10j
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_401840
		call	sub_401E50
		leave
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401050	proc near		; CODE XREF: sub_401840+263p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, ds:dword_405040
		mov	ebx, ds:dword_405060
		jmp	short loc_401097
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401066:				; CODE XREF: sub_401050+4Bj
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+18h+var_14], eax
		mov	eax, [esi]
		add	esi, 4
		mov	[esp+18h+var_18], eax
		call	fputs
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+18h+var_18], 0Ah
		mov	[esp+18h+var_14], eax
		call	putc

loc_401097:				; CODE XREF: sub_401050+14j
		dec	ebx
		cmp	ebx, 0FFFFFFFFh
		jnz	short loc_401066
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_401050	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4010B0	proc near		; CODE XREF: sub_401840+25Cp

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ecx, ds:dword_405030
		mov	edx, dword_403008
		add	ecx, 8
		mov	eax, edx
		and	ecx, 0FFFFFFF8h
		cdq
		idiv	ecx
		mov	ds:dword_405030, ecx
		test	eax, eax
		mov	[ebp+var_18], eax
		jnz	short loc_4010E4
		mov	[ebp+var_18], 1

loc_4010E4:				; CODE XREF: sub_4010B0+2Bj
		mov	[ebp+var_20], 0
		mov	edx, ds:dword_405060
		mov	eax, edx
		cdq
		idiv	[ebp+var_18]
		cmp	edx, 1
		sbb	eax, 0FFFFFFFFh
		cmp	[ebp+var_20], eax
		mov	[ebp+var_1C], eax
		jge	loc_4011E6

loc_401109:				; CODE XREF: sub_4010B0+131j
		mov	[ebp+var_14], 0
		mov	eax, [ebp+var_18]
		mov	esi, ecx
		cmp	[ebp+var_14], eax
		mov	[ebp+var_10], 0
		mov	edi, [ebp+var_20]
		jge	loc_4011B8
		nop
		lea	esi, [esi+0]

loc_401130:				; CODE XREF: sub_4010B0+102j
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+28h+var_24], eax
		mov	eax, ds:dword_405040
		mov	eax, [eax+edi*4]
		mov	[esp+28h+var_28], eax
		call	fputs
		mov	eax, ds:dword_405040
		mov	eax, [eax+edi*4]
		mov	[esp+28h+var_28], eax
		call	strlen
		add	[ebp+var_10], eax
		mov	edx, [ebp+var_1C]
		add	edi, edx
		cmp	edi, ds:dword_405060
		jge	short loc_4011B8
		mov	ebx, [ebp+var_10]
		add	ebx, 8
		and	ebx, 0FFFFFFF8h
		cmp	ebx, esi
		jg	short loc_4011A2
		lea	esi, [esi+0]

loc_401180:				; CODE XREF: sub_4010B0+F0j
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+28h+var_28], 9
		mov	[esp+28h+var_24], eax
		call	putc
		mov	[ebp+var_10], ebx
		add	ebx, 8
		cmp	ebx, esi
		jle	short loc_401180

loc_4011A2:				; CODE XREF: sub_4010B0+C7j
		inc	[ebp+var_14]
		mov	eax, ds:dword_405030
		add	esi, eax
		mov	eax, [ebp+var_18]
		cmp	[ebp+var_14], eax
		jl	loc_401130

loc_4011B8:				; CODE XREF: sub_4010B0+72j
					; sub_4010B0+BAj
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+28h+var_28], 0Ah
		mov	[esp+28h+var_24], eax
		call	putc
		inc	[ebp+var_20]
		mov	eax, [ebp+var_1C]
		cmp	[ebp+var_20], eax
		jge	short loc_4011E6
		mov	ecx, ds:dword_405030
		jmp	loc_401109
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4011E6:				; CODE XREF: sub_4010B0+53j
					; sub_4010B0+129j
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_4010B0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4011F0	proc near		; CODE XREF: sub_401840+219p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		xor	esi, esi
		push	ebx
		sub	esp, 1Ch
		mov	ecx, ds:dword_405030
		mov	[ebp+var_10], 0
		mov	edx, dword_403008
		add	ecx, 8
		mov	eax, edx
		and	ecx, 0FFFFFFF8h
		cdq
		idiv	ecx
		mov	edx, ds:dword_405040
		mov	edi, ecx
		mov	ds:dword_405030, ecx
		mov	[ebp+var_14], edx
		mov	[ebp+var_18], eax
		lea	esi, [esi+0]

loc_401230:				; CODE XREF: sub_4011F0+BDj
					; sub_4011F0+EAj
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+28h+var_24], eax
		mov	edx, [ebp+var_14]
		mov	eax, [edx]
		mov	[esp+28h+var_28], eax
		call	fputs
		mov	edx, [ebp+var_14]
		mov	eax, [edx]
		mov	[esp+28h+var_28], eax
		call	strlen
		add	esi, eax
		mov	eax, ds:dword_405060
		dec	eax
		mov	ds:dword_405060, eax
		test	eax, eax
		jz	short loc_4012DF
		inc	[ebp+var_10]
		mov	eax, [ebp+var_18]
		cmp	[ebp+var_10], eax
		jz	short loc_4012AF
		lea	ebx, [esi+8]
		and	ebx, 0FFFFFFF8h
		cmp	ebx, edi
		jg	short loc_4012A1
		lea	esi, [esi+0]

loc_401280:				; CODE XREF: sub_4011F0+AFj
		call	__getreent
		mov	eax, [eax+8]
		mov	esi, ebx
		lea	ebx, [ebx+8]
		mov	[esp+28h+var_28], 9
		mov	[esp+28h+var_24], eax
		call	putc
		cmp	ebx, edi
		jle	short loc_401280

loc_4012A1:				; CODE XREF: sub_4011F0+8Aj
		add	[ebp+var_14], 4
		mov	ecx, ds:dword_405030
		add	edi, ecx
		jmp	short loc_401230
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4012AF:				; CODE XREF: sub_4011F0+80j
		mov	[ebp+var_10], 0
		mov	edi, ds:dword_405030
		xor	esi, esi
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+28h+var_28], 0Ah
		mov	[esp+28h+var_24], eax
		call	putc
		add	[ebp+var_14], 4
		jmp	loc_401230
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4012DF:				; CODE XREF: sub_4011F0+75j
		test	esi, esi
		jnz	short loc_4012EB
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4012EB:				; CODE XREF: sub_4011F0+F1j
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+28h+var_28], 0Ah
		mov	[esp+28h+var_24], eax
		call	putc
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_4011F0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401310	proc near		; CODE XREF: sub_401360+159p
					; sub_401530+17p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		mov	[esp+18h+var_18], esi
		call	malloc
		test	eax, eax
		mov	ebx, eax
		jz	short loc_40134B

loc_40132D:				; CODE XREF: sub_401310+47j
		mov	[esp+18h+var_10], esi
		xor	esi, esi
		mov	[esp+18h+var_14], esi
		mov	[esp+18h+var_18], ebx
		call	memset
		mov	eax, ebx
		mov	esi, [ebp+var_4]
		mov	ebx, [ebp+var_8]
		mov	esp, ebp
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40134B:				; CODE XREF: sub_401310+1Bj
		mov	[esp+18h+var_18], 1
		call	sub_401AB0
		jmp	short loc_40132D
sub_401310	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401360	proc near		; CODE XREF: sub_401840+11Cp
					; sub_401840+1F7p

var_838		= dword	ptr -838h
var_834		= dword	ptr -834h
var_830		= dword	ptr -830h
var_828		= dword	ptr -828h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 82Ch
		mov	eax, ds:dword_405040
		mov	edi, [ebp+arg_0]
		test	eax, eax
		jz	loc_4014A8

loc_40137C:				; CODE XREF: sub_401360+163j
		lea	esi, [ebp+var_828]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401390:				; CODE XREF: sub_401360+76j
					; sub_401360+84j ...
		mov	[esp+838h+var_830], edi
		mov	eax, 801h
		mov	[esp+838h+var_834], eax
		mov	[esp+838h+var_838], esi
		call	fgets
		test	eax, eax
		jz	loc_401492

loc_4013AD:				; CODE XREF: sub_401360+12Cj
		movzx	edx, byte ptr [ebp+var_828]
		mov	ecx, esi
		test	dl, dl
		jz	loc_4014A0
		mov	ebx, ds:_ctype_
		movsx	eax, dl
		test	byte ptr [ebx+eax+1], 8
		jz	short loc_4013E2
		mov	esi, esi

loc_4013D0:				; CODE XREF: sub_401360+80j
		inc	ecx
		movzx	edx, byte ptr [ecx]
		test	dl, dl
		jz	short loc_401390
		movsx	eax, dl
		test	byte ptr [ebx+eax+1], 8
		jnz	short loc_4013D0

loc_4013E2:				; CODE XREF: sub_401360+6Cj
					; sub_401360+143j
		test	dl, dl
		jz	short loc_401390
		mov	[esp+838h+var_838], ecx
		mov	eax, 0Ah
		mov	[esp+838h+var_834], eax
		call	strchr
		test	eax, eax
		jz	loc_401504
		mov	byte ptr [eax],	0
		mov	ecx, esi
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401410:				; CODE XREF: sub_401360+C5j
		mov	eax, [ecx]
		add	ecx, 4
		lea	edx, [eax-1010101h]
		not	eax
		and	edx, eax
		and	edx, 80808080h
		jz	short loc_401410
		test	edx, 8080h
		jnz	short loc_401435
		shr	edx, 10h
		add	ecx, 2

loc_401435:				; CODE XREF: sub_401360+CDj
		add	dl, dl
		sbb	ecx, 3
		sub	ecx, esi
		cmp	ds:dword_405030, ecx
		jge	short loc_40144A
		mov	ds:dword_405030, ecx

loc_40144A:				; CODE XREF: sub_401360+E2j
		mov	eax, ds:dword_405060
		cmp	eax, ds:dword_405010
		jz	short loc_4014C8

loc_401457:				; CODE XREF: sub_401360+18Dj
					; sub_401360+19Fj
		mov	[esp+838h+var_838], esi
		call	strdup
		mov	edx, ds:dword_405060
		mov	ecx, ds:dword_405040
		mov	[ecx+edx*4], eax
		inc	edx
		mov	eax, 801h
		mov	ds:dword_405060, edx
		mov	[esp+838h+var_830], edi
		mov	[esp+838h+var_834], eax
		mov	[esp+838h+var_838], esi
		call	fgets
		test	eax, eax
		jnz	loc_4013AD

loc_401492:				; CODE XREF: sub_401360+47j
		add	esp, 82Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4014A0:				; CODE XREF: sub_401360+58j
		movzx	edx, byte ptr [esi]
		jmp	loc_4013E2
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4014A8:				; CODE XREF: sub_401360+16j
		mov	[esp+838h+var_838], 0FA0h
		mov	eax, 3E8h
		mov	ds:dword_405010, eax
		call	sub_401310
		mov	ds:dword_405040, eax
		jmp	loc_40137C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4014C8:				; CODE XREF: sub_401360+F5j
		add	eax, 3E8h
		mov	ds:dword_405010, eax
		shl	eax, 2
		mov	[esp+838h+var_834], eax
		mov	eax, ds:dword_405040
		mov	[esp+838h+var_838], eax
		call	realloc
		mov	ds:dword_405040, eax
		test	eax, eax
		jnz	loc_401457
		mov	[esp+838h+var_838], 1
		call	sub_401AB0
		jmp	loc_401457
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401504:				; CODE XREF: sub_401360+99j
		mov	[esp+838h+var_838], offset aLineTooLong	; "line	too long"
		call	libintl_gettext
		mov	[esp+838h+var_838], eax
		call	sub_401DD0
		mov	eax, 1
		mov	ds:dword_405050, eax
		jmp	loc_401390
sub_401360	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401530	proc near		; CODE XREF: sub_401840+23Bp

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	eax, ds:dword_405060
		lea	eax, [eax+eax*2]
		shl	eax, 2
		mov	[esp+48h+var_48], eax
		call	sub_401310
		mov	[ebp+var_14], eax
		mov	[ebp+var_28], eax
		mov	[ebp+var_24], 19h
		mov	[esp+48h+var_48], 64h
		call	sub_401310
		mov	[ebp+var_2C], eax
		mov	[esp+48h+var_48], 64h
		call	sub_401310
		mov	[ebp+var_20], eax
		xor	edx, edx
		mov	eax, ds:dword_405040
		cmp	edx, ds:dword_405060
		mov	[ebp+var_18], 0
		mov	[ebp+var_1C], eax
		jge	loc_401775

loc_401594:				; CODE XREF: sub_401530+176j
		mov	[ebp+var_30], 64h
		mov	ecx, [ebp+var_1C]
		xor	esi, esi
		mov	eax, [ecx]
		mov	ebx, eax
		test	eax, eax
		mov	edi, dword_403000
		jz	short loc_4015F2
		mov	esi, esi

loc_4015B0:				; CODE XREF: sub_401530+C0j
		mov	[esp+48h+var_48], ebx
		mov	[esp+48h+var_44], edi
		call	strspn
		add	ebx, eax
		cmp	byte ptr [ebx],	0
		jnz	short loc_401610

loc_4015C3:				; CODE XREF: sub_401530+DCj
		mov	[ebp+var_10], 0
		xor	eax, eax

loc_4015CC:				; CODE XREF: sub_401530+C9j
		mov	edx, [ebp+var_2C]
		test	eax, eax
		mov	[edx+esi*4], eax
		jz	short loc_401637

loc_4015D6:				; CODE XREF: sub_401530+105j
		add	[ebp+var_30], 4
		inc	esi
		cmp	esi, [ebp+var_24]
		jz	loc_40177D
		xor	eax, eax

loc_4015E6:				; CODE XREF: sub_401530+2A5j
		test	eax, eax
		mov	ebx, eax
		mov	edi, dword_403000
		jnz	short loc_4015B0

loc_4015F2:				; CODE XREF: sub_401530+7Cj
		mov	ebx, [ebp+var_10]
		xor	eax, eax
		test	ebx, ebx
		jz	short loc_4015CC
		mov	[esp+48h+var_48], ebx
		mov	[esp+48h+var_44], edi
		call	strspn
		add	ebx, eax
		cmp	byte ptr [ebx],	0
		jz	short loc_4015C3
		mov	esi, esi

loc_401610:				; CODE XREF: sub_401530+91j
		mov	[esp+48h+var_44], edi
		mov	[esp+48h+var_48], ebx
		call	strpbrk
		test	eax, eax
		jz	loc_4017DA
		mov	byte ptr [eax],	0
		inc	eax
		mov	[ebp+var_10], eax
		mov	eax, ebx

loc_40162D:				; CODE XREF: sub_401530+2B3j
		mov	edx, [ebp+var_2C]
		test	eax, eax
		mov	[edx+esi*4], eax
		jnz	short loc_4015D6

loc_401637:				; CODE XREF: sub_401530+A4j
		lea	ebx, ds:0[esi*4]
		mov	[esp+48h+var_48], ebx
		call	sub_401310
		mov	ecx, [ebp+var_14]
		mov	[ecx], eax
		mov	[esp+48h+var_48], ebx
		call	sub_401310
		mov	ebx, eax
		mov	eax, [ebp+var_14]
		mov	[eax+4], esi
		dec	esi
		mov	[eax+8], ebx
		jns	short loc_401669
		jmp	short loc_401693
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401663:				; CODE XREF: sub_401530+161j
		mov	edx, [ebp+var_14]
		mov	ebx, [edx+8]

loc_401669:				; CODE XREF: sub_401530+12Fj
		mov	ecx, [ebp+var_14]
		mov	eax, [ecx]
		mov	ecx, [ebp+var_2C]
		mov	edx, [ecx+esi*4]
		mov	[eax+esi*4], edx
		mov	eax, [ecx+esi*4]
		mov	[esp+48h+var_48], eax
		call	strlen
		mov	[ebx+esi*4], eax
		mov	edx, [ebp+var_20]
		cmp	eax, [edx+esi*4]
		jle	short loc_401690
		mov	[edx+esi*4], eax

loc_401690:				; CODE XREF: sub_401530+15Bj
		dec	esi
		jns	short loc_401663

loc_401693:				; CODE XREF: sub_401530+131j
		inc	[ebp+var_18]
		mov	eax, ds:dword_405060
		add	[ebp+var_1C], 4
		add	[ebp+var_14], 0Ch
		cmp	[ebp+var_18], eax
		jl	loc_401594
		mov	[ebp+var_18], 0
		mov	ecx, [ebp+var_28]
		cmp	[ebp+var_18], eax
		mov	[ebp+var_14], ecx
		jge	loc_401775

loc_4016C2:				; CODE XREF: sub_401530+23Fj
		mov	edx, [ebp+var_14]
		xor	esi, esi
		mov	eax, [edx+4]
		dec	eax
		cmp	eax, 0
		jle	short loc_40172B

loc_4016D0:				; CODE XREF: sub_401530+1F9j
		call	__getreent
		mov	eax, [eax+8]
		mov	ecx, [ebp+var_14]
		mov	[esp+48h+var_44], eax
		mov	eax, [ecx]
		mov	eax, [eax+esi*4]
		mov	[esp+48h+var_48], eax
		call	fputs
		mov	eax, [ebp+var_14]
		mov	ecx, [ebp+var_20]
		mov	edx, [eax+8]
		mov	eax, [ecx+esi*4]
		mov	ecx, [edx+esi*4]
		sub	eax, ecx
		lea	ebx, [eax+2]
		jmp	short loc_40171B
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401702:				; CODE XREF: sub_401530+1EDj
		call	__getreent
		mov	eax, [eax+8]
		dec	ebx
		mov	[esp+48h+var_48], 20h
		mov	[esp+48h+var_44], eax
		call	putc

loc_40171B:				; CODE XREF: sub_401530+1D0j
		test	ebx, ebx
		jg	short loc_401702
		mov	edx, [ebp+var_14]
		inc	esi
		mov	eax, [edx+4]
		dec	eax
		cmp	eax, esi
		jg	short loc_4016D0

loc_40172B:				; CODE XREF: sub_401530+19Ej
		call	__getreent
		mov	eax, [eax+8]
		mov	ecx, [ebp+var_14]
		mov	[esp+48h+var_44], eax
		mov	eax, [ecx]
		mov	eax, [eax+esi*4]
		mov	[esp+48h+var_48], eax
		call	fputs
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+48h+var_48], 0Ah
		mov	[esp+48h+var_44], eax
		call	putc
		inc	[ebp+var_18]
		add	[ebp+var_14], 0Ch
		mov	eax, [ebp+var_18]
		cmp	eax, ds:dword_405060
		jl	loc_4016C2

loc_401775:				; CODE XREF: sub_401530+5Ej
					; sub_401530+18Cj
		add	esp, 3Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40177D:				; CODE XREF: sub_401530+AEj
		mov	eax, [ebp+var_30]
		mov	edx, [ebp+var_2C]
		mov	[esp+48h+var_44], eax
		mov	[esp+48h+var_48], edx
		call	realloc
		mov	[ebp+var_2C], eax
		test	eax, eax
		jz	short loc_4017E8
		mov	ecx, [ebp+var_30]
		mov	eax, [ebp+var_20]
		mov	[esp+48h+var_44], ecx
		mov	[esp+48h+var_48], eax
		call	realloc
		mov	[ebp+var_20], eax
		test	eax, eax
		jz	short loc_4017E8

loc_4017AF:				; CODE XREF: sub_401530+2C4j
		mov	edx, [ebp+var_24]
		mov	edi, 64h
		xor	ebx, ebx
		mov	[esp+48h+var_40], edi
		mov	ecx, [ebp+var_20]
		mov	[esp+48h+var_44], ebx
		lea	eax, [ecx+edx*4]
		mov	[esp+48h+var_48], eax
		call	memset
		add	[ebp+var_24], 19h
		xor	eax, eax
		jmp	loc_4015E6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4017DA:				; CODE XREF: sub_401530+EEj
		mov	[ebp+var_10], 0
		mov	eax, ebx
		jmp	loc_40162D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4017E8:				; CODE XREF: sub_401530+264j
					; sub_401530+27Dj
		mov	[esp+48h+var_48], 1
		call	sub_401AB0
		jmp	short loc_4017AF
sub_401530	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401800	proc near		; CODE XREF: sub_401840+E2p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	[esp+18h+var_18], offset aUsageColumnTxC ; "usage: column [-tx]	[-c columns] [file "...
		call	libintl_gettext
		mov	ebx, eax
		call	__getreent
		mov	[esp+18h+var_14], ebx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	fprintf
		mov	[esp+18h+var_18], 1
		call	exit
		lea	esi, [esi+0]
		lea	edi, [edi+0]
sub_401800	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401840	proc near		; DATA XREF: start+33o

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	eax, 10h
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch
		mov	ebx, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		and	esp, 0FFFFFFF0h
		call	sub_401E20
		call	__main
		mov	[esp+38h+var_38], 0
		mov	eax, offset unk_40403D
		mov	edi, 5401h
		mov	[esp+38h+var_34], eax
		call	setlocale
		mov	[esp+38h+var_38], offset aCygutils ; "cygutils"
		mov	eax, offset aUsrShareLocale ; "/usr/share/locale"
		mov	[esp+38h+var_34], eax
		call	libintl_bindtextdomain
		mov	[esp+38h+var_38], offset aCygutils ; "cygutils"
		call	libintl_textdomain
		mov	[esp+38h+var_34], edi
		lea	eax, [ebp+var_18]
		mov	[esp+38h+var_30], eax
		mov	[esp+38h+var_38], 1
		call	ioctl
		inc	eax
		jz	short loc_4018C3
		movzx	eax, word ptr [ebp+var_18+2]
		test	ax, ax
		jnz	loc_4019C5

loc_4018C3:				; CODE XREF: sub_401840+74j
		mov	[esp+38h+var_38], offset aColumns ; "COLUMNS"
		call	getenv
		test	eax, eax
		jz	short loc_4018E0
		mov	[esp+38h+var_38], eax
		call	atoi

loc_4018DB:				; CODE XREF: sub_401840+188j
		mov	dword_403008, eax

loc_4018E0:				; CODE XREF: sub_401840+91j
		mov	[ebp+var_1C], 0
		xor	edi, edi
		lea	esi, [esi+0]

loc_4018F0:				; CODE XREF: sub_401840+1A5j
					; sub_401840+1B5j ...
		mov	[esp+38h+var_34], esi
		mov	ecx, offset aCSTx ; "c:s:tx"
		mov	[esp+38h+var_30], ecx
		mov	[esp+38h+var_38], ebx
		call	getopt
		cmp	eax, 0FFFFFFFFh
		jz	short loc_401941

loc_40190A:				; CODE XREF: sub_401840+FFj
		cmp	eax, 73h
		jz	loc_401A13
		jg	loc_4019D0
		cmp	eax, 63h
		jz	loc_4019FA

loc_401922:				; CODE XREF: sub_401840+198j
		call	sub_401800
		mov	[esp+38h+var_34], esi
		mov	ecx, offset aCSTx ; "c:s:tx"
		mov	[esp+38h+var_30], ecx
		mov	[esp+38h+var_38], ebx
		call	getopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_40190A

loc_401941:				; CODE XREF: sub_401840+C8j
		mov	eax, ds:optind
		mov	eax, [eax]
		lea	esi, [esi+eax*4]
		mov	eax, [esi]
		test	eax, eax
		jnz	short loc_40196F
		jmp	loc_401A2C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401956:				; CODE XREF: sub_401840+144j
		mov	[esp+38h+var_38], eax
		add	esi, 4
		call	sub_401360
		mov	[esp+38h+var_38], ebx
		call	fclose
		mov	eax, [esi]
		test	eax, eax
		jz	short loc_4019AB

loc_40196F:				; CODE XREF: sub_401840+10Fj
					; sub_401840+169j
		mov	[esp+38h+var_38], eax
		mov	edx, offset aR	; "r"
		mov	[esp+38h+var_34], edx
		call	_fopen64
		test	eax, eax
		mov	ebx, eax
		jnz	short loc_401956
		mov	eax, [esi]
		add	esi, 4
		mov	[esp+38h+var_38], offset aS ; "%s"
		mov	[esp+38h+var_34], eax
		call	sub_401D40
		mov	eax, 1
		mov	ds:dword_405050, eax
		mov	eax, [esi]
		test	eax, eax
		jnz	short loc_40196F

loc_4019AB:				; CODE XREF: sub_401840+12Dj
					; sub_401840+1FCj
		mov	eax, ds:dword_405060
		test	eax, eax
		jnz	loc_401A41

loc_4019B8:				; CODE XREF: sub_401840+236j
					; sub_401840+254j
		mov	eax, ds:dword_405050
		mov	[esp+38h+var_38], eax
		call	exit

loc_4019C5:				; CODE XREF: sub_401840+7Dj
		movzx	eax, ax
		jmp	loc_4018DB
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4019D0:				; CODE XREF: sub_401840+D3j
		cmp	eax, 74h
		jz	short loc_4019F0
		cmp	eax, 78h
		jnz	loc_401922
		mov	[ebp+var_1C], 1
		jmp	loc_4018F0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_4019F0:				; CODE XREF: sub_401840+193j
		mov	edi, 1
		jmp	loc_4018F0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019FA:				; CODE XREF: sub_401840+DCj
		mov	eax, ds:optarg
		mov	eax, [eax]
		mov	[esp+38h+var_38], eax
		call	atoi
		mov	dword_403008, eax
		jmp	loc_4018F0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A13:				; CODE XREF: sub_401840+CDj
		mov	eax, ds:optarg
		mov	eax, [eax]
		mov	[esp+38h+var_38], eax
		call	strdup
		mov	dword_403000, eax
		jmp	loc_4018F0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A2C:				; CODE XREF: sub_401840+111j
		call	__getreent
		mov	eax, [eax+4]
		mov	[esp+38h+var_38], eax
		call	sub_401360
		jmp	loc_4019AB
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A41:				; CODE XREF: sub_401840+172j
		test	edi, edi
		jnz	short loc_401A7B
		mov	eax, dword_403008
		cmp	ds:dword_405030, eax
		jge	short loc_401AA3
		mov	eax, [ebp+var_1C]
		test	eax, eax
		jz	short loc_401A9C
		call	sub_4011F0

loc_401A5E:				; CODE XREF: sub_401840+240j
					; sub_401840+261j ...
		call	__getreent
		mov	eax, [eax+8]
		test	byte ptr [eax+0Ch], 40h
		jz	short loc_401A82

loc_401A6C:				; CODE XREF: sub_401840+25Aj
		mov	eax, 1
		mov	ds:dword_405050, eax
		jmp	loc_4019B8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A7B:				; CODE XREF: sub_401840+203j
		call	sub_401530
		jmp	short loc_401A5E
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A82:				; CODE XREF: sub_401840+22Aj
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+38h+var_38], eax
		call	fclose
		test	eax, eax
		jz	loc_4019B8
		jmp	short loc_401A6C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A9C:				; CODE XREF: sub_401840+217j
		call	sub_4010B0
		jmp	short loc_401A5E
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401AA3:				; CODE XREF: sub_401840+210j
		call	sub_401050
		jmp	short loc_401A5E
sub_401840	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401AB0	proc near		; CODE XREF: sub_401310+42p
					; sub_401360+19Ap ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		call	__errno
		mov	eax, [eax]
		mov	[esp+18h+var_18], eax
		call	strerror
		mov	ebx, eax
		call	__getreent
		mov	[esp+18h+var_C], ebx
		mov	edx, dword_403010
		mov	[esp+18h+var_10], edx
		mov	edx, offset aSS	; "%s: %s\n"
		mov	[esp+18h+var_14], edx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	fprintf
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		call	exit
		lea	esi, [esi+0]
sub_401AB0	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401B00	proc near		; CODE XREF: .text:00401BDAp

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [ebp+arg_4]
		call	__errno
		mov	esi, [eax]
		call	__getreent
		mov	edx, dword_403010
		mov	[esp+18h+var_10], edx
		mov	edx, offset aS_0 ; "%s:	"
		mov	[esp+18h+var_14], edx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	fprintf
		test	ebx, ebx
		jz	short loc_401B3E
		cmp	byte ptr [ebx],	0
		jnz	short loc_401B70

loc_401B3E:				; CODE XREF: sub_401B00+37j
					; sub_401B00+B5j
		mov	[esp+18h+var_18], esi
		call	strerror
		mov	ebx, eax
		call	__getreent
		mov	[esp+18h+var_10], ebx
		mov	ecx, offset aS_1 ; "%s\n"
		mov	[esp+18h+var_14], ecx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	fprintf
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		call	exit

loc_401B70:				; CODE XREF: sub_401B00+3Cj
		call	__getreent
		mov	[esp+18h+var_14], ebx
		mov	edx, [ebp+arg_8]
		mov	ebx, 1
		mov	[esp+18h+var_10], edx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	vfprintf
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], offset asc_404085 ; ": "
		mov	[esp+18h+var_C], eax
		mov	eax, 2
		mov	[esp+18h+var_10], eax
		call	fwrite
		jmp	short loc_401B3E
sub_401B00	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+10h]
		sub	esp, 18h
		mov	[esp+8], eax
		mov	eax, [ebp+0Ch]
		mov	[esp+4], eax
		mov	eax, [ebp+8]
		mov	[esp], eax
		call	sub_401B00
		leave
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		jmp	short sub_401BF0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401BF0	proc near		; CODE XREF: .text:00401BE1j
					; sub_401BF0+8Ap

var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_4]
		call	__getreent
		mov	edx, dword_403010
		mov	ecx, offset aS_0 ; "%s:	"
		mov	[esp+18h+var_14], ecx
		mov	[esp+18h+var_10], edx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	fprintf
		test	ebx, ebx
		jz	short loc_401C3C
		call	__getreent
		mov	[esp+18h+var_14], ebx
		mov	edx, [ebp+arg_8]
		mov	[esp+18h+var_10], edx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	vfprintf

loc_401C3C:				; CODE XREF: sub_401BF0+2Fj
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], 0Ah
		mov	[esp+18h+var_14], eax
		call	fputc
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		call	exit
		nop
		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+arg_8]
		sub	esp, 18h
		mov	[esp+34h+var_2C], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+34h+var_30], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+34h+var_34], eax
		call	sub_401BF0
		leave
		retn
sub_401BF0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		jmp	short sub_401C90
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401C90	proc near		; CODE XREF: .text:00401C81j
					; sub_401D40+13p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, [ebp+arg_0]
		call	__errno
		mov	ebx, [eax]
		call	__getreent
		mov	edx, dword_403010
		mov	[esp+18h+var_10], edx
		mov	edx, offset aS_0 ; "%s:	"
		mov	[esp+18h+var_14], edx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	fprintf
		test	esi, esi
		jz	short loc_401D0E
		call	__getreent
		mov	[esp+18h+var_14], esi
		mov	edx, [ebp+arg_4]
		mov	esi, 1
		mov	[esp+18h+var_10], edx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	vfprintf
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_14], esi
		mov	[esp+18h+var_18], offset asc_404085 ; ": "
		mov	[esp+18h+var_C], eax
		mov	eax, 2
		mov	[esp+18h+var_10], eax
		call	fwrite

loc_401D0E:				; CODE XREF: sub_401C90+37j
		mov	[esp+18h+var_18], ebx
		call	strerror
		mov	ebx, eax
		call	__getreent
		mov	[esp+18h+var_10], ebx
		mov	ebx, offset aS_1 ; "%s\n"
		mov	[esp+18h+var_14], ebx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	fprintf
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_401C90	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401D40	proc near		; CODE XREF: sub_401840+156p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+arg_4]
		sub	esp, 8
		mov	[esp+8+var_4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+8+var_8], eax
		call	sub_401C90
		leave
		retn
sub_401D40	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401D60	proc near		; CODE XREF: sub_401DD0+13p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		call	__getreent
		mov	edx, dword_403010
		mov	ecx, offset aS_0 ; "%s:	"
		mov	[esp+18h+var_14], ecx
		mov	[esp+18h+var_10], edx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	fprintf
		test	ebx, ebx
		jz	short loc_401DAD
		call	__getreent
		mov	[esp+18h+var_10], esi
		mov	[esp+18h+var_14], ebx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	vfprintf

loc_401DAD:				; CODE XREF: sub_401D60+33j
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[ebp+arg_0], 0Ah
		mov	[ebp+arg_4], eax
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		jmp	fputc
sub_401D60	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401DD0	proc near		; CODE XREF: sub_401360+1B3p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+arg_4]
		sub	esp, 8
		mov	[esp+8+var_4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+8+var_8], eax
		call	sub_401D60
		leave
		retn
sub_401DD0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8
; [00000006 BYTES: COLLAPSED FUNCTION libintl_gettext. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION libintl_bindtextdomain. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION libintl_textdomain. PRESS	KEYPAD "+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401E20	proc near		; CODE XREF: sub_401840+17p
		push	ecx
		mov	ecx, esp
		add	ecx, 8

loc_401E26:				; CODE XREF: sub_401E20+1Bj
		cmp	eax, 1000h
		jb	short loc_401E3D
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		jmp	short loc_401E26
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E3D:				; CODE XREF: sub_401E20+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		jmp	eax
sub_401E20	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401E50	proc near		; CODE XREF: start+3Ap

var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_C2		= dword	ptr -0C2h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		mov	[esp+18h+var_14], eax
		mov	[esp+18h+var_18], esi
		call	sub_402060
		sub	esp, 8
		test	eax, eax
		jz	short loc_401E81
		mov	[esp+18h+var_18], 0

loc_401E7B:				; CODE XREF: sub_401E50+56j
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)

loc_401E81:				; CODE XREF: sub_401E50+22j
		sub	esp, 0C0h
		lea	ebx, [esp+0D8h+var_C2+1]
		and	ebx, 0FFFFFFF0h
		mov	dword ptr [ebx], 0
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	sub_402060
		sub	esp, 8
		mov	[esp+0D8h+var_D8], ebx
		jmp	short loc_401E7B
sub_401E50	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memset. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fprintf. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strpbrk. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strspn. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strchr. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fgets. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION realloc. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION putc. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strlen. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fputs. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION exit. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fclose. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _fopen64.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getreent. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strdup. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION getopt. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION atoi. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION getenv. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ioctl. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION setlocale. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fputc. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fwrite. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION vfprintf.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __errno. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strerror.	PRESS KEYPAD "+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402060	proc near		; CODE XREF: sub_401E50+18p
					; sub_401E50+4Bp

var_18		= dword	ptr -18h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h	; lpModuleName
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_0]
		test	ebx, ebx
		jz	loc_40214A
		mov	dword ptr [ebx+4], 0A8h
		xor	eax, eax
		mov	ecx, 96h
		mov	dword ptr [ebx+8], 3EDh
		mov	dword ptr [ebx+0Ch], 13h
		mov	[ebx+80h], eax
		mov	[ebx+84h], ecx
		mov	dword ptr [ebx+2Ch], offset dword_4022B0
		mov	dword ptr [ebx+30h], offset dword_4022B8
		mov	dword ptr [ebx+14h], offset unk_405024
		mov	eax, ds:_impure_ptr
		mov	[ebx+10h], eax

loc_4020BB:				; CODE XREF: sub_402060+14Bj
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+0]
		mov	[ebx+28h], esi
		mov	dword ptr [ebx+48h], offset sub_402280
		mov	dword ptr [ebx+4Ch], offset sub_402270
		mov	dword ptr [ebx+50h], offset sub_402260
		mov	dword ptr [ebx+54h], offset sub_402250
		mov	dword ptr [ebx+24h], offset unk_405020
		mov	[ebx], eax
		mov	dword ptr [ebx+18h], offset malloc
		mov	dword ptr [ebx+1Ch], offset loc_402240
		mov	dword ptr [ebx+20h], offset realloc
		mov	dword ptr [ebx+44h], offset loc_402230
		mov	[esp+18h+var_18], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	dword ptr [ebx+34h], offset dword_403000
		mov	dword ptr [ebx+38h], offset unk_403020
		mov	dword ptr [ebx+3Ch], offset dword_405000
		mov	dword ptr [ebx+40h], 405090h
		call	sub_402200
		mov	eax, 1

loc_402141:				; CODE XREF: sub_402060+FDj
		lea	esp, [ebp+var_8]
		pop	ebx
		pop	esi
		pop	ebp
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40214A:				; CODE XREF: sub_402060+10j
		mov	[esp+18h+var_18], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_402141
		mov	dword ptr [edx+4], 0A8h
		mov	ebx, edx
		mov	eax, 96h
		mov	dword ptr [edx+8], 3EDh
		mov	dword ptr [edx+0Ch], 13h
		xor	edx, edx
		mov	[ebx+80h], edx
		mov	edx, [ebx+0A4h]
		mov	[ebx+84h], eax
		mov	dword ptr [ebx+2Ch], offset dword_4022B0
		mov	dword ptr [ebx+30h], offset dword_4022B8
		mov	dword ptr [ebx+14h], offset unk_405024
		mov	eax, ds:_impure_ptr
		mov	[eax], edx
		jmp	loc_4020BB
sub_402060	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:__imp__fopen64
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4021D0	proc near		; CODE XREF: sub_402200+1Fp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ebx, [ebp+arg_4]
		jmp	short loc_4021EC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4021E0:				; CODE XREF: sub_4021D0+1Ej
		mov	edx, [ecx+4]
		mov	eax, [ecx]
		add	ecx, 8
		add	edx, esi
		add	[edx], eax

loc_4021EC:				; CODE XREF: sub_4021D0+Ej
		cmp	ecx, ebx
		jb	short loc_4021E0
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_4021D0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402200	proc near		; CODE XREF: sub_402060+D7p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	edx, 400000h
		mov	ebp, esp
		mov	eax, offset unk_404090
		sub	esp, 0Ch
		mov	[esp+0Ch+var_4], edx
		mov	[esp+0Ch+var_8], eax
		mov	[esp+0Ch+var_C], offset	unk_404090
		call	sub_4021D0
		leave
		retn
sub_402200	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_402230:				; DATA XREF: sub_402060+A2o
		jmp	ds:calloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_402240:				; DATA XREF: sub_402060+94o
		jmp	ds:free
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402250	proc near		; DATA XREF: sub_402060+7Do
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402250	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402260	proc near		; DATA XREF: sub_402060+76o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402260	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402270	proc near		; DATA XREF: sub_402060+6Fo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402270	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402280	proc near		; DATA XREF: sub_402060+68o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402280	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
dword_4022B0	dd 0FFFFFFFFh, 0	; DATA XREF: sub_402060+3Eo
					; sub_402060+12Fo
dword_4022B8	dd 0FFFFFFFFh, 51h dup(0) ; DATA XREF: sub_402060+45o
					; sub_402060+136o
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 00000020 (	 32.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001800
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 403000h
dword_403000	dd 403004h		; DATA XREF: sub_401530+76r
					; sub_401530+BAr ...
		db    9	;
		db  20h	;
		db    0	;
		db    0	;
dword_403008	dd 50h			; DATA XREF: sub_4010B0+Fr
					; sub_4011F0+18r ...
		db    0	;
		db    0	;
		db    0	;
		db    0	;
dword_403010	dd 404070h		; DATA XREF: sub_401AB0+21r
					; sub_401B00+17r ...
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_403020	db    0	;		; DATA XREF: sub_402060+C2o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_data		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 00000090 (	144.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001A00
; Flags	40000040: Data Readable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 404000h
aLineTooLong	db 'line too long',0    ; DATA XREF: sub_401360+1A4o
		align 4
aUsageColumnTxC	db 'usage: column [-tx] [-c columns] [file ...]',0Ah,0
					; DATA XREF: sub_401800+7o
unk_40403D	db    0	;		; DATA XREF: sub_401840+28o
aCygutils	db 'cygutils',0         ; DATA XREF: sub_401840+3Bo
					; sub_401840+50o
aUsrShareLocale	db '/usr/share/locale',0 ; DATA XREF: sub_401840+42o
aColumns	db 'COLUMNS',0          ; DATA XREF: sub_401840+83o
aCSTx		db 'c:s:tx',0           ; DATA XREF: sub_401840+B4o
					; sub_401840+EBo
aR		db 'r',0                ; DATA XREF: sub_401840+132o
aS		db '%s',0               ; DATA XREF: sub_401840+14Bo
		align 4
aFoo		db 'foo',0
aSS		db '%s: %s',0Ah,0       ; DATA XREF: sub_401AB0+2Bo
aS_0		db '%s: ',0             ; DATA XREF: sub_401B00+21o
					; sub_401BF0+15o ...
aS_1		db '%s',0Ah,0           ; DATA XREF: sub_401B00+51o
					; sub_401C90+91o
asc_404085	db ': ',0               ; DATA XREF: sub_401B00+9Co
					; sub_401C90+65o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_404090	db    0	;		; DATA XREF: sub_402200+8o
					; sub_402200+18o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_rdata		ends

; Section 4. (virtual address 00005000)
; Virtual size			: 00000090 (	144.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 405000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_405000	dd ?			; DATA XREF: start+9r sub_402060+C9o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_405010	dd ?			; DATA XREF: sub_401360+EFr
					; sub_401360+154w ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_405020	db    ?	;		; DATA XREF: sub_402060+84o
		db    ?	;
		db    ?	;
		db    ?	;
unk_405024	db    ?	;		; DATA XREF: sub_402060+4Co
					; sub_402060+13Do
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_405030	dd ?			; DATA XREF: sub_4010B0+9r
					; sub_4010B0+20w ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_405040	dd ?			; DATA XREF: sub_401050+8r
					; sub_4010B0+8Cr ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_405050	dd ?			; DATA XREF: sub_401360+1BDw
					; sub_401840+160w ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_405060	dd ?			; DATA XREF: sub_401050+Er
					; sub_4010B0+3Br ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
_bss		ends

;
; Imports from cygwin1
;
; Section 5. (virtual address 00006000)
; Virtual size			: 00000498 (   1176.)
; Section size in file		: 00000600 (   1536.)
; Offset to raw	data for section: 00001C00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp___errno:dword ; DATA XREF: __errnor
		extrn __imp___getreent:dword ; DATA XREF: __getreentr
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn _ctype_:dword	; DATA XREF: sub_401360+5Er
		extrn __imp__fopen64:dword ; DATA XREF:	_fopen64r
					; .text:004021C0r
		extrn _impure_ptr:dword	; DATA XREF: sub_402060+53r
					; sub_402060+144r
; int __cdecl _imp_atoi(const char *)
		extrn __imp_atoi:dword	; DATA XREF: atoir
; void *__cdecl	calloc(size_t,size_t)
		extrn calloc:dword	; DATA XREF: .text:00402230r
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_401E50+2Br
					; .text:004021B0r
; void __cdecl _imp_exit(int)
		extrn __imp_exit:dword	; DATA XREF: exitr
		extrn __imp_fclose:dword ; DATA	XREF: fcloser
		extrn __imp_fgets:dword	; DATA XREF: fgetsr
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
		extrn __imp_fputc:dword	; DATA XREF: fputcr
		extrn __imp_fputs:dword	; DATA XREF: fputsr
; void __cdecl free(void *)
		extrn free:dword	; DATA XREF: .text:00402240r
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
; char *__cdecl	_imp_getenv(const char *)
		extrn __imp_getenv:dword ; DATA	XREF: getenvr
		extrn __imp_getopt:dword ; DATA	XREF: getoptr
		extrn __imp_ioctl:dword	; DATA XREF: ioctlr
; void *__cdecl	_imp_malloc(size_t)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; void *__cdecl	_imp_memset(void *,int,size_t)
		extrn __imp_memset:dword ; DATA	XREF: memsetr
		extrn optarg:dword	; DATA XREF: sub_401840+1BAr
					; sub_401840+1D3r
		extrn optind:dword	; DATA XREF: sub_401840+101r
		extrn __imp_putc:dword	; DATA XREF: putcr
; void *__cdecl	_imp_realloc(void *,size_t)
		extrn __imp_realloc:dword ; DATA XREF: reallocr
		extrn __imp_setlocale:dword ; DATA XREF: setlocaler
; char *__cdecl	_imp_strchr(const char *,int)
		extrn __imp_strchr:dword ; DATA	XREF: strchrr
; char *__cdecl	_imp_strdup(const char *)
		extrn __imp_strdup:dword ; DATA	XREF: strdupr
; char *__cdecl	_imp_strerror(int)
		extrn __imp_strerror:dword ; DATA XREF:	strerrorr
; size_t __cdecl _imp_strlen(const char	*)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; char *__cdecl	_imp_strpbrk(const char	*,const	char *)
		extrn __imp_strpbrk:dword ; DATA XREF: strpbrkr
; size_t __cdecl _imp_strspn(const char	*,const	char *)
		extrn __imp_strspn:dword ; DATA	XREF: strspnr
		extrn __imp_vfprintf:dword ; DATA XREF:	vfprintfr


;
; Imports from cygintl-3
;
		extrn __imp_libintl_bindtextdomain:dword
					; DATA XREF: libintl_bindtextdomainr
		extrn __imp_libintl_gettext:dword ; DATA XREF: libintl_gettextr
		extrn __imp_libintl_textdomain:dword ; DATA XREF: libintl_textdomainr


;
; Imports from KERNEL32
;
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr



		end start
