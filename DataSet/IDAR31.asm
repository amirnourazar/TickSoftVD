

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\outocp.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00000AF0 (   2800.)
; Section size in file		: 00000C00 (   3072.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		and	esp, 0FFFFFFF0h
		mov	eax, ds:dword_404000
		test	eax, eax
		jz	short loc_401013
		int	3		; Trap to Debugger

loc_401013:				; CODE XREF: start+10j
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_401650
		call	sub_4017C0
		mov	esp, ebp
		pop	ebp
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401050	proc near		; CODE XREF: sub_401080+27p
					; sub_4010C0+57p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		call	__getreent
		mov	edx, [ebp+arg_0]
		mov	[esp+8+var_4], edx
		mov	eax, [eax+0Ch]
		mov	[esp+8+var_8], eax
		call	fprintf
		mov	[esp+8+var_8], 1
		call	exit
		lea	esi, [esi+0]
sub_401050	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401080	proc near		; CODE XREF: sub_4010C0+14p
					; sub_4010C0+26p ...

var_8		= dword	ptr -8
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 4
		mov	eax, [ebp+arg_0]
		mov	[esp+8+var_8], eax
		call	getc
		cmp	eax, 0FFFFFFFFh
		mov	ebx, eax
		jz	short loc_4010A0
		pop	edx
		mov	eax, ebx
		pop	ebx
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4010A0:				; CODE XREF: sub_401080+17j
		mov	[esp+8+var_8], offset aUnexpectedEndO ;	"Unexpected end	of file\n"
		call	sub_401050
		pop	edx
		mov	eax, ebx
		pop	ebx
		pop	ebp
		retn
sub_401080	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4010C0	proc near		; CODE XREF: sub_401120+1Cp
					; sub_401120+79p ...

var_18		= dword	ptr -18h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, [ebp+arg_0]
		inc	ds:dword_404010
		mov	[esp+18h+var_18], esi
		call	sub_401080
		cmp	eax, 7Fh
		mov	ebx, eax
		jg	short loc_401110

loc_4010E0:				; CODE XREF: sub_4010C0+5Cj
		mov	[esp+18h+var_18], esi
		shl	ebx, 8
		call	sub_401080
		mov	[esp+18h+var_18], esi
		add	ebx, eax
		shl	ebx, 8
		call	sub_401080
		mov	[esp+18h+var_18], esi
		add	ebx, eax
		shl	ebx, 8
		call	sub_401080
		add	ebx, eax
		add	esp, 10h
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401110:				; CODE XREF: sub_4010C0+1Ej
		mov	[esp+18h+var_18], offset aFirstOctet127	; "first octet > 127"
		call	sub_401050
		jmp	short loc_4010E0
sub_4010C0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401120	proc near		; CODE XREF: sub_401650+D7p

var_378		= dword	ptr -378h
var_374		= dword	ptr -374h
var_370		= dword	ptr -370h
var_36C		= dword	ptr -36Ch
var_368		= dword	ptr -368h
var_364		= dword	ptr -364h
var_360		= dword	ptr -360h
var_35C		= dword	ptr -35Ch
var_358		= dword	ptr -358h
var_354		= dword	ptr -354h
var_344		= dword	ptr -344h
var_340		= dword	ptr -340h
var_33C		= dword	ptr -33Ch
var_338		= dword	ptr -338h
var_1A8		= dword	ptr -1A8h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, offset aCtp_no_tables3 ; "ctp_no_tables  :	%3x(%3d)\n"
		push	esi
		mov	esi, offset aCtp_length3x3d ; "ctp_length     :	%3x(%3d)\n"
		push	ebx
		sub	esp, 36Ch
		mov	eax, [ebp+arg_0]
		mov	[esp+378h+var_378], eax
		call	sub_4010C0
		mov	[ebp+var_340], eax
		call	__getreent
		mov	[esp+378h+var_374], esi
		mov	edx, [ebp+var_340]
		mov	[esp+378h+var_36C], edx
		mov	[esp+378h+var_370], edx
		mov	eax, [eax+8]
		mov	[esp+378h+var_378], eax
		call	fprintf
		mov	ebx, [ebp+var_340]
		call	__getreent
		sub	ebx, 7
		mov	[esp+378h+var_36C], ebx
		mov	[esp+378h+var_370], ebx
		mov	ebx, offset aReal_ctp_lengt ; "real_ctp_length:	%3x(%3d)\n"
		mov	[esp+378h+var_374], ebx
		mov	eax, [eax+8]
		mov	[esp+378h+var_378], eax
		call	fprintf
		mov	ecx, [ebp+arg_0]
		mov	[esp+378h+var_378], ecx
		call	sub_4010C0
		mov	ebx, eax
		call	__getreent
		mov	[esp+378h+var_36C], ebx
		mov	ecx, offset aCtp_input3x3d ; "ctp_input	     : %3x(%3d)\n"
		mov	[esp+378h+var_374], ecx
		mov	[esp+378h+var_370], ebx
		mov	eax, [eax+8]
		mov	[esp+378h+var_378], eax
		call	fprintf
		mov	eax, [ebp+arg_0]
		mov	[esp+378h+var_378], eax
		call	sub_4010C0
		mov	ebx, eax
		call	__getreent
		mov	[esp+378h+var_36C], ebx
		mov	edx, offset aCtp_output3x3d ; "ctp_output     :	%3x(%3d)\n"
		mov	[esp+378h+var_370], ebx
		mov	[esp+378h+var_374], edx
		mov	eax, [eax+8]
		mov	[esp+378h+var_378], eax
		call	fprintf
		mov	edx, [ebp+arg_0]
		mov	[esp+378h+var_378], edx
		call	sub_4010C0
		mov	esi, eax
		call	__getreent
		mov	[esp+378h+var_36C], esi
		mov	[esp+378h+var_370], esi
		mov	[esp+378h+var_374], edi
		mov	eax, [eax+8]
		mov	[esp+378h+var_378], eax
		call	fprintf
		mov	ecx, [ebp+arg_0]
		mov	[esp+378h+var_378], ecx
		call	sub_4010C0
		mov	ebx, eax
		call	__getreent
		mov	[esp+378h+var_36C], ebx
		mov	[esp+378h+var_370], ebx
		mov	ebx, offset aCtp_room_table ; "ctp_room_tables:	%3x(%3d)\n"
		mov	[esp+378h+var_374], ebx
		mov	eax, [eax+8]
		mov	[esp+378h+var_378], eax
		call	fprintf
		mov	eax, [ebp+arg_0]
		mov	[esp+378h+var_378], eax
		call	sub_4010C0
		mov	[ebp+var_344], eax
		call	__getreent
		mov	edx, [ebp+var_344]
		mov	ecx, offset aCtp_no_states3 ; "ctp_no_states  :	%3x(%3d)\n"
		mov	[esp+378h+var_374], ecx
		mov	[esp+378h+var_36C], edx
		mov	[esp+378h+var_370], edx
		mov	eax, [eax+8]
		mov	[esp+378h+var_378], eax
		call	fprintf
		mov	ecx, [ebp+arg_0]
		mov	[esp+378h+var_378], ecx
		call	sub_4010C0
		mov	ebx, eax
		call	__getreent
		mov	[esp+378h+var_36C], ebx
		mov	edx, offset aCtp_room_state ; "ctp_room_states:	%3x(%3d)\n\n"
		mov	[esp+378h+var_370], ebx
		mov	[esp+378h+var_374], edx
		mov	eax, [eax+8]
		mov	[esp+378h+var_378], eax
		call	fprintf
		cmp	esi, 63h
		jg	loc_401635

loc_4012B5:				; CODE XREF: sub_401120+521j
		cmp	[ebp+var_344], 63h
		jg	loc_401624

loc_4012C2:				; CODE XREF: sub_401120+510j
		test	esi, esi
		jz	loc_40140E
		xor	eax, eax
		mov	[ebp+var_33C], eax
		cmp	[ebp+var_33C], esi
		jge	short loc_401336

loc_4012DA:				; CODE XREF: sub_401120+214j
		mov	eax, [ebp+arg_0]
		mov	edi, offset aTable2x2d3x3dE ; "Table %2x(%2d): %3x(%3d)entries\n"
		mov	[esp+378h+var_378], eax
		call	sub_4010C0
		mov	edx, [ebp+var_33C]
		mov	[ebp+edx*4+var_1A8], eax
		call	__getreent
		mov	[esp+378h+var_374], edi
		mov	ecx, [ebp+var_33C]
		mov	edx, [ebp+ecx*4+var_1A8]
		mov	[esp+378h+var_36C], ecx
		mov	[esp+378h+var_370], ecx
		mov	[esp+378h+var_364], edx
		mov	[esp+378h+var_368], edx
		mov	eax, [eax+8]
		mov	[esp+378h+var_378], eax
		call	fprintf
		inc	[ebp+var_33C]
		cmp	[ebp+var_33C], esi
		jl	short loc_4012DA

loc_401336:				; CODE XREF: sub_401120+1B8j
		call	__getreent
		mov	eax, [eax+8]
		xor	ebx, ebx
		mov	[esp+378h+var_378], 0Ah
		mov	[esp+378h+var_374], eax
		call	fputc
		mov	[ebp+var_33C], ebx
		cmp	[ebp+var_33C], esi
		jge	loc_4013F6
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401370:				; CODE XREF: sub_401120+2D0j
		mov	eax, [ebp+var_33C]
		xor	edi, edi
		mov	ecx, [ebp+eax*4+var_1A8]
		test	ecx, ecx
		jle	short loc_4013E4
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401390:				; CODE XREF: sub_401120+2C2j
		mov	edx, [ebp+arg_0]
		mov	[esp+378h+var_378], edx
		call	sub_4010C0
		mov	ebx, eax
		call	__getreent
		mov	[esp+378h+var_364], edi
		mov	ecx, [ebp+var_33C]
		mov	edx, offset aTable2x2dEntry ; "Table %2x(%2d), entry %3x(%3d): %2x(%3d"...
		mov	[esp+378h+var_368], edi
		inc	edi
		mov	[esp+378h+var_35C], ebx
		mov	[esp+378h+var_360], ebx
		mov	[esp+378h+var_36C], ecx
		mov	[esp+378h+var_370], ecx
		mov	[esp+378h+var_374], edx
		mov	eax, [eax+8]
		mov	[esp+378h+var_378], eax
		call	fprintf
		mov	eax, [ebp+var_33C]
		cmp	[ebp+eax*4+var_1A8], edi
		jg	short loc_401390

loc_4013E4:				; CODE XREF: sub_401120+261j
		inc	[ebp+var_33C]
		cmp	[ebp+var_33C], esi
		jl	loc_401370

loc_4013F6:				; CODE XREF: sub_401120+23Cj
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+378h+var_378], 0Ah
		mov	[esp+378h+var_374], eax
		call	fputc

loc_40140E:				; CODE XREF: sub_401120+1A4j
		mov	eax, [ebp+var_344]
		test	eax, eax
		jz	loc_4015CB
		xor	edi, edi
		mov	edx, [ebp+var_344]
		mov	[ebp+var_33C], edi
		cmp	[ebp+var_33C], edx
		jge	short loc_401494

loc_401432:				; CODE XREF: sub_401120+372j
		mov	ecx, [ebp+arg_0]
		mov	esi, offset aState2x2d3x3dE ; "State %2x(%2d): %3x(%3d)	entries\n"
		mov	[esp+378h+var_378], ecx
		call	sub_4010C0
		mov	edx, [ebp+var_33C]
		mov	[ebp+edx*4+var_338], eax
		call	__getreent
		mov	[esp+378h+var_374], esi
		mov	ecx, [ebp+var_33C]
		mov	edx, [ebp+ecx*4+var_338]
		mov	[esp+378h+var_36C], ecx
		mov	[esp+378h+var_370], ecx
		mov	[esp+378h+var_364], edx
		mov	[esp+378h+var_368], edx
		mov	eax, [eax+8]
		mov	[esp+378h+var_378], eax
		call	fprintf
		inc	[ebp+var_33C]
		mov	eax, [ebp+var_344]
		cmp	[ebp+var_33C], eax
		jl	short loc_401432

loc_401494:				; CODE XREF: sub_401120+310j
		call	__getreent
		mov	eax, [eax+8]
		xor	ebx, ebx
		mov	[esp+378h+var_378], 0Ah
		mov	[esp+378h+var_374], eax
		call	fputc
		mov	[ebp+var_33C], ebx
		mov	edx, [ebp+var_344]
		cmp	[ebp+var_33C], edx
		jge	loc_4015CB
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_4014D0:				; CODE XREF: sub_401120+4A5j
		mov	ecx, [ebp+var_33C]
		xor	edi, edi
		mov	ecx, [ebp+ecx*4+var_338]
		test	ecx, ecx
		jg	short loc_401541
		jmp	loc_4015B3
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4014E8:				; CODE XREF: sub_401120+43Cj
		sar	ebx, 18h
		call	__getreent
		mov	[esp+378h+var_364], edi
		mov	edx, dword_402000[ebx*4]
		mov	[esp+378h+var_368], edi
		inc	edi
		mov	[esp+378h+var_360], edx
		mov	edx, [ebp+var_33C]
		mov	[esp+378h+var_354], esi
		mov	[esp+378h+var_358], esi
		mov	[esp+378h+var_36C], edx
		mov	[esp+378h+var_370], edx
		mov	edx, offset aState2x2dEntry ; "State %2x(%2d), entry %3x(%3d): %s %2x("...
		mov	[esp+378h+var_35C], esi
		mov	[esp+378h+var_374], edx
		mov	eax, [eax+8]
		mov	[esp+378h+var_378], eax
		call	fprintf
		mov	eax, [ebp+var_33C]
		cmp	[ebp+eax*4+var_338], edi
		jle	short loc_4015B3

loc_401541:				; CODE XREF: sub_401120+3C1j
					; sub_401120+491j
		mov	eax, [ebp+arg_0]
		mov	[esp+378h+var_378], eax
		call	sub_4010C0
		mov	esi, eax
		mov	ebx, eax
		and	esi, 0FFFFFFh
		lea	eax, [esi-20h]
		cmp	eax, 5Eh
		jbe	short loc_4014E8
		sar	ebx, 18h
		call	__getreent
		mov	[esp+378h+var_358], esi
		mov	ecx, [ebp+var_33C]
		mov	edx, dword_402000[ebx*4]
		mov	[esp+378h+var_35C], esi
		mov	esi, offset aState2x2dEnt_0 ; "State %2x(%2d), entry %3x(%3d): %s %2x("...
		mov	[esp+378h+var_364], edi
		mov	[esp+378h+var_368], edi
		inc	edi
		mov	[esp+378h+var_360], edx
		mov	[esp+378h+var_36C], ecx
		mov	[esp+378h+var_370], ecx
		mov	[esp+378h+var_374], esi
		mov	eax, [eax+8]
		mov	[esp+378h+var_378], eax
		call	fprintf
		mov	eax, [ebp+var_33C]
		cmp	[ebp+eax*4+var_338], edi
		jg	short loc_401541

loc_4015B3:				; CODE XREF: sub_401120+3C3j
					; sub_401120+41Fj
		inc	[ebp+var_33C]
		mov	edx, [ebp+var_344]
		cmp	[ebp+var_33C], edx
		jl	loc_4014D0

loc_4015CB:				; CODE XREF: sub_401120+2F6j
					; sub_401120+3A0j
		call	__getreent
		mov	ecx, [ebp+var_340]
		mov	ebx, offset aFileLengthShou ; "\nfile length should be:	%3x(%3d)\n"
		mov	[esp+378h+var_374], ebx
		mov	[esp+378h+var_36C], ecx
		mov	[esp+378h+var_370], ecx
		mov	eax, [eax+8]
		mov	[esp+378h+var_378], eax
		call	fprintf
		call	__getreent
		mov	edx, ds:dword_404010
		mov	ecx, offset aNumberWordsRea ; "number words read    : %3x(%3d)\n"
		mov	[esp+378h+var_374], ecx
		mov	[esp+378h+var_36C], edx
		mov	[esp+378h+var_370], edx
		mov	eax, [eax+8]
		mov	[esp+378h+var_378], eax
		call	fprintf
		add	esp, 36Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401624:				; CODE XREF: sub_401120+19Cj
		mov	[esp+378h+var_378], offset aTooManyStates ; "Too many states\n"
		call	sub_401050
		jmp	loc_4012C2
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401635:				; CODE XREF: sub_401120+18Fj
		mov	[esp+378h+var_378], offset aTooManyTables ; "Too many tables\n"
		call	sub_401050
		jmp	loc_4012B5
sub_401120	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401650	proc near		; DATA XREF: start+33o

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	eax, 10h
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		and	esp, 0FFFFFFF0h
		call	sub_401790
		call	__main
		mov	eax, [esi]
		mov	[esp+18h+var_18], eax
		call	ds:kpse_set_progname
		cmp	ebx, 1
		jz	short loc_4016C0
		cmp	ebx, 2
		jz	short loc_4016F0
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], offset aOutocpTooManyA ; "outocp: Too	many arguments\n"
		mov	[esp+18h+var_C], eax
		mov	eax, 1Bh
		mov	[esp+18h+var_10], eax
		mov	eax, 1
		mov	[esp+18h+var_14], eax
		call	fwrite

loc_4016AF:				; CODE XREF: sub_401650+9Aj
					; sub_401650+102j
		lea	esp, [ebp+var_8]
		mov	eax, 1
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_4016C0:				; CODE XREF: sub_401650+2Ej
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], offset aOutocpNoFileGi ; "outocp: No file given\n"
		mov	[esp+18h+var_C], eax
		mov	eax, 16h
		mov	[esp+18h+var_10], eax
		mov	eax, 1
		mov	[esp+18h+var_14], eax
		call	fwrite
		jmp	short loc_4016AF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_4016F0:				; CODE XREF: sub_401650+33j
		mov	ebx, [esi+4]
		mov	eax, 1
		mov	esi, 13h
		mov	[esp+18h+var_10], eax
		mov	[esp+18h+var_14], esi
		mov	[esp+18h+var_18], ebx
		call	ds:kpse_find_file
		test	eax, eax
		jz	short loc_401735
		mov	[esp+18h+var_18], eax
		mov	edx, offset aRb	; "rb"
		mov	[esp+18h+var_14], edx
		call	ds:xfopen
		mov	[esp+18h+var_18], eax
		call	sub_401120
		lea	esp, [ebp+var_8]
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401735:				; CODE XREF: sub_401650+C0j
		call	__getreent
		mov	[esp+18h+var_10], ebx
		mov	ecx, offset aOutocpSNotFoun ; "outocp: %s not found\n"
		mov	[esp+18h+var_14], ecx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	fprintf
		jmp	loc_4016AF
sub_401650	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:kpse_set_progname
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:kpse_find_file
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:xfopen
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401790	proc near		; CODE XREF: sub_401650+16p
		push	ecx
		mov	ecx, esp
		add	ecx, 8

loc_401796:				; CODE XREF: sub_401790+1Bj
		cmp	eax, 1000h
		jb	short loc_4017AD
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		jmp	short loc_401796
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4017AD:				; CODE XREF: sub_401790+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		jmp	eax
sub_401790	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4017C0	proc near		; CODE XREF: start+3Ap

var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		mov	[esp+18h+var_14], 0
		mov	[esp+18h+var_18], esi
		call	sub_401890
		sub	esp, 8
		test	eax, eax
		jz	short loc_4017F3
		mov	[esp+18h+var_18], 0

loc_4017ED:				; CODE XREF: sub_4017C0+57j
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)

loc_4017F3:				; CODE XREF: sub_4017C0+24j
		sub	esp, 0B0h
		lea	ebx, [esp+0C8h+var_C0]
		mov	[esp+0C8h+var_C0], 0
		mov	[esp+0C8h+var_C4], ebx
		mov	[esp+0C8h+var_C8], esi
		call	sub_401890
		sub	esp, 8
		mov	[esp+0C8h+var_C8], ebx
		jmp	short loc_4017ED
sub_4017C0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8
; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fwrite. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fputc. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION getc. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION exit. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getreent. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fprintf. PRESS KEYPAD "+"	TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401890	proc near		; CODE XREF: sub_4017C0+1Ap
					; sub_4017C0+4Cp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		push	ebx
		sub	esp, 4		; lpModuleName
		mov	ebx, [ebp+arg_4]
		test	ebx, ebx
		jz	loc_401993

loc_4018A4:				; CODE XREF: sub_401890+11Fj
		mov	dword ptr [ebx+4], 0A8h
		xor	ecx, ecx
		mov	edx, 80h
		mov	dword ptr [ebx+8], 3EDh
		test	eax, eax
		mov	dword ptr [ebx+0Ch], 10h
		mov	[ebx+80h], ecx
		mov	[ebx+84h], edx
		mov	dword ptr [ebx+2Ch], offset dword_401AE0
		mov	dword ptr [ebx+30h], offset dword_401AE8
		mov	dword ptr [ebx+14h], offset unk_404020
		jz	loc_401986
		mov	edx, [ebx+0A4h]
		mov	eax, ds:_impure_ptr
		mov	[eax], edx

loc_4018F6:				; CODE XREF: sub_401890+FEj
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [ebx+48h], offset sub_401AB0
		mov	dword ptr [ebx+4Ch], offset sub_401AA0
		mov	[ebx+28h], eax
		mov	eax, [ebp+0]
		mov	dword ptr [ebx+50h], offset sub_401A90
		mov	dword ptr [ebx+54h], offset sub_401A80
		mov	dword ptr [ebx+24h], offset unk_404024
		mov	[ebx], eax
		mov	dword ptr [ebx+18h], offset loc_401A70
		mov	dword ptr [ebx+1Ch], offset loc_401A60
		mov	dword ptr [ebx+20h], offset loc_401A50
		mov	dword ptr [ebx+44h], offset loc_401A40
		mov	[esp+8+var_8], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	dword ptr [ebx+34h], offset dword_402000
		mov	dword ptr [ebx+38h], offset unk_4020A0
		mov	dword ptr [ebx+3Ch], offset dword_404000
		mov	dword ptr [ebx+40h], 404050h
		call	sub_401A10
		mov	eax, 1

loc_40197F:				; CODE XREF: sub_401890+116j
		mov	ebx, [ebp+var_4]
		leave
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401986:				; CODE XREF: sub_401890+53j
		mov	eax, ds:_impure_ptr
		mov	[ebx+10h], eax
		jmp	loc_4018F6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401993:				; CODE XREF: sub_401890+Ej
		mov	[esp+8+var_8], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_40197F
		mov	ebx, edx
		mov	eax, 1
		jmp	loc_4018A4
sub_401890	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4019D0	proc near		; CODE XREF: sub_401A10+1Dp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ebx, [ebp+arg_4]
		cmp	ecx, ebx
		jnb	short loc_401A02
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_4019F0:				; CODE XREF: sub_4019D0+30j
		mov	eax, [ecx+4]
		mov	edx, esi
		add	edx, eax
		mov	eax, [ecx]
		add	ecx, 8
		add	[edx], eax
		cmp	ecx, ebx
		jb	short loc_4019F0

loc_401A02:				; CODE XREF: sub_4019D0+10j
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_4019D0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401A10	proc near		; CODE XREF: sub_401890+E5p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+var_10], 400000h
		mov	[esp+18h+var_14], offset unk_403574
		mov	[esp+18h+var_18], offset unk_403574
		call	sub_4019D0
		mov	esp, ebp
		pop	ebp
		retn
sub_401A10	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401A40:				; DATA XREF: sub_401890+B0o
		jmp	ds:calloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401A50:				; DATA XREF: sub_401890+A9o
		jmp	ds:realloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401A60:				; DATA XREF: sub_401890+A2o
		jmp	ds:free
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401A70:				; DATA XREF: sub_401890+9Bo
		jmp	ds:malloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401A80	proc near		; DATA XREF: sub_401890+8Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401A80	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401A90	proc near		; DATA XREF: sub_401890+84o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401A90	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401AA0	proc near		; DATA XREF: sub_401890+77o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401AA0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401AB0	proc near		; DATA XREF: sub_401890+70o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401AB0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
dword_401AE0	dd 0FFFFFFFFh, 0	; DATA XREF: sub_401890+3Eo
dword_401AE8	dd 0FFFFFFFFh, 45h dup(0) ; DATA XREF: sub_401890+45o
_text		ends

; Section 2. (virtual address 00002000)
; Virtual size			: 000000A0 (	160.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001000
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 402000h
dword_402000	dd 403000h		; DATA XREF: sub_401120+3D4r
					; sub_401120+450r ...
		dd offset aOtp_right_outp ; "OTP_RIGHT_OUTPUT	"
		dd offset aOtp_right_num ; "OTP_RIGHT_NUM      "
		dd offset aOtp_right_char ; "OTP_RIGHT_CHAR	"
		dd offset aOtp_right_lcha ; "OTP_RIGHT_LCHAR	"
		dd offset aOtp_right_some ; "OTP_RIGHT_SOME	"
		dd offset aOtp_pback_outp ; "OTP_PBACK_OUTPUT	"
		dd offset aOtp_pback_num ; "OTP_PBACK_NUM      "
		dd offset aOtp_pback_char ; "OTP_PBACK_CHAR	"
		dd offset aOtp_pback_lcha ; "OTP_PBACK_LCHAR	"
		dd offset aOtp_pback_some ; "OTP_PBACK_SOME	"
		dd offset aOtp_add	; "OTP_ADD	      "
		dd offset aOtp_sub	; "OTP_SUB	      "
		dd offset aOtp_mult	; "OTP_MULT	      "
		dd offset aOtp_div	; "OTP_DIV	      "
		dd offset aOtp_mod	; "OTP_MOD	      "
		dd offset aOtp_lookup	; "OTP_LOOKUP	      "
		dd offset aOtp_push_num	; "OTP_PUSH_NUM	      "
		dd offset aOtp_push_char ; "OTP_PUSH_CHAR      "
		dd offset aOtp_push_lchar ; "OTP_PUSH_LCHAR	"
		dd offset aOtp_state_chan ; "OTP_STATE_CHANGE	"
		dd offset aOtp_state_push ; "OTP_STATE_PUSH	"
		dd offset aOtp_state_pop ; "OTP_STATE_POP      "
		dd offset aOtp_left_start ; "OTP_LEFT_START	"
		dd offset aOtp_left_retur ; "OTP_LEFT_RETURN	"
		dd offset aOtp_left_backu ; "OTP_LEFT_BACKUP	"
		dd offset aOtp_goto	; "OTP_GOTO	      "
		dd offset aOtp_goto_ne	; "OTP_GOTO_NE	      "
		dd offset aOtp_goto_eq	; "OTP_GOTO_EQ	      "
		dd offset aOtp_goto_lt	; "OTP_GOTO_LT	      "
		dd offset aOtp_goto_le	; "OTP_GOTO_LE	      "
		dd offset aOtp_goto_gt	; "OTP_GOTO_GT	      "
		dd offset aOtp_goto_ge	; "OTP_GOTO_GE	      "
		dd offset aOtp_goto_no_ad ; "OTP_GOTO_NO_ADVANCE"
		dd offset aOtp_goto_beg	; "OTP_GOTO_BEG	      "
		dd offset aOtp_goto_end	; "OTP_GOTO_END	      "
		dd offset aOtp_stop	; "OTP_STOP	      "
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_4020A0	db    0	;		; DATA XREF: sub_401890+D0o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_data		ends

; Section 3. (virtual address 00003000)
; Virtual size			: 00000574 (   1396.)
; Section size in file		: 00000600 (   1536.)
; Offset to raw	data for section: 00001200
; Flags	40000040: Data Readable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 403000h
		db '                   ',0
aOtp_right_outp	db 'OTP_RIGHT_OUTPUT   ',0 ; DATA XREF: .data:00402004o
aOtp_right_num	db 'OTP_RIGHT_NUM      ',0 ; DATA XREF: .data:00402008o
aOtp_right_char	db 'OTP_RIGHT_CHAR     ',0 ; DATA XREF: .data:0040200Co
aOtp_right_lcha	db 'OTP_RIGHT_LCHAR    ',0 ; DATA XREF: .data:00402010o
aOtp_right_some	db 'OTP_RIGHT_SOME     ',0 ; DATA XREF: .data:00402014o
aOtp_pback_outp	db 'OTP_PBACK_OUTPUT   ',0 ; DATA XREF: .data:00402018o
aOtp_pback_num	db 'OTP_PBACK_NUM      ',0 ; DATA XREF: .data:0040201Co
aOtp_pback_char	db 'OTP_PBACK_CHAR     ',0 ; DATA XREF: .data:00402020o
aOtp_pback_lcha	db 'OTP_PBACK_LCHAR    ',0 ; DATA XREF: .data:00402024o
aOtp_pback_some	db 'OTP_PBACK_SOME     ',0 ; DATA XREF: .data:00402028o
aOtp_add	db 'OTP_ADD            ',0 ; DATA XREF: .data:0040202Co
aOtp_sub	db 'OTP_SUB            ',0 ; DATA XREF: .data:00402030o
aOtp_mult	db 'OTP_MULT           ',0 ; DATA XREF: .data:00402034o
aOtp_div	db 'OTP_DIV            ',0 ; DATA XREF: .data:00402038o
aOtp_mod	db 'OTP_MOD            ',0 ; DATA XREF: .data:0040203Co
aOtp_lookup	db 'OTP_LOOKUP         ',0 ; DATA XREF: .data:00402040o
aOtp_push_num	db 'OTP_PUSH_NUM       ',0 ; DATA XREF: .data:00402044o
aOtp_push_char	db 'OTP_PUSH_CHAR      ',0 ; DATA XREF: .data:00402048o
aOtp_push_lchar	db 'OTP_PUSH_LCHAR     ',0 ; DATA XREF: .data:0040204Co
aOtp_state_chan	db 'OTP_STATE_CHANGE   ',0 ; DATA XREF: .data:00402050o
aOtp_state_push	db 'OTP_STATE_PUSH     ',0 ; DATA XREF: .data:00402054o
aOtp_state_pop	db 'OTP_STATE_POP      ',0 ; DATA XREF: .data:00402058o
aOtp_left_start	db 'OTP_LEFT_START     ',0 ; DATA XREF: .data:0040205Co
aOtp_left_retur	db 'OTP_LEFT_RETURN    ',0 ; DATA XREF: .data:00402060o
aOtp_left_backu	db 'OTP_LEFT_BACKUP    ',0 ; DATA XREF: .data:00402064o
aOtp_goto	db 'OTP_GOTO           ',0 ; DATA XREF: .data:00402068o
aOtp_goto_ne	db 'OTP_GOTO_NE        ',0 ; DATA XREF: .data:0040206Co
aOtp_goto_eq	db 'OTP_GOTO_EQ        ',0 ; DATA XREF: .data:00402070o
aOtp_goto_lt	db 'OTP_GOTO_LT        ',0 ; DATA XREF: .data:00402074o
aOtp_goto_le	db 'OTP_GOTO_LE        ',0 ; DATA XREF: .data:00402078o
aOtp_goto_gt	db 'OTP_GOTO_GT        ',0 ; DATA XREF: .data:0040207Co
aOtp_goto_ge	db 'OTP_GOTO_GE        ',0 ; DATA XREF: .data:00402080o
aOtp_goto_no_ad	db 'OTP_GOTO_NO_ADVANCE',0 ; DATA XREF: .data:00402084o
aOtp_goto_beg	db 'OTP_GOTO_BEG       ',0 ; DATA XREF: .data:00402088o
aOtp_goto_end	db 'OTP_GOTO_END       ',0 ; DATA XREF: .data:0040208Co
aOtp_stop	db 'OTP_STOP           ',0 ; DATA XREF: .data:00402090o
aUnexpectedEndO	db 'Unexpected end of file',0Ah,0 ; DATA XREF: sub_401080+20o
aFirstOctet127	db 'first octet > 127',0 ; DATA XREF: sub_4010C0+50o
aCtp_no_tables3	db 'ctp_no_tables  : %3x(%3d)',0Ah,0 ; DATA XREF: sub_401120+4o
aCtp_length3x3d	db 'ctp_length     : %3x(%3d)',0Ah,0 ; DATA XREF: sub_401120+Ao
aReal_ctp_lengt	db 'real_ctp_length: %3x(%3d)',0Ah,0 ; DATA XREF: sub_401120+5Fo
aCtp_input3x3d	db 'ctp_input      : %3x(%3d)',0Ah,0 ; DATA XREF: sub_401120+89o
aCtp_output3x3d	db 'ctp_output     : %3x(%3d)',0Ah,0 ; DATA XREF: sub_401120+B7o
aCtp_room_table	db 'ctp_room_tables: %3x(%3d)',0Ah,0 ; DATA XREF: sub_401120+112o
aCtp_no_states3	db 'ctp_no_states  : %3x(%3d)',0Ah,0 ; DATA XREF: sub_401120+142o
aCtp_room_state	db 'ctp_room_states: %3x(%3d)',0Ah ; DATA XREF: sub_401120+174o
		db 0Ah,0
		align 4
aTable2x2d3x3dE	db 'Table %2x(%2d): %3x(%3d)entries',0Ah,0 ; DATA XREF: sub_401120+1BDo
		align 4
aTable2x2dEntry	db 'Table %2x(%2d), entry %3x(%3d): %2x(%3d)',0Ah,0
					; DATA XREF: sub_401120+28Co
		align 4
aState2x2d3x3dE	db 'State %2x(%2d): %3x(%3d) entries',0Ah,0 ; DATA XREF: sub_401120+315o
		align 4
aState2x2dEntry	db 'State %2x(%2d), entry %3x(%3d): %s %2x(%3d,`%c',27h,')',0Ah,0
					; DATA XREF: sub_401120+3FAo
		align 4
aState2x2dEnt_0	db 'State %2x(%2d), entry %3x(%3d): %s %2x(%3d)',0Ah,0
					; DATA XREF: sub_401120+45Bo
		align 4
aFileLengthShou	db 0Ah			; DATA XREF: sub_401120+4B6o
		db 'file length should be: %3x(%3d)',0Ah,0
		align 4
aNumberWordsRea	db 'number words read    : %3x(%3d)',0Ah,0 ; DATA XREF: sub_401120+4DDo
aTooManyStates	db 'Too many states',0Ah,0 ; DATA XREF: sub_401120+504o
aTooManyTables	db 'Too many tables',0Ah,0 ; DATA XREF: sub_401120+515o
aOutocpTooManyA	db 'outocp: Too many arguments',0Ah,0 ; DATA XREF: sub_401650+3Do
aOutocpNoFileGi	db 'outocp: No file given',0Ah,0 ; DATA XREF: sub_401650+78o
aRb		db 'rb',0               ; DATA XREF: sub_401650+C5o
aOutocpSNotFoun	db 'outocp: %s not found',0Ah,0 ; DATA XREF: sub_401650+EEo
		align 4
unk_403574	db    0	;		; DATA XREF: sub_401A10+Eo
					; sub_401A10+16o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_rdata		ends

; Section 4. (virtual address 00004000)
; Virtual size			: 00000050 (	 80.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 404000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_404000	dd ?			; DATA XREF: start+9r sub_401890+D7o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404010	dd ?			; DATA XREF: sub_4010C0+Bw
					; sub_401120+4D7r
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_404020	db    ?	;		; DATA XREF: sub_401890+4Co
		db    ?	;
		db    ?	;
		db    ?	;
unk_404024	db    ?	;		; DATA XREF: sub_401890+92o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
_bss		ends

;
; Imports from cygkpathsea-4
;
; Section 5. (virtual address 00005000)
; Virtual size			: 00000288 (	648.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001800
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn kpse_find_file:dword ; DATA XREF:	sub_401650+B8r
					; .text:00401770r
		extrn kpse_set_progname:dword ;	DATA XREF: sub_401650+25r
					; .text:00401760r
		extrn xfopen:dword	; DATA XREF: sub_401650+CEr
					; .text:00401780r


;
; Imports from KERNEL32
;
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr


;
; Imports from cygwin1
;
		extrn __imp___getreent:dword ; DATA XREF: __getreentr
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn _impure_ptr:dword	; DATA XREF: sub_401890+5Fr
					; sub_401890+F6r
; void *__cdecl	calloc(size_t,size_t)
		extrn calloc:dword	; DATA XREF: .text:00401A40r
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_4017C0+2Dr
					; .text:004019C0r
; void __cdecl _imp_exit(int)
		extrn __imp_exit:dword	; DATA XREF: exitr
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
		extrn __imp_fputc:dword	; DATA XREF: fputcr
; void __cdecl free(void *)
		extrn free:dword	; DATA XREF: .text:00401A60r
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
		extrn __imp_getc:dword	; DATA XREF: getcr
; void *__cdecl	malloc(size_t)
		extrn malloc:dword	; DATA XREF: .text:00401A70r
; void *__cdecl	realloc(void *,size_t)
		extrn realloc:dword	; DATA XREF: .text:00401A50r



		end start
