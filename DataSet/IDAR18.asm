

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\getopt.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00001050 (   4176.)
; Section size in file		: 00001200 (   4608.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		and	esp, 0FFFFFFF0h
		mov	eax, ds:dword_405000
		test	eax, eax
		jz	short loc_401013
		int	3		; Trap to Debugger

loc_401013:				; CODE XREF: start+10j
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_401930
		call	sub_401C90
		leave
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401050	proc near		; CODE XREF: sub_401110+2Ep
					; sub_401110+62p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		call	malloc
		test	eax, eax
		jz	short loc_401067
		leave
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401067:				; CODE XREF: sub_401050+13j
		call	__getreent
		mov	ecx, offset aGetopt ; "getopt"
		mov	edx, offset aSOutOfMemory ; "%s: Out of	memory!\n"
		mov	[esp+18h+var_10], ecx
		mov	[esp+18h+var_14], edx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	fprintf
		mov	[esp+18h+var_18], 3
		call	exit
		lea	esi, [esi+0]
		lea	edi, [edi+0]
sub_401050	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4010A0	proc near		; CODE XREF: sub_401450+D7p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], eax
		call	realloc
		test	eax, eax
		mov	ecx, eax
		setz	dl
		xor	eax, eax
		test	ebx, ebx
		setnz	al
		test	edx, eax
		jnz	short loc_4010D3
		add	esp, 14h
		mov	eax, ecx
		pop	ebx
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4010D3:				; CODE XREF: sub_4010A0+29j
		call	__getreent
		mov	ebx, offset aSOutOfMemory ; "%s: Out of	memory!\n"
		mov	edx, offset aGetopt ; "getopt"
		mov	[esp+18h+var_10], edx
		mov	[esp+18h+var_14], ebx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	fprintf
		mov	[esp+18h+var_18], 3
		call	exit
		jmp	short sub_401110
sub_4010A0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401110	proc near		; CODE XREF: sub_4010A0+61j
					; sub_401230+E3p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	eax, ds:dword_405050
		mov	esi, [ebp+arg_0]
		test	eax, eax
		jnz	loc_401201

loc_401128:				; CODE XREF: sub_401110+F9j
		mov	ecx, dword_403000
		test	ecx, ecx
		jnz	short loc_401160
		mov	[esp+18h+var_18], esi
		call	strlen
		inc	eax
		mov	[esp+18h+var_18], eax
		call	sub_401050
		mov	[esp+18h+var_18], eax
		mov	[esp+18h+var_14], esi
		mov	ds:dword_405050, eax
		call	strcpy
		mov	eax, ds:dword_405050
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401160:				; CODE XREF: sub_401110+20j
		mov	[esp+18h+var_18], esi
		call	strlen
		lea	eax, ds:3[eax*4]
		mov	[esp+18h+var_18], eax
		call	sub_401050
		mov	ds:dword_405050, eax
		mov	ebx, eax
		inc	ebx
		mov	byte ptr [eax],	27h
		movzx	eax, byte ptr [esi]
		test	al, al
		jz	short loc_4011A9
		mov	cl, al
		nop
		lea	esi, [esi+0]

loc_401190:				; CODE XREF: sub_401110+97j
		cmp	cl, 27h
		jz	short loc_4011F0
		cmp	ds:dword_405018, 1
		jz	short loc_4011C0

loc_40119E:				; CODE XREF: sub_401110+C7j
		mov	[ebx], cl

loc_4011A0:				; CODE XREF: sub_401110+DAj
					; sub_401110+EFj ...
		inc	esi
		inc	ebx
		movzx	ecx, byte ptr [esi]
		test	cl, cl
		jnz	short loc_401190

loc_4011A9:				; CODE XREF: sub_401110+77j
		mov	byte ptr [ebx],	27h
		mov	byte ptr [ebx+1], 0
		mov	eax, ds:dword_405050
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_4011C0:				; CODE XREF: sub_401110+8Cj
		cmp	cl, 21h
		jz	short loc_40120E
		cmp	cl, 0Ah
		jz	short loc_40121F
		mov	eax, ds:_ctype_
		movsx	edx, cl
		test	byte ptr [eax+edx+1], 8
		jz	short loc_40119E
		mov	byte ptr [ebx],	27h
		inc	ebx
		mov	byte ptr [ebx],	5Ch
		inc	ebx
		movzx	eax, byte ptr [esi]
		mov	[ebx], al
		inc	ebx
		mov	byte ptr [ebx],	27h
		jmp	short loc_4011A0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_4011F0:				; CODE XREF: sub_401110+83j
		mov	byte ptr [ebx],	27h
		inc	ebx
		mov	byte ptr [ebx],	5Ch
		inc	ebx
		mov	byte ptr [ebx],	27h
		inc	ebx
		mov	byte ptr [ebx],	27h
		jmp	short loc_4011A0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401201:				; CODE XREF: sub_401110+12j
		mov	[esp+18h+var_18], eax
		call	free
		jmp	loc_401128
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40120E:				; CODE XREF: sub_401110+B3j
		mov	byte ptr [ebx],	27h
		inc	ebx
		mov	byte ptr [ebx],	5Ch
		inc	ebx
		mov	byte ptr [ebx],	21h
		inc	ebx
		mov	byte ptr [ebx],	27h
		jmp	short loc_4011A0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40121F:				; CODE XREF: sub_401110+B8j
		mov	byte ptr [ebx],	5Ch
		inc	ebx
		mov	byte ptr [ebx],	6Eh
		jmp	loc_4011A0
sub_401110	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401230	proc near		; CODE XREF: sub_401930+23Ap

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	eax, ds:dword_405014
		mov	[ebp+var_14], 0
		mov	edi, [ebp+arg_4]
		mov	esi, [ebp+arg_C]
		test	eax, eax
		jz	short loc_40125A
		mov	eax, ds:opterr
		mov	dword ptr [eax], 0

loc_40125A:				; CODE XREF: sub_401230+1Dj
		mov	eax, ds:optind
		mov	dword ptr [eax], 0
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401270:				; CODE XREF: sub_401230+85j
					; sub_401230+8Ej ...
		mov	[esp+28h+var_1C], esi
		lea	ecx, [ebp+var_10]
		mov	[esp+28h+var_18], ecx
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+var_20], eax
		mov	ecx, [ebp+arg_0]
		mov	[esp+28h+var_28], edi
		mov	[esp+28h+var_24], ecx
		call	getopt_long
		cmp	eax, 0FFFFFFFFh
		mov	ebx, eax
		jz	loc_40132D
		cmp	ebx, 3Fh
		setz	al
		cmp	ebx, 3Ah
		setz	dl
		or	eax, edx
		test	al, 1
		jz	short loc_4012B7
		mov	[ebp+var_14], 1
		jmp	short loc_401270
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4012B7:				; CODE XREF: sub_401230+7Cj
		mov	eax, ds:dword_405010
		test	eax, eax
		jnz	short loc_401270
		cmp	ebx, 2
		jz	loc_40134B
		cmp	ebx, 1
		jz	short loc_401342
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], offset aC ; "	-%c"
		call	printf
		mov	[esp+28h+var_24], ebx
		mov	eax, [ebp+arg_8]
		mov	[esp+28h+var_28], eax
		call	strchr
		test	eax, eax
		jz	loc_401270
		cmp	byte ptr [eax+1], 3Ah
		jnz	loc_401270

loc_4012FF:				; CODE XREF: sub_401230+146j
		mov	eax, ds:optarg
		mov	eax, [eax]
		test	eax, eax
		jnz	short loc_401310
		mov	eax, offset unk_40407E
		nop

loc_401310:				; CODE XREF: sub_401230+D8j
					; sub_401230+119j
		mov	[esp+28h+var_28], eax
		call	sub_401110
		mov	[esp+28h+var_24], eax
		mov	[esp+28h+var_28], offset aS ; "	%s"
		call	printf
		jmp	loc_401270
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40132D:				; CODE XREF: sub_401230+66j
		mov	ebx, ds:dword_405010
		test	ebx, ebx
		jz	short loc_40137B
		mov	eax, [ebp+var_14]
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401342:				; CODE XREF: sub_401230+9Cj
		mov	eax, ds:optarg
		mov	eax, [eax]
		jmp	short loc_401310
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40134B:				; CODE XREF: sub_401230+93j
		mov	eax, [ebp+var_10]
		shl	eax, 4
		mov	eax, [eax+esi]
		mov	[esp+28h+var_28], offset aS_0 ;	" --%s"
		mov	[esp+28h+var_24], eax
		call	printf
		mov	eax, [ebp+var_10]
		shl	eax, 4
		mov	eax, [eax+esi+4]
		test	eax, eax
		jz	loc_401270
		jmp	loc_4012FF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40137B:				; CODE XREF: sub_401230+105j
		mov	[esp+28h+var_28], offset asc_404089 ; "	--"
		call	printf
		jmp	short loc_4013B0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_401390:				; CODE XREF: sub_401230+18Aj
		mov	ecx, [ebp+arg_0]
		mov	eax, [ecx+eax*4]
		mov	[esp+28h+var_28], eax
		inc	dword ptr [edx]
		call	sub_401110
		mov	[esp+28h+var_24], eax
		mov	[esp+28h+var_28], offset aS ; "	%s"
		call	printf

loc_4013B0:				; CODE XREF: sub_401230+157j
		mov	edx, ds:optind
		mov	eax, [edx]
		cmp	eax, edi
		jl	short loc_401390
		mov	[esp+28h+var_28], 0Ah
		call	putchar
		mov	eax, [ebp+var_14]
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_401230	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4013E0	proc near		; CODE XREF: sub_401570+7Ap
					; sub_401610+ADj ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_0]
		test	ebx, ebx
		jz	short loc_40140B
		call	__getreent
		mov	[esp+18h+var_10], ebx
		mov	edx, offset aGetoptS ; "getopt:	%s\n"
		mov	[esp+18h+var_14], edx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	fprintf

loc_40140B:				; CODE XREF: sub_4013E0+Cj
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], offset aTryGetoptHelpF ; "Try	`getopt	--help' for more informatio"...
		mov	[esp+18h+var_C], eax
		mov	eax, 2Ah
		mov	[esp+18h+var_10], eax
		mov	eax, 1
		mov	[esp+18h+var_14], eax
		call	fwrite
		mov	[esp+18h+var_18], 2
		call	exit
		jmp	short sub_401450
sub_4013E0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401450	proc near		; CODE XREF: sub_4013E0+61j
					; sub_401570+27p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, [ebp+arg_0]
		test	esi, esi
		jz	loc_40153C

loc_401463:				; CODE XREF: sub_401450+10Ej
		mov	ecx, ds:dword_405030
		cmp	ecx, ds:dword_405040
		jz	loc_401510

loc_401475:				; CODE XREF: sub_401450+E7j
		mov	edx, ds:dword_405020
		mov	eax, ecx
		xor	ebx, ebx
		shl	eax, 4
		mov	[eax+edx+4], ebx
		xor	ebx, ebx
		mov	[eax+edx+8], ebx
		xor	ebx, ebx
		test	ecx, ecx
		mov	dword ptr [eax+edx], 0
		mov	[eax+edx+0Ch], ebx
		jnz	short loc_4014B2
		mov	ecx, ds:dword_405030
		lea	eax, [ecx+1]
		mov	ds:dword_405030, eax
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4014B2:				; CODE XREF: sub_401450+4Bj
		lea	edx, [eax+edx-10h]
		mov	eax, [ebp+arg_4]
		mov	dword ptr [edx+8], 0
		mov	dword ptr [edx+0Ch], 2
		mov	[edx+4], eax
		mov	[esp+18h+var_18], esi
		call	strlen
		inc	eax
		mov	[esp+18h+var_18], eax
		call	sub_401050
		mov	[esp+18h+var_18], eax
		mov	ebx, eax
		mov	[esp+18h+var_14], esi
		call	strcpy
		mov	ecx, ds:dword_405030
		mov	esi, ds:dword_405020
		mov	eax, ecx
		shl	eax, 4
		add	eax, esi
		mov	[eax-10h], ebx
		lea	eax, [ecx+1]
		mov	ds:dword_405030, eax
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401510:				; CODE XREF: sub_401450+1Fj
		lea	eax, [ecx+0Ah]
		mov	ds:dword_405040, eax
		shl	eax, 4
		mov	[esp+18h+var_14], eax
		mov	eax, ds:dword_405020
		mov	[esp+18h+var_18], eax
		call	sub_4010A0
		mov	ds:dword_405020, eax
		mov	ecx, ds:dword_405030
		jmp	loc_401475
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40153C:				; CODE XREF: sub_401450+Dj
		mov	eax, ds:dword_405020
		mov	[esp+18h+var_18], eax
		call	free
		xor	eax, eax
		mov	ds:dword_405020, eax
		xor	eax, eax
		mov	ds:dword_405040, eax
		xor	eax, eax
		mov	ds:dword_405030, eax
		jmp	loc_401463
sub_401450	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401570	proc near		; CODE XREF: sub_401930+197p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8

		push	ebp
		mov	eax, offset asc_4040C7 ; ", \t\n"
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	[esp+18h+var_14], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		jmp	short loc_4015AC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_401590:				; CODE XREF: sub_401570+5Bj
					; sub_401570+71j ...
		mov	[esp+18h+var_14], esi
		mov	[esp+18h+var_18], ebx
		call	sub_401450

loc_40159C:				; CODE XREF: sub_401570+4Cj
		mov	[esp+18h+var_18], 0
		mov	eax, offset asc_4040C7 ; ", \t\n"
		mov	[esp+18h+var_14], eax

loc_4015AC:				; CODE XREF: sub_401570+17j
		call	strtok
		test	eax, eax
		mov	ebx, eax
		jz	short loc_4015F1
		xor	esi, esi
		cmp	byte ptr [eax],	0
		jz	short loc_40159C
		mov	[esp+18h+var_18], eax
		call	strlen
		cmp	byte ptr [eax+ebx-1], 3Ah
		jnz	short loc_401590
		cmp	byte ptr [eax+ebx-2], 3Ah
		jz	short loc_4015F8
		mov	byte ptr [eax+ebx-1], 0
		mov	esi, 1

loc_4015DE:				; CODE XREF: sub_401570+92j
		cmp	byte ptr [ebx],	0
		jnz	short loc_401590
		mov	[esp+18h+var_18], offset aEmptyLongOptio ; "empty long option after -l or --long ar"...
		call	sub_4013E0
		jmp	short loc_401590
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4015F1:				; CODE XREF: sub_401570+45j
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4015F8:				; CODE XREF: sub_401570+62j
		mov	byte ptr [eax+ebx-2], 0
		mov	esi, 2
		jmp	short loc_4015DE
sub_401570	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401610	proc near		; CODE XREF: sub_401930+F2p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ecx, 5
		mov	ebp, esp
		cld
		sub	esp, 0Ch
		mov	[esp+0Ch+var_8], esi
		mov	[esp+0Ch+var_4], edi
		mov	edi, offset aBash ; "bash"
		mov	[esp+0Ch+var_C], ebx
		mov	ebx, [ebp+arg_0]
		mov	esi, ebx
		repe cmpsb
		jz	short loc_401680
		cld
		mov	edi, offset aTcsh ; "tcsh"
		mov	ecx, 5
		mov	esi, ebx
		repe cmpsb
		jnz	short loc_401660

loc_401646:				; CODE XREF: sub_401610+96j
		mov	eax, 1
		mov	ds:dword_405018, eax
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401660:				; CODE XREF: sub_401610+34j
		cld
		mov	edi, offset aSh	; "sh"
		mov	ecx, 3
		mov	esi, ebx
		repe cmpsb
		jnz	short loc_401697
		jmp	short loc_401680
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401680:				; CODE XREF: sub_401610+23j
					; sub_401610+61j
		xor	edx, edx
		mov	ds:dword_405018, edx
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401697:				; CODE XREF: sub_401610+5Fj
		cld
		mov	edi, offset aCsh ; "csh"
		mov	ecx, 4
		mov	esi, ebx
		repe cmpsb
		jz	short loc_401646
		mov	[ebp+arg_0], offset aUnknownShellAf ; "unknown shell after -s or --shell argum"...
		mov	ebx, [esp+0Ch+var_C]
		mov	esi, [esp+0Ch+var_8]
		mov	edi, [esp+0Ch+var_4]
		mov	esp, ebp
		pop	ebp
		jmp	sub_4013E0
sub_401610	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4016D0	proc near		; CODE XREF: sub_401930+1A1p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], offset aUsageGetoptOpt ; "Usage: getopt optstring parameters\n"
		mov	[esp+18h+var_C], eax
		mov	eax, 23h
		mov	[esp+18h+var_10], eax
		mov	eax, 1
		mov	[esp+18h+var_14], eax
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	ecx, 1
		mov	[esp+18h+var_14], ecx
		mov	[esp+18h+var_18], offset aGetoptOptionsO ; "	   getopt [options] [--] optstring "...
		mov	[esp+18h+var_C], eax
		mov	eax, 32h
		mov	[esp+18h+var_10], eax
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	edx, 3Eh
		mov	[esp+18h+var_10], edx
		mov	[esp+18h+var_18], offset aGetoptOption_0 ; "	   getopt [options] -o|--options op"...
		mov	[esp+18h+var_C], eax
		mov	eax, 1
		mov	[esp+18h+var_14], eax
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], offset aParameters ; "	      parameters\n"
		mov	[esp+18h+var_C], eax
		mov	eax, 19h
		mov	[esp+18h+var_10], eax
		mov	eax, 1
		mov	[esp+18h+var_14], eax
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], offset aHHelpThisSmall ; "  -h, --help		   This	sma"...
		mov	[esp+18h+var_C], eax
		mov	eax, 36h
		mov	[esp+18h+var_10], eax
		mov	eax, 1
		mov	[esp+18h+var_14], eax
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	ecx, 1
		mov	[esp+18h+var_14], ecx
		mov	[esp+18h+var_18], offset aLLongoptionsLo ; "  -l, --longoptions=longopts   Long	opt"...
		mov	[esp+18h+var_C], eax
		mov	eax, 3Dh
		mov	[esp+18h+var_10], eax
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	edx, 48h
		mov	[esp+18h+var_10], edx
		mov	[esp+18h+var_18], offset aNNamePrognameT ; "  -n, --name=progname	   The name"...
		mov	[esp+18h+var_C], eax
		mov	eax, 1
		mov	[esp+18h+var_14], eax
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], offset aOOptionsOptstr ; "  -o, --options=optstring	   Short op"...
		mov	[esp+18h+var_C], eax
		mov	eax, 3Eh
		mov	[esp+18h+var_10], eax
		mov	eax, 1
		mov	[esp+18h+var_14], eax
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], offset aQQuietDisableE ; "  -q, --quiet		   Disable "...
		mov	[esp+18h+var_C], eax
		mov	eax, 44h
		mov	[esp+18h+var_10], eax
		mov	eax, 1
		mov	[esp+18h+var_14], eax
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	ecx, 1
		mov	[esp+18h+var_14], ecx
		mov	[esp+18h+var_18], offset aQQuietOutputNo ; "  -Q, --quiet-output	   No norma"...
		mov	[esp+18h+var_C], eax
		mov	eax, 30h
		mov	[esp+18h+var_10], eax
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	edx, 3Dh
		mov	[esp+18h+var_10], edx
		mov	[esp+18h+var_18], offset aSShellShellSet ; "  -s, --shell=shell		   Set shel"...
		mov	[esp+18h+var_C], eax
		mov	eax, 1
		mov	[esp+18h+var_14], eax
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], offset aTTestTestForGe ; "  -T, --test		   Test	for"...
		mov	[esp+18h+var_C], eax
		mov	eax, 3Ah
		mov	[esp+18h+var_10], eax
		mov	eax, 1
		mov	[esp+18h+var_14], eax
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], offset aUUnqoteDoNotQu ; "  -u, --unqote		   Do not q"...
		mov	[esp+18h+var_C], eax
		mov	eax, 37h
		mov	[esp+18h+var_10], eax
		mov	eax, 1
		mov	[esp+18h+var_14], eax
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	ecx, 1
		mov	[esp+18h+var_14], ecx
		mov	[esp+18h+var_18], offset aVVersionOutput ; "  -V, --version		   Output v"...
		mov	[esp+18h+var_C], eax
		mov	eax, 3Ah
		mov	[esp+18h+var_10], eax
		call	fwrite
		mov	[esp+18h+var_18], 2
		call	exit
		mov	esi, esi
sub_4016D0	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401930	proc near		; DATA XREF: start+33o

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	eax, 10h
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	esi, [ebp+arg_0]
		mov	edi, [ebp+arg_4]
		and	esp, 0FFFFFFF0h
		call	sub_401C60
		call	__main
		mov	[ebp+var_10], 0
		xor	eax, eax
		xor	ebx, ebx
		mov	[esp+28h+var_24], eax
		mov	[ebp+var_14], 0
		mov	[esp+28h+var_28], 0
		call	sub_401450
		mov	[esp+28h+var_28], offset aGetopt_compati ; "GETOPT_COMPATIBLE"
		call	getenv
		test	eax, eax
		jz	short loc_401988
		mov	ebx, 1

loc_401988:				; CODE XREF: sub_401930+51j
		cmp	esi, 1
		jz	loc_401B0B

loc_401991:				; CODE XREF: sub_401930+1EFj
		mov	ecx, [edi+4]
		cmp	byte ptr [ecx],	2Dh
		setnz	al
		test	ebx, ebx
		setnz	dl
		or	eax, edx
		test	al, 1
		jnz	loc_401BA3
		lea	esi, [esi+0]

loc_4019B0:				; CODE XREF: sub_401930+DCj
					; sub_401930+E6j ...
		mov	[esp+28h+var_24], edi
		mov	eax, dword_4030D0
		xor	ecx, ecx
		mov	[esp+28h+var_18], ecx
		mov	edx, offset off_403020
		mov	[esp+28h+var_1C], edx
		mov	[esp+28h+var_20], eax
		mov	[esp+28h+var_28], esi
		call	getopt_long
		cmp	eax, 0FFFFFFFFh
		jz	loc_401B24
		sub	eax, 3Ah	; switch 60 cases
		cmp	eax, 3Bh
		ja	short loc_401A00 ; default
		jmp	ds:off_4044CC[eax*4] ; switch jump

loc_4019EC:				; DATA XREF: .rdata:004044CCo
		mov	[esp+28h+var_28], 0 ; case 0x3A
		call	sub_4013E0
		nop
		lea	esi, [esi+0]

loc_401A00:				; CODE XREF: sub_401930+B3j
					; sub_401930+B5j
					; DATA XREF: ...
		mov	[esp+28h+var_28], offset aInternalErrorC ; default
		call	sub_4013E0
		jmp	short loc_4019B0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A0E:				; CODE XREF: sub_401930+B5j
					; DATA XREF: .rdata:004044CCo
		xor	ebx, ebx	; case 0x75
		mov	dword_403000, ebx
		jmp	short loc_4019B0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A18:				; CODE XREF: sub_401930+B5j
					; DATA XREF: .rdata:004044CCo
		mov	eax, ds:optarg	; case 0x73
		mov	eax, [eax]
		mov	[esp+28h+var_28], eax
		call	sub_401610
		jmp	short loc_4019B0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A29:				; CODE XREF: sub_401930+B5j
					; DATA XREF: .rdata:004044CCo
		mov	eax, 1		; case 0x71
		mov	ds:dword_405014, eax
		jmp	loc_4019B0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A38:				; CODE XREF: sub_401930+B5j
					; DATA XREF: .rdata:004044CCo
		mov	eax, [ebp+var_10] ; case 0x6F
		test	eax, eax
		jz	short loc_401A4A
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], eax
		call	free

loc_401A4A:				; CODE XREF: sub_401930+10Dj
		mov	eax, ds:optarg
		mov	eax, [eax]
		mov	[esp+28h+var_28], eax
		call	strlen
		inc	eax
		mov	[esp+28h+var_28], eax
		call	sub_401050
		mov	[ebp+var_10], eax
		mov	eax, ds:optarg
		mov	edx, [ebp+var_10]
		mov	eax, [eax]
		mov	[esp+28h+var_24], eax

loc_401A73:				; CODE XREF: sub_401930+18Bj
		mov	[esp+28h+var_28], edx
		call	strcpy
		jmp	loc_4019B0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A80:				; CODE XREF: sub_401930+B5j
					; DATA XREF: .rdata:004044CCo
		mov	eax, [ebp+var_14] ; case 0x6E
		test	eax, eax
		jz	short loc_401A92
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_28], eax
		call	free

loc_401A92:				; CODE XREF: sub_401930+155j
		mov	eax, ds:optarg
		mov	eax, [eax]
		mov	[esp+28h+var_28], eax
		call	strlen
		inc	eax
		mov	[esp+28h+var_28], eax
		call	sub_401050
		mov	[ebp+var_14], eax
		mov	eax, ds:optarg
		mov	edx, [ebp+var_14]
		mov	eax, [eax]
		mov	[esp+28h+var_24], eax
		jmp	short loc_401A73
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401ABD:				; CODE XREF: sub_401930+B5j
					; DATA XREF: .rdata:004044CCo
		mov	eax, ds:optarg	; case 0x6C
		mov	eax, [eax]
		mov	[esp+28h+var_28], eax
		call	sub_401570
		jmp	loc_4019B0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401AD1:				; CODE XREF: sub_401930+B5j
					; DATA XREF: .rdata:004044CCo
		call	sub_4016D0	; case 0x68

loc_401AD6:				; CODE XREF: sub_401930+1BEj
					; sub_401930+323j
		mov	[esp+28h+var_28], 0
		call	exit

loc_401AE2:				; CODE XREF: sub_401930+B5j
					; DATA XREF: .rdata:004044CCo
		mov	[esp+28h+var_28], offset aGetoptEnhanced ; case	0x56
		call	puts
		jmp	short loc_401AD6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401AF0:				; CODE XREF: sub_401930+B5j
					; DATA XREF: .rdata:004044CCo
		mov	[esp+28h+var_28], 4 ; case 0x54
		call	exit

loc_401AFC:				; CODE XREF: sub_401930+B5j
					; DATA XREF: .rdata:004044CCo
		mov	eax, 1		; case 0x51
		mov	ds:dword_405010, eax
		jmp	loc_4019B0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B0B:				; CODE XREF: sub_401930+5Bj
		test	ebx, ebx
		jnz	loc_401C47
		mov	[esp+28h+var_28], offset aMissingOptstri ; "missing optstring argument"
		call	sub_4013E0
		jmp	loc_401991
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B24:				; CODE XREF: sub_401930+A7j
		mov	eax, [ebp+var_10]
		test	eax, eax
		jz	short loc_401B77

loc_401B2B:				; CODE XREF: sub_401930+262j
					; sub_401930+312j
		mov	eax, [ebp+var_14]
		test	eax, eax
		jz	short loc_401B94
		mov	eax, ds:optind
		mov	edx, [ebp+var_14]
		mov	eax, [eax]
		mov	[edi+eax*4-4], edx

loc_401B40:				; CODE XREF: sub_401930+271j
		mov	eax, ds:dword_405020
		mov	edx, ds:optind
		mov	[esp+28h+var_1C], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_20], eax
		mov	eax, [edx]
		sub	esi, eax
		lea	eax, [esi+1]
		mov	[esp+28h+var_24], eax
		mov	eax, [edx]
		lea	eax, [edi+eax*4-4]

loc_401B67:				; CODE XREF: sub_401930+2D6j
		mov	[esp+28h+var_28], eax
		call	sub_401230
		mov	[esp+28h+var_28], eax
		call	exit

loc_401B77:				; CODE XREF: sub_401930+1F9j
		mov	eax, ds:optind
		mov	eax, [eax]
		cmp	eax, esi
		jl	loc_401C0B
		mov	[esp+28h+var_28], offset aMissingOptstri ; "missing optstring argument"
		call	sub_4013E0
		jmp	short loc_401B2B
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B94:				; CODE XREF: sub_401930+200j
		mov	eax, ds:optind
		mov	edx, [eax]
		mov	eax, [edi]
		mov	[edi+edx*4-4], eax
		jmp	short loc_401B40
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401BA3:				; CODE XREF: sub_401930+73j
		mov	[esp+28h+var_28], ecx
		xor	ebx, ebx
		mov	dword_403000, ebx
		call	strlen
		inc	eax
		mov	[esp+28h+var_28], eax
		call	sub_401050
		mov	[ebp+var_10], eax
		mov	ecx, offset asc_4044C7 ; "-+"
		mov	[esp+28h+var_24], ecx
		mov	eax, [edi+4]
		mov	[esp+28h+var_28], eax
		call	strspn
		mov	edx, [edi+4]
		add	eax, edx
		mov	[esp+28h+var_24], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], eax
		call	strcpy
		mov	eax, [edi]
		mov	edx, [ebp+var_10]
		mov	[edi+4], eax
		mov	eax, ds:dword_405020
		mov	[esp+28h+var_20], edx
		mov	[esp+28h+var_1C], eax
		lea	eax, [esi-1]
		mov	[esp+28h+var_24], eax
		lea	eax, [edi+4]
		jmp	loc_401B67
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C0B:				; CODE XREF: sub_401930+250j
		mov	eax, [edi+eax*4]
		mov	[esp+28h+var_28], eax
		call	strlen
		inc	eax
		mov	[esp+28h+var_28], eax
		call	sub_401050
		mov	[ebp+var_10], eax
		mov	eax, ds:optind
		mov	eax, [eax]
		mov	eax, [edi+eax*4]
		mov	[esp+28h+var_24], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], eax
		call	strcpy
		mov	eax, ds:optind
		inc	dword ptr [eax]
		jmp	loc_401B2B
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C47:				; CODE XREF: sub_401930+1DDj
		mov	[esp+28h+var_28], offset asc_404089 ; "	--"
		call	puts
		jmp	loc_401AD6
sub_401930	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401C60	proc near		; CODE XREF: sub_401930+17p
		push	ecx
		mov	ecx, esp
		add	ecx, 8

loc_401C66:				; CODE XREF: sub_401C60+1Bj
		cmp	eax, 1000h
		jb	short loc_401C7D
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		jmp	short loc_401C66
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C7D:				; CODE XREF: sub_401C60+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		jmp	eax
sub_401C60	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401C90	proc near		; CODE XREF: start+3Ap

var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_C2		= dword	ptr -0C2h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		mov	[esp+18h+var_14], eax
		mov	[esp+18h+var_18], esi
		call	sub_401E10
		sub	esp, 8
		test	eax, eax
		jz	short loc_401CC1
		mov	[esp+18h+var_18], 0

loc_401CBB:				; CODE XREF: sub_401C90+56j
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)

loc_401CC1:				; CODE XREF: sub_401C90+22j
		sub	esp, 0C0h
		lea	ebx, [esp+0D8h+var_C2+1]
		and	ebx, 0FFFFFFF0h
		mov	dword ptr [ebx], 0
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	sub_401E10
		sub	esp, 8
		mov	[esp+0D8h+var_D8], ebx
		jmp	short loc_401CBB
sub_401C90	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION puts. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fwrite. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION putchar. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strspn. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION getenv. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strtok. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strchr. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION printf. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION getopt_long. PRESS KEYPAD	"+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strcpy. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strlen. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION realloc. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION exit. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getreent. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fprintf. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS KEYPAD "+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401E10	proc near		; CODE XREF: sub_401C90+18p
					; sub_401C90+4Bp

var_18		= dword	ptr -18h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h	; lpModuleName
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_0]
		test	ebx, ebx
		jz	loc_401EFA
		mov	dword ptr [ebx+4], 0A8h
		xor	eax, eax
		mov	ecx, 96h
		mov	dword ptr [ebx+8], 3EDh
		mov	dword ptr [ebx+0Ch], 13h
		mov	[ebx+80h], eax
		mov	[ebx+84h], ecx
		mov	dword ptr [ebx+2Ch], offset dword_402040
		mov	dword ptr [ebx+30h], offset dword_402048
		mov	dword ptr [ebx+14h], offset unk_405064
		mov	eax, ds:_impure_ptr
		mov	[ebx+10h], eax

loc_401E6B:				; CODE XREF: sub_401E10+14Bj
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+0]
		mov	[ebx+28h], esi
		mov	dword ptr [ebx+48h], offset sub_402010
		mov	dword ptr [ebx+4Ch], offset sub_402000
		mov	dword ptr [ebx+50h], offset sub_401FF0
		mov	dword ptr [ebx+54h], offset sub_401FE0
		mov	dword ptr [ebx+24h], offset unk_405060
		mov	[ebx], eax
		mov	dword ptr [ebx+18h], offset malloc
		mov	dword ptr [ebx+1Ch], offset free
		mov	dword ptr [ebx+20h], offset realloc
		mov	dword ptr [ebx+44h], offset loc_401FD0
		mov	[esp+18h+var_18], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	dword ptr [ebx+34h], offset dword_403000
		mov	dword ptr [ebx+38h], offset unk_4030E0
		mov	dword ptr [ebx+3Ch], offset dword_405000
		mov	dword ptr [ebx+40h], 405090h
		call	sub_401FA0
		mov	eax, 1

loc_401EF1:				; CODE XREF: sub_401E10+FDj
		lea	esp, [ebp+var_8]
		pop	ebx
		pop	esi
		pop	ebp
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401EFA:				; CODE XREF: sub_401E10+10j
		mov	[esp+18h+var_18], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_401EF1
		mov	dword ptr [edx+4], 0A8h
		mov	ebx, edx
		mov	eax, 96h
		mov	dword ptr [edx+8], 3EDh
		mov	dword ptr [edx+0Ch], 13h
		xor	edx, edx
		mov	[ebx+80h], edx
		mov	edx, [ebx+0A4h]
		mov	[ebx+84h], eax
		mov	dword ptr [ebx+2Ch], offset dword_402040
		mov	dword ptr [ebx+30h], offset dword_402048
		mov	dword ptr [ebx+14h], offset unk_405064
		mov	eax, ds:_impure_ptr
		mov	[eax], edx
		jmp	loc_401E6B
sub_401E10	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401F70	proc near		; CODE XREF: sub_401FA0+1Fp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ebx, [ebp+arg_4]
		jmp	short loc_401F8C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F80:				; CODE XREF: sub_401F70+1Ej
		mov	edx, [ecx+4]
		mov	eax, [ecx]
		add	ecx, 8
		add	edx, esi
		add	[edx], eax

loc_401F8C:				; CODE XREF: sub_401F70+Ej
		cmp	ecx, ebx
		jb	short loc_401F80
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_401F70	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401FA0	proc near		; CODE XREF: sub_401E10+D7p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	edx, 400000h
		mov	ebp, esp
		mov	eax, offset unk_4045C0
		sub	esp, 0Ch
		mov	[esp+0Ch+var_4], edx
		mov	[esp+0Ch+var_8], eax
		mov	[esp+0Ch+var_C], offset	unk_4045C0
		call	sub_401F70
		leave
		retn
sub_401FA0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401FD0:				; DATA XREF: sub_401E10+A2o
		jmp	ds:calloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401FE0	proc near		; DATA XREF: sub_401E10+7Do
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401FE0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401FF0	proc near		; DATA XREF: sub_401E10+76o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401FF0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402000	proc near		; DATA XREF: sub_401E10+6Fo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402000	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402010	proc near		; DATA XREF: sub_401E10+68o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402010	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
dword_402040	dd 0FFFFFFFFh, 0	; DATA XREF: sub_401E10+3Eo
					; sub_401E10+12Fo
dword_402048	dd 0FFFFFFFFh, 6Dh dup(0) ; DATA XREF: sub_401E10+45o
					; sub_401E10+136o
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 000000E0 (	224.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001600
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 403000h
dword_403000	dd 1			; DATA XREF: sub_401110+18r
					; sub_401930+E0w ...
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
off_403020	dd offset aOptions	; DATA XREF: sub_401930+8Fo
					; "options"
		db    1	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  6Fh	; o
		db    0	;
		db    0	;
		db    0	;
		db    8	;
		db  40h	; @
		db  40h	; @
		db    0	;
		db    1	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  6Ch	; l
		db    0	;
		db    0	;
		db    0	;
		db  14h	;
		db  40h	; @
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  71h	; q
		db    0	;
		db    0	;
		db    0	;
		db  1Ah	;
		db  40h	; @
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  51h	; Q
		db    0	;
		db    0	;
		db    0	;
		db  27h	; '
		db  40h	; @
		db  40h	; @
		db    0	;
		db    1	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  73h	; s
		db    0	;
		db    0	;
		db    0	;
		db  2Dh	; -
		db  40h	; @
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  54h	; T
		db    0	;
		db    0	;
		db    0	;
		db  32h	; 2
		db  40h	; @
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  75h	; u
		db    0	;
		db    0	;
		db    0	;
		db  3Bh	; ;
		db  40h	; @
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  68h	; h
		db    0	;
		db    0	;
		db    0	;
		db  40h	; @
		db  40h	; @
		db  40h	; @
		db    0	;
		db    1	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  6Eh	; n
		db    0	;
		db    0	;
		db    0	;
		db  45h	; E
		db  40h	; @
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  56h	; V
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
dword_4030D0	dd 40404Dh		; DATA XREF: sub_401930+84r
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_4030E0	db    0	;		; DATA XREF: sub_401E10+C2o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_data		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 000005C0 (   1472.)
; Section size in file		: 00000600 (   1536.)
; Offset to raw	data for section: 00001800
; Flags	40000040: Data Readable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 404000h
aOptions	db 'options',0          ; DATA XREF: .data:00403020o
aLongoptions	db 'longoptions',0
aQuiet		db 'quiet',0
aQuietOutput	db 'quiet-output',0
aShell		db 'shell',0
aTest		db 'test',0
aUnquoted	db 'unquoted',0
aHelp		db 'help',0
aName		db 'name',0
aVersion	db 'version',0
aAoLNQqsTuhv	db '+ao:l:n:qQs:TuhV',0
aGetopt		db 'getopt',0           ; DATA XREF: sub_401050+1Co
					; sub_4010A0+3Do
aSOutOfMemory	db '%s: Out of memory!',0Ah,0 ; DATA XREF: sub_401050+21o
					; sub_4010A0+38o
aC		db ' -%c',0             ; DATA XREF: sub_401230+A2o
unk_40407E	db    0	;		; DATA XREF: sub_401230+DAo
aS		db ' %s',0              ; DATA XREF: sub_401230+ECo
					; sub_401230+174o
aS_0		db ' --%s',0            ; DATA XREF: sub_401230+124o
asc_404089	db ' --',0              ; DATA XREF: sub_401230+14Bo
					; sub_401930+317o
aGetoptS	db 'getopt: %s',0Ah,0   ; DATA XREF: sub_4013E0+17o
		align 4
aTryGetoptHelpF	db 'Try `getopt --help',27h,' for more information.',0Ah,0
					; DATA XREF: sub_4013E0+33o
asc_4040C7	db ', ',9,0Ah,0         ; DATA XREF: sub_401570+1o
					; sub_401570+33o
aEmptyLongOptio	db 'empty long option after -l or --long argument',0
					; DATA XREF: sub_401570+73o
aBash		db 'bash',0             ; DATA XREF: sub_401610+14o
aTcsh		db 'tcsh',0             ; DATA XREF: sub_401610+26o
aSh		db 'sh',0               ; DATA XREF: sub_401610+51o
aCsh		db 'csh',0              ; DATA XREF: sub_401610+88o
		align 4
aUnknownShellAf	db 'unknown shell after -s or --shell argument',0
					; DATA XREF: sub_401610+98o
		align 4
aUsageGetoptOpt	db 'Usage: getopt optstring parameters',0Ah,0 ; DATA XREF: sub_4016D0+Eo
aGetoptOptionsO	db '       getopt [options] [--] optstring parameters',0Ah,0
					; DATA XREF: sub_4016D0+41o
		align 4
aGetoptOption_0	db '       getopt [options] -o|--options optstring [options] [--'
					; DATA XREF: sub_4016D0+6Bo
		db ']',0Ah,0
aParameters	db '              parameters',0Ah,0 ; DATA XREF: sub_4016D0+8Co
		align 4
aHHelpThisSmall	db '  -h, --help                   This small usage guide',0Ah,0
					; DATA XREF: sub_4016D0+B6o
		align 4
aLLongoptionsLo	db '  -l, --longoptions=longopts   Long options to be recognized'
					; DATA XREF: sub_4016D0+E9o
		db 0Ah,0
		align 4
aNNamePrognameT	db '  -n, --name=progname          The name under which errors a'
					; DATA XREF: sub_4016D0+113o
		db 're reported',0Ah,0
		align 4
aOOptionsOptstr	db '  -o, --options=optstring      Short options to be recognize'
					; DATA XREF: sub_4016D0+134o
		db 'd',0Ah,0
		align 4
aQQuietDisableE	db '  -q, --quiet                  Disable error reporting by ge'
					; DATA XREF: sub_4016D0+15Eo
		db 'topt(3)',0Ah,0
		align 4
aQQuietOutputNo	db '  -Q, --quiet-output           No normal output',0Ah,0
					; DATA XREF: sub_4016D0+191o
		align 4
aSShellShellSet	db '  -s, --shell=shell            Set shell quoting conventions'
					; DATA XREF: sub_4016D0+1BBo
		db 0Ah,0
		align 4
aTTestTestForGe	db '  -T, --test                   Test for getopt(1) version',0Ah
					; DATA XREF: sub_4016D0+1DCo
		db 0
		align 4
aUUnqoteDoNotQu	db '  -u, --unqote                 Do not quote the output',0Ah,0
					; DATA XREF: sub_4016D0+206o
aVVersionOutput	db '  -V, --version                Output version information',0Ah
					; DATA XREF: sub_4016D0+239o
		db 0
aGetopt_compati	db 'GETOPT_COMPATIBLE',0 ; DATA XREF: sub_401930+43o
		align 4
aInternalErrorC	db 'internal error, contact the author.',0 ; DATA XREF: sub_401930+D0o
aGetoptEnhanced	db 'getopt (enhanced) 1.1.2',0 ; DATA XREF: sub_401930+1B2o
aMissingOptstri	db 'missing optstring argument',0 ; DATA XREF: sub_401930+1E3o
					; sub_401930+256o
asc_4044C7	db '-+',0               ; DATA XREF: sub_401930+28Fo
		align 4
off_4044CC	dd offset loc_4019EC, offset loc_401A00, offset	loc_401A00
					; DATA XREF: sub_401930+B5r
		dd offset loc_401A00, offset loc_401A00, offset	loc_4019EC ; jump table	for switch statement
		dd offset loc_401A00, offset loc_401A00, offset	loc_401A00
		dd offset loc_401A00, offset loc_401A00, offset	loc_401A00
		dd offset loc_401A00, offset loc_401A00, offset	loc_401A00
		dd offset loc_401A00, offset loc_401A00, offset	loc_401A00
		dd offset loc_401A00, offset loc_401A00, offset	loc_401A00
		dd offset loc_401A00, offset loc_401A00, offset	loc_401AFC
		dd offset loc_401A00, offset loc_401A00, offset	loc_401AF0
		dd offset loc_401A00, offset loc_401AE2, offset	loc_401A00
		dd offset loc_401A00, offset loc_401A00, offset	loc_401A00
		dd offset loc_401A00, offset loc_401A00, offset	loc_401A00
		dd offset loc_401A00, offset loc_401A00, offset	loc_401A00
		dd offset loc_401A00, offset loc_401A00, offset	loc_401A00
		dd offset loc_401A00, offset loc_401A00, offset	loc_401A00
		dd offset loc_401A00, offset loc_401AD1, offset	loc_401A00
		dd offset loc_401A00, offset loc_401A00, offset	loc_401ABD
		dd offset loc_401A00, offset loc_401A80, offset	loc_401A38
		dd offset loc_401A00, offset loc_401A29, offset	loc_401A00
		dd offset loc_401A18, offset loc_401A00, offset	loc_401A0E
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_4045C0	db    0	;		; DATA XREF: sub_401FA0+8o
					; sub_401FA0+18o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_rdata		ends

; Section 4. (virtual address 00005000)
; Virtual size			: 00000090 (	144.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 405000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_405000	dd ?			; DATA XREF: start+9r sub_401E10+C9o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_405010	dd ?			; DATA XREF: sub_401230+87r
					; sub_401230+FDr ...
dword_405014	dd ?			; DATA XREF: sub_401230+9r
					; sub_401930+FEw
dword_405018	dd ?			; DATA XREF: sub_401110+85r
					; sub_401610+3Bw ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_405020	dd ?			; DATA XREF: sub_401450+25r
					; sub_401450+9Fr ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_405030	dd ?			; DATA XREF: sub_401450+13r
					; sub_401450+4Dr ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_405040	dd ?			; DATA XREF: sub_401450+19r
					; sub_401450+C3w ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_405050	dd ?			; DATA XREF: sub_401110+8r
					; sub_401110+3Aw ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_405060	db    ?	;		; DATA XREF: sub_401E10+84o
		db    ?	;
		db    ?	;
		db    ?	;
unk_405064	db    ?	;		; DATA XREF: sub_401E10+4Co
					; sub_401E10+13Do
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
_bss		ends

;
; Imports from cygwin1
;
; Section 5. (virtual address 00006000)
; Virtual size			: 00000320 (	800.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001E00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp___getreent:dword ; DATA XREF: __getreentr
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn _ctype_:dword	; DATA XREF: sub_401110+BAr
		extrn _impure_ptr:dword	; DATA XREF: sub_401E10+53r
					; sub_401E10+144r
; void *__cdecl	calloc(size_t,size_t)
		extrn calloc:dword	; DATA XREF: .text:00401FD0r
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_401C90+2Br
					; .text:00401F60r
; void __cdecl _imp_exit(int)
		extrn __imp_exit:dword	; DATA XREF: exitr
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
; void __cdecl _imp_free(void *)
		extrn __imp_free:dword	; DATA XREF: freer
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
; char *__cdecl	_imp_getenv(const char *)
		extrn __imp_getenv:dword ; DATA	XREF: getenvr
		extrn __imp_getopt_long:dword ;	DATA XREF: getopt_longr
; void *__cdecl	_imp_malloc(size_t)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
		extrn optarg:dword	; DATA XREF: sub_401230+CFr
					; sub_401230+112r ...
		extrn opterr:dword	; DATA XREF: sub_401230+1Fr
		extrn optind:dword	; DATA XREF: sub_401230+2Ar
					; sub_401230+180r ...
		extrn __imp_printf:dword ; DATA	XREF: printfr
		extrn __imp_putchar:dword ; DATA XREF: putcharr
		extrn __imp_puts:dword	; DATA XREF: putsr
; void *__cdecl	_imp_realloc(void *,size_t)
		extrn __imp_realloc:dword ; DATA XREF: reallocr
; char *__cdecl	_imp_strchr(const char *,int)
		extrn __imp_strchr:dword ; DATA	XREF: strchrr
; char *__cdecl	_imp_strcpy(char *,const char *)
		extrn __imp_strcpy:dword ; DATA	XREF: strcpyr
; size_t __cdecl _imp_strlen(const char	*)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; size_t __cdecl _imp_strspn(const char	*,const	char *)
		extrn __imp_strspn:dword ; DATA	XREF: strspnr
; char *__cdecl	_imp_strtok(char *,const char *)
		extrn __imp_strtok:dword ; DATA	XREF: strtokr


;
; Imports from KERNEL32
;
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr



		end start
