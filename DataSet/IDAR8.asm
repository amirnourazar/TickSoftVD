

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\db2_recover.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 000013E0 (   5088.)
; Section size in file		: 00001400 (   5120.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, dword_403000
		test	eax, eax
		jz	short loc_401010
		int	3		; Trap to Debugger

loc_401010:				; CODE XREF: start+Dj
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_401138
		call	sub_401778
		mov	esp, ebp
		pop	ebp
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
a@CopyrightC199	db '@(#) Copyright (c) 1996, 1997, 1998',0Ah
		db 9,'Sleepycat Software Inc.  All rights reserved.',0Ah,0
		align 10h
a@Db_recover_c1	db '@(#)db_recover.c',9,'10.23 (Sleepycat) 10/5/98',0
aDb_recover	db 'db_recover',0       ; DATA XREF: sub_401254+48o
aChV		db 'ch:v',0             ; DATA XREF: sub_401138+60o
aRecoveryComple	db 'Recovery complete at %.24s',0 ; DATA XREF: sub_401138+B0o
aRecoveryCheckp	db 'Recovery checkpoint',0 ; DATA XREF: sub_401138+D5o
aMaximumTransac	db 'Maximum transaction id',0 ; DATA XREF: sub_401138+E4o
aSLxSLuLu	db '%s %lx %s [%lu][%lu]',0 ; DATA XREF: sub_401138+E9o
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401138	proc near		; DATA XREF: start+30o

var_28		= dword	ptr -28h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	edi
		push	esi
		push	ebx
		xor	esi, esi
		mov	edi, [ebp+arg_0]
		xor	ebx, ebx
		call	__main
		mov	[ebp+var_8], 0
		jmp	short loc_401195
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401158:				; CODE XREF: sub_401138+75j
		cmp	eax, 68h
		jz	short loc_40117C
		jg	short loc_40116C
		cmp	eax, 3Fh
		jz	short loc_401190
		cmp	eax, 63h
		jz	short loc_401174
		jmp	short loc_401190
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_40116C:				; CODE XREF: sub_401138+25j
		cmp	eax, 76h
		jz	short loc_401188
		jmp	short loc_401190
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401174:				; CODE XREF: sub_401138+2Fj
		or	bh, 4
		jmp	short loc_401195
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_40117C:				; CODE XREF: sub_401138+23j
		mov	eax, ds:dword_404004
		mov	[ebp+var_8], eax
		jmp	short loc_401195
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401188:				; CODE XREF: sub_401138+37j
		mov	esi, 1
		jmp	short loc_401195
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401190:				; CODE XREF: sub_401138+2Aj
					; sub_401138+31j ...
		call	sub_401364

loc_401195:				; CODE XREF: sub_401138+1Cj
					; sub_401138+3Fj ...
		add	esp, 0FFFFFFFCh
		push	offset aChV	; "ch:v"
		mov	eax, [ebp+arg_4]
		push	eax
		push	edi
		call	sub_401DE0
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_401158
		cmp	edi, dword_40300C
		jz	short loc_4011BC
		call	sub_401364

loc_4011BC:				; CODE XREF: sub_401138+7Dj
		call	sub_4012F0
		add	esp, 0FFFFFFFCh
		push	esi
		push	ebx
		mov	eax, [ebp+var_8]
		push	eax
		call	sub_401254
		mov	ebx, eax
		add	esp, 10h
		test	esi, esi
		jz	short loc_40122F
		add	esp, 0FFFFFFFCh
		lea	eax, [ebp+var_4]
		add	esp, 0FFFFFFF4h
		push	eax
		call	ctime
		push	eax
		push	offset aRecoveryComple ; "Recovery complete at %.24s"
		push	ebx
		call	__db_err
		mov	eax, [ebx+5Ch]
		add	esp, 20h
		add	esp, 0FFFFFFFCh
		mov	eax, [eax+4Ch]
		mov	eax, [eax+50h]
		push	eax
		mov	eax, [ebx+5Ch]
		mov	eax, [eax+4Ch]
		mov	eax, [eax+4Ch]
		push	eax
		push	offset aRecoveryCheckp ; "Recovery checkpoint"
		mov	eax, [ebx+5Ch]
		mov	eax, [eax+4Ch]
		mov	eax, [eax+40h]
		push	eax
		push	offset aMaximumTransac ; "Maximum transaction id"
		push	offset aSLxSLuLu ; "%s %lx %s [%lu][%lu]"
		push	ebx
		call	__db_err
		add	esp, 20h

loc_40122F:				; CODE XREF: sub_401138+9Ej
		add	esp, 0FFFFFFF4h
		push	ebx
		call	db_appexit
		lea	esp, [ebp-28h]
		pop	ebx
		pop	esi
		pop	edi
		mov	esp, ebp
		pop	ebp
		retn
sub_401138	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
dword_401242	dd 69707061h, 2074696Eh, 6C696166h, 8D006465h ;	DATA XREF: sub_401254+82o
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		jbe	short $+2

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401254	proc near		; CODE XREF: sub_401138+92p

var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	edi
		push	esi
		push	ebx
		add	esp, 0FFFFFFF8h
		push	1
		push	7Ch
		call	calloc
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jnz	short loc_40128C
		call	__errno
		add	esp, 0FFFFFFF8h
		mov	dword ptr [eax], 0Ch
		push	0
		push	1
		call	near ptr loc_4013CB+5
		add	esp, 10h

loc_40128C:				; CODE XREF: sub_401254+1Cj
		mov	eax, ds:dword_40400C
		mov	edi, 12F1h
		mov	eax, [eax+0Ch]
		mov	[ebx+8], eax
		mov	dword ptr [ebx+0Ch], offset aDb_recover	; "db_recover"
		mov	eax, [ebp+arg_8]
		mov	[ebx+10h], eax
		mov	eax, [ebp+arg_4]
		test	ah, 4
		jz	short loc_4012B6
		mov	edi, 14F1h

loc_4012B6:				; CODE XREF: sub_401254+5Bj
		call	__errno
		push	edi
		mov	esi, eax
		push	ebx
		push	0
		mov	eax, [ebp+arg_0]
		push	eax
		call	db_appinit
		mov	[esi], eax
		add	esp, 10h
		test	eax, eax
		jz	short loc_4012E2
		add	esp, 0FFFFFFF8h
		push	offset dword_401242
		push	1
		call	near ptr loc_4013CB+5

loc_4012E2:				; CODE XREF: sub_401254+7Dj
		lea	esp, [ebp-18h]
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		mov	esp, ebp
		pop	ebp
		retn
sub_401254	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4012F0	proc near		; CODE XREF: sub_401138+84p
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		add	esp, 0FFFFFFF8h
		push	1
		push	1
		call	signal
		add	esp, 0FFFFFFF8h
		push	1
		push	2
		call	signal
		add	esp, 20h
		add	esp, 0FFFFFFF8h
		push	1
		push	0Fh
		call	signal
		mov	esp, ebp
		pop	ebp
		retn
sub_4012F0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		dd 7 dup(90909090h)
		align 4
aUsageDb_recove	db 'usage: db_recover [-cv] [-h home]',0Ah,0 ; DATA XREF: sub_401364+Eo
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401364	proc near		; CODE XREF: sub_401138+58p
					; sub_401138+7Fp
		push	ebp
		mov	eax, ds:dword_40400C
		mov	ebp, esp
		sub	esp, 8
		add	esp, 0FFFFFFF8h
		push	offset aUsageDb_recove ; "usage: db_recover [-cv] [-h home]\n"
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 0FFFFFFF4h
		push	1
		call	exit
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		inc	eax
		sub	[ebx], ah
		sub	[ebp+72h], esp
		jb	short loc_4013D6
		arpl	[ecx], cx
		xor	[eax], esi
		db	2Eh
		xor	eax, 6C532820h
		db	65h, 65h
		jo	short near ptr loc_40142D+2
		arpl	[ecx+74h], sp
		sub	[eax], esp
		xor	[ecx], esi
		das
		xor	dh, [edi+ebp]
		cmp	[eax], edi
		add	ds:203A73h, ah

loc_4013C9:				; DATA XREF: .text:00401424o
					; sub_401468+BBo
		cmp	ah, [eax]

loc_4013CB:				; CODE XREF: sub_401254+30p
					; sub_401254+89p ...
		add	ds:55000A73h, ah
sub_401364	endp

		mov	ebp, esp
		sub	esp, 0Ch

loc_4013D6:				; CODE XREF: sub_401364+42j
		push	edi
		push	esi
		push	ebx
		mov	esi, [ebp+0Ch]
		lea	ebx, [ebp+10h]
		call	__errno
		mov	edi, [eax]
		add	esp, 0FFFFFFFCh
		mov	eax, dword_403004
		push	eax
		mov	eax, ds:dword_40400C
		push	4013C4h
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 10h
		test	esi, esi
		jz	short loc_401435
		add	esp, 0FFFFFFFCh
		mov	eax, ds:dword_40400C
		push	ebx
		push	esi
		mov	eax, [eax+0Ch]
		push	eax
		call	vfprintf
		mov	eax, ds:dword_40400C
		add	esp, 0FFFFFFF8h
		push	offset loc_4013C9
		mov	eax, [eax+0Ch]
		push	eax

loc_40142D:				; CODE XREF: sub_401364+4Ej
		call	fprintf
		add	esp, 20h

loc_401435:				; CODE XREF: .text:00401407j
		add	esp, 0FFFFFFFCh
		add	esp, 0FFFFFFF4h
		push	edi
		call	strerror
		push	eax
		mov	eax, ds:dword_40400C
		push	4013CCh
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 20h
		mov	eax, [ebp+8]
		add	esp, 0FFFFFFF4h
		push	eax
		call	exit

loc_401464:				; DATA XREF: sub_401468+4Fo
					; .text:004015AEo
		or	al, [eax]
		mov	esi, esi

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401468	proc near		; CODE XREF: .text:0040171Bp
					; .text:00401730p ...

var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	eax, dword_403004
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		push	ebx
		add	esp, 0FFFFFFFCh
		mov	esi, [ebp+arg_4]
		push	eax
		lea	ebx, [ebp+arg_8]
		mov	eax, ds:dword_40400C
		push	4013C4h
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 10h
		test	esi, esi
		jz	short loc_4014AF
		add	esp, 0FFFFFFFCh
		mov	eax, ds:dword_40400C
		push	ebx
		push	esi
		mov	eax, [eax+0Ch]
		push	eax
		call	vfprintf
		add	esp, 10h

loc_4014AF:				; CODE XREF: sub_401468+2Fj
		mov	eax, ds:dword_40400C
		add	esp, 0FFFFFFF8h
		push	offset loc_401464
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 0FFFFFFF4h
		mov	eax, [ebp+arg_0]
		push	eax
		call	exit
		lea	esi, [esi+0]
		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	edi
		push	esi
		push	ebx
		mov	esi, [ebp+arg_0]
		lea	ebx, [ebp+arg_4]
		call	__errno
		mov	edi, [eax]
		add	esp, 0FFFFFFFCh
		mov	eax, dword_403004
		push	eax
		push	4013C4h
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 10h
		test	esi, esi
		jz	short loc_401539
		add	esp, 0FFFFFFFCh
		push	ebx
		push	esi
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	vfprintf
		add	esp, 0FFFFFFF8h
		push	offset loc_4013C9
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 20h

loc_401539:				; CODE XREF: sub_401468+A3j
		add	esp, 0FFFFFFFCh
		add	esp, 0FFFFFFF4h
		push	edi
		call	strerror
		push	eax
		push	4013CCh
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		lea	esp, [ebp-18h]
		pop	ebx
		pop	esi
		pop	edi
		mov	esp, ebp
		pop	ebp
		retn
sub_401468	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		push	ebx
		add	esp, 0FFFFFFFCh
		mov	eax, dword_403004
		mov	esi, [ebp+8]
		lea	ebx, [ebp+0Ch]
		push	eax
		push	4013C4h
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 10h
		test	esi, esi
		jz	short loc_4015AB
		add	esp, 0FFFFFFFCh
		push	ebx
		push	esi
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	vfprintf
		add	esp, 10h

loc_4015AB:				; CODE XREF: .text:00401593j
		add	esp, 0FFFFFFF8h
		push	offset loc_401464
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		lea	esp, [ebp-18h]
		pop	ebx
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
aRrrrrrrrrrrrrr	db '@(#)getlong.c',9,'10.3 (Sleepycat) 4/1'
		db '0/98',0
aS_0		db '%s',0               ; DATA XREF: .text:004016F4o
aSInvalidNumeri	db '%s: Invalid numeric argument',0 ; DATA XREF: .text:00401714o
		dd 6 dup(90909090h)
		align 4
aSLessThanMinim	db '%s: Less than minimum value (%ld)',0 ; DATA XREF: .text:00401729o
		dd 7 dup(90909090h)
		align 4
aSGreaterThanMa	db '%s: Greater than maximum value (%ld)',0 ; DATA XREF: .text:00401742o
		align 4
		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	edi
		push	esi
		push	ebx
		mov	esi, [ebp+8]
		mov	edi, [ebp+0Ch]
		call	__errno
		mov	dword ptr [eax], 0
		add	esp, 0FFFFFFFCh
		push	0Ah
		lea	eax, [ebp-4]
		push	eax
		push	esi
		call	strtol
		mov	ebx, eax
		add	esp, 10h
		cmp	ebx, 80000000h
		jz	short loc_4016E6
		cmp	ebx, 7FFFFFFFh
		jnz	short loc_401703

loc_4016E6:				; CODE XREF: .text:004016DCj
		call	__errno
		cmp	dword ptr [eax], 22h
		jnz	short loc_401703
		add	esp, 0FFFFFFFCh
		push	esi
		push	offset aS_0	; "%s"
		push	1
		call	near ptr loc_4013CB+5
		add	esp, 10h

loc_401703:				; CODE XREF: .text:004016E4j
					; .text:004016EEj
		cmp	byte ptr [esi],	0
		jz	short loc_401710
		mov	eax, [ebp-4]
		cmp	byte ptr [eax],	0
		jz	short loc_401723

loc_401710:				; CODE XREF: .text:00401706j
		add	esp, 0FFFFFFFCh
		push	esi
		push	offset aSInvalidNumeri ; "%s: Invalid numeric argument"
		push	1
		call	sub_401468
		add	esp, 10h

loc_401723:				; CODE XREF: .text:0040170Ej
		cmp	ebx, edi
		jge	short loc_401738
		push	edi
		push	esi
		push	offset aSLessThanMinim ; "%s: Less than	minimum	value (%ld)"
		push	1
		call	sub_401468
		add	esp, 10h

loc_401738:				; CODE XREF: .text:00401725j
		cmp	ebx, [ebp+10h]
		jle	short loc_40174E
		mov	eax, [ebp+10h]
		push	eax
		push	esi
		push	offset aSGreaterThanMa ; "%s: Greater than maximum value (%ld)"
		push	1
		call	sub_401468

loc_40174E:				; CODE XREF: .text:0040173Bj
		mov	eax, [ebp+14h]
		lea	esp, [ebp-28h]
		mov	[eax], ebx
		pop	ebx
		pop	esi
		pop	edi
		mov	esp, ebp
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION db_appinit. PRESS	KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION db_appexit. PRESS	KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __db_err.	PRESS KEYPAD "+" TO EXPAND]
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401778	proc near		; CODE XREF: start+37p

var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		xor	ebx, ebx
		mov	[esp+18h+var_18], esi
		mov	[esp+18h+var_14], 0
		call	sub_4021E0
		sub	esp, 8
		test	eax, eax
		jnz	short loc_4017C1
		sub	esp, 0B0h
		lea	ebx, [esp+0C8h+var_C0]
		mov	[esp+0C8h+var_C0], 0
		mov	[esp+0C8h+var_C8], esi
		mov	[esp+0C8h+var_C4], ebx
		call	sub_4021E0
		sub	esp, 8

loc_4017C1:				; CODE XREF: sub_401778+26j
		mov	[esp+0C8h+var_C8], ebx
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
sub_401778	endp

; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 4
dword_4017E0	dd 90909000h, 7	dup(90909090h) ; DATA XREF: sub_401A80+67o
					; sub_401A80+F1o ...
aOptionRequires	db 'option requires an argument -- %c',0 ; DATA XREF: sub_401A80+210o
					; sub_401A80+2A6o
		dd 7 dup(90909090h)
		align 4
aOptionRequir_0	db 'option requires an argument -- %s',0 ; DATA XREF: .text:004020C2o
aAmbiguousOptio	db 'ambiguous option -- %.*s',0 ; DATA XREF: .text:004021A6o
		align 8
aOptionDoesnTTa	db 'option doesn',27h,'t take an argument -- %.*s',0
					; DATA XREF: .text:00401FC7o
aUnknownOptionC	db 'unknown option -- %c',0 ; DATA XREF: sub_401A80+2FEo
aUnknownOptionS	db 'unknown option -- %s',0 ; DATA XREF: .text:00402152o
aS		db '%s: ',0             ; DATA XREF: sub_4018E0+1Ao
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4018E0	proc near		; CODE XREF: sub_401960+13p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_8], ebx
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_4]
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_14], offset aS ; "%s: "
		mov	[esp+18h+var_18], eax
		mov	eax, ds:__progname
		mov	eax, [eax]
		mov	[esp+18h+var_10], eax
		call	fprintf
		test	ebx, ebx
		jz	short loc_401931
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_10], esi
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], eax
		call	vfprintf

loc_401931:				; CODE XREF: sub_4018E0+37j
		mov	[ebp+arg_0], 0Ah
		mov	ebx, [ebp+var_8]
		mov	eax, ds:dword_40400C
		mov	esi, [ebp+var_4]
		mov	eax, [eax+0Ch]
		mov	[ebp+arg_4], eax
		mov	esp, ebp
		pop	ebp
		jmp	loc_402360
sub_4018E0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401960	proc near		; CODE XREF: sub_401A80+21Bp
					; sub_401A80+2B5p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+arg_0]
		lea	edx, [ebp+arg_4]
		mov	[esp+8+var_4], edx
		mov	[esp+8+var_8], eax
		call	sub_4018E0
		mov	esp, ebp
		pop	ebp
		retn
sub_401960	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401980	proc near		; CODE XREF: sub_4019C0+33p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	eax, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		cdq
		idiv	ebx
		test	edx, edx
		mov	ecx, edx
		jz	short loc_4019AD
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_4019A0:				; CODE XREF: sub_401980+2Bj
		mov	eax, ebx
		mov	ebx, ecx
		cdq
		idiv	ecx
		test	edx, edx
		mov	ecx, edx
		jnz	short loc_4019A0

loc_4019AD:				; CODE XREF: sub_401980+11j
		mov	eax, ebx
		pop	ebx
		pop	ebp
		retn
sub_401980	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4019C0	proc near		; CODE XREF: sub_401A80+94p
					; sub_401DE0+5Cp ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edx, [ebp+arg_4]
		sub	eax, ebx
		mov	edi, [ebp+arg_C]
		mov	[ebp+var_18], eax
		mov	eax, esi
		sub	esi, ebx
		sub	eax, edx
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_18]
		mov	[esp+28h+var_28], eax
		mov	eax, [ebp+var_1C]
		mov	[esp+28h+var_24], eax
		call	sub_401980
		mov	[ebp+var_14], eax
		mov	eax, esi
		cdq
		idiv	[ebp+var_14]
		mov	[ebp+var_10], 0
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_14]
		cmp	[ebp+var_10], eax
		jge	short loc_401A64
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401A20:				; CODE XREF: sub_4019C0+A2j
		mov	esi, [ebp+arg_4]
		mov	eax, [ebp+var_10]
		mov	ebx, [ebp+var_20]
		add	esi, eax
		test	ebx, ebx
		mov	ecx, esi
		jle	short loc_401A59
		mov	ebx, [ebp+var_20]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401A40:				; CODE XREF: sub_4019C0+97j
		cmp	ecx, [ebp+arg_4]
		jl	short loc_401A70
		mov	edx, [ebp+var_18]
		sub	ecx, edx

loc_401A4A:				; CODE XREF: sub_4019C0+B5j
		mov	edx, [edi+ecx*4]
		dec	ebx
		mov	eax, [edi+esi*4]
		mov	[edi+ecx*4], eax
		mov	[edi+esi*4], edx
		jnz	short loc_401A40

loc_401A59:				; CODE XREF: sub_4019C0+6Fj
		inc	[ebp+var_10]
		mov	eax, [ebp+var_14]
		cmp	[ebp+var_10], eax
		jl	short loc_401A20

loc_401A64:				; CODE XREF: sub_4019C0+51j
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_401A70:				; CODE XREF: sub_4019C0+83j
		mov	eax, [ebp+var_1C]
		add	ecx, eax
		jmp	short loc_401A4A
sub_4019C0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401A80	proc near		; CODE XREF: sub_401DE0+1Dp
					; .text:00401E8Dp

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		xor	ebx, ebx
		sub	esp, 1Ch
		mov	ds:dword_404004, ebx
		mov	ecx, dword_40300C
		mov	esi, [ebp+arg_0]
		mov	edi, [ebp+arg_8]
		test	ecx, ecx
		jnz	loc_401DD0
		mov	eax, ds:dword_404000
		test	eax, eax
		jnz	short loc_401AC1
		mov	edx, 1
		mov	dword_40300C, edx

loc_401AB9:				; CODE XREF: sub_401A80+355j
		test	eax, eax
		jz	loc_401DB8

loc_401AC1:				; CODE XREF: sub_401A80+2Cj
		mov	eax, 0FFFFFFFFh
		mov	dword_40301C, eax
		mov	eax, 0FFFFFFFFh
		mov	dword_403018, eax

loc_401AD5:				; CODE XREF: sub_401A80+346j
		mov	edx, dword_40300C
		xor	ebx, ebx
		mov	ds:dword_404000, ebx
		cmp	edx, esi
		jl	short loc_401B61
		mov	ecx, offset dword_4017E0
		mov	dword_403014, ecx
		mov	ecx, dword_40301C
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_401B50
		mov	[esp+28h+var_20], edx
		mov	eax, dword_403018
		mov	[esp+28h+var_24], ecx
		mov	[esp+28h+var_28], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_1C], eax
		call	sub_4019C0
		mov	edx, dword_403018
		mov	eax, dword_40301C
		sub	eax, edx
		sub	dword_40300C, eax

loc_401B2C:				; CODE XREF: sub_401A80+D8j
					; sub_401A80+DFj
		mov	eax, 0FFFFFFFFh
		mov	dword_40301C, eax
		mov	eax, 0FFFFFFFFh
		mov	dword_403018, eax

loc_401B40:				; CODE XREF: sub_401A80+FBj
		mov	eax, 0FFFFFFFFh

loc_401B45:				; CODE XREF: sub_401A80+1AEj
					; sub_401A80+23Bj ...
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401B50:				; CODE XREF: sub_401A80+7Bj
		mov	eax, dword_403018
		cmp	eax, 0FFFFFFFFh
		jz	short loc_401B2C
		mov	dword_40300C, eax
		jmp	short loc_401B2C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B61:				; CODE XREF: sub_401A80+65j
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx+edx*4]
		mov	dword_403014, eax
		cmp	byte ptr [eax],	2Dh
		jz	short loc_401B80

loc_401B71:				; CODE XREF: sub_401A80+104j
		mov	eax, offset dword_4017E0
		mov	dword_403014, eax
		jmp	short loc_401B40
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401B80:				; CODE XREF: sub_401A80+EFj
		cmp	byte ptr [eax+1], 0
		jz	short loc_401B71
		cmp	dword_403018, 0FFFFFFFFh
		jz	short loc_401B9C
		cmp	dword_40301C, 0FFFFFFFFh
		jz	loc_401DAD

loc_401B9C:				; CODE XREF: sub_401A80+10Dj
					; sub_401A80+333j
		mov	eax, dword_403014
		mov	edx, eax
		cmp	byte ptr [eax+1], 0
		jz	short loc_401BC0
		inc	eax
		mov	dword_403014, eax
		cmp	byte ptr [edx+1], 2Dh
		jz	loc_401DA8
		lea	esi, [esi+0]

loc_401BC0:				; CODE XREF: sub_401A80+127j
					; sub_401A80+340j
		movsx	ebx, byte ptr [eax]
		lea	ecx, [eax+1]
		mov	dword_403014, ecx
		cmp	ebx, 3Ah
		jz	loc_401D65
		movzx	eax, byte ptr [edi]
		xor	edx, edx
		cmp	al, 2Dh
		jz	loc_401D9E
		cmp	al, 2Bh
		jz	loc_401D9E

loc_401BEA:				; CODE XREF: sub_401A80+323j
		lea	edx, [edx+edi]
		mov	eax, ebx
		mov	ah, al

loc_401BF1:				; CODE XREF: sub_401A80+17Aj
		mov	al, [edx]
		cmp	al, ah
		jz	short loc_401BFE
		inc	edx
		test	al, al
		jnz	short loc_401BF1
		xor	edx, edx

loc_401BFE:				; CODE XREF: sub_401A80+175j
		mov	eax, edx
		mov	[ebp+var_14], eax
		test	eax, eax
		jz	loc_401D65
		cmp	ebx, 57h
		jz	loc_401CE3

loc_401C14:				; CODE XREF: sub_401A80+267j
		mov	eax, [ebp+var_14]
		mov	edx, [ebp+var_14]
		inc	eax
		cmp	byte ptr [edx+1], 3Ah
		jz	short loc_401C33
		cmp	byte ptr [ecx],	0
		jnz	short loc_401C2C
		inc	dword_40300C

loc_401C2C:				; CODE XREF: sub_401A80+1A4j
					; sub_401A80+1DEj
		mov	eax, ebx
		jmp	loc_401B45
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C33:				; CODE XREF: sub_401A80+19Fj
		xor	edx, edx
		mov	ds:dword_404004, edx
		cmp	byte ptr [ecx],	0
		jz	short loc_401C60
		mov	ds:dword_404004, ecx

loc_401C46:				; CODE XREF: sub_401A80+1E4j
		mov	edx, dword_40300C

loc_401C4C:				; CODE XREF: sub_401A80+25Ej
		mov	ecx, offset dword_4017E0
		inc	edx
		mov	dword_403014, ecx
		mov	dword_40300C, edx
		jmp	short loc_401C2C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C60:				; CODE XREF: sub_401A80+1BEj
		cmp	byte ptr [eax+1], 3Ah
		jz	short loc_401C46
		mov	edx, dword_40300C
		inc	edx
		cmp	edx, esi
		mov	dword_40300C, edx
		jl	short loc_401CD3
		mov	esi, dword_403008
		mov	eax, offset dword_4017E0
		mov	dword_403014, eax
		test	esi, esi
		jz	short loc_401CA0
		cmp	byte ptr [edi],	3Ah
		jz	short loc_401CA0
		mov	[esp+28h+var_28], offset aOptionRequires ; "option requires an argument	-- %c"
		mov	[esp+28h+var_24], ebx
		call	sub_401960

loc_401CA0:				; CODE XREF: sub_401A80+209j
					; sub_401A80+20Ej
		mov	dword_403010, ebx
		movzx	edx, byte ptr [edi]
		cmp	dl, 2Dh
		jz	short loc_401CCB
		cmp	dl, 2Bh

loc_401CB1:				; CODE XREF: sub_401A80+2CBj
		jz	short loc_401CCB

loc_401CB3:				; CODE XREF: sub_401A80+24Fj
		cmp	dl, 3Ah
		mov	eax, 3Fh
		jnz	loc_401B45

loc_401CC1:				; CODE XREF: sub_401A80+251j
		mov	eax, 3Ah
		jmp	loc_401B45
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401CCB:				; CODE XREF: sub_401A80+22Cj
					; sub_401A80+231j ...
		cmp	byte ptr [edi+1], 3Ah
		jnz	short loc_401CB3
		jmp	short loc_401CC1
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401CD3:				; CODE XREF: sub_401A80+1F5j
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx+edx*4]
		mov	ds:dword_404004, eax
		jmp	loc_401C4C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401CE3:				; CODE XREF: sub_401A80+18Ej
		cmp	byte ptr [eax+1], 3Bh
		jnz	loc_401C14
		cmp	byte ptr [ecx],	0
		mov	eax, 0FFFFFFFEh
		jnz	loc_401B45
		mov	edx, dword_40300C
		inc	edx
		cmp	edx, esi
		mov	dword_40300C, edx
		jl	short loc_401D50
		mov	ecx, dword_403008
		mov	esi, offset dword_4017E0
		mov	dword_403014, esi
		test	ecx, ecx
		jz	short loc_401D3A
		cmp	byte ptr [edi],	3Ah
		jz	short loc_401D3A
		mov	[esp+28h+var_28], offset aOptionRequires ; "option requires an argument	-- %c"
		mov	[esp+28h+var_24], 57h
		call	sub_401960

loc_401D3A:				; CODE XREF: sub_401A80+29Fj
					; sub_401A80+2A4j
		mov	dword_403010, ebx
		movzx	eax, byte ptr [edi]
		cmp	al, 2Dh
		mov	dl, al
		jz	short loc_401CCB
		cmp	al, 2Bh
		jmp	loc_401CB1
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D50:				; CODE XREF: sub_401A80+28Aj
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx+edx*4]

loc_401D56:				; CODE XREF: sub_401A80+32Bj
		mov	dword_403014, eax
		mov	eax, 0FFFFFFFEh
		jmp	loc_401B45
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D65:				; CODE XREF: sub_401A80+14Fj
					; sub_401A80+185j
		cmp	byte ptr [ecx],	0
		jnz	short loc_401D70
		inc	dword_40300C

loc_401D70:				; CODE XREF: sub_401A80+2E8j
		mov	eax, dword_403008
		test	eax, eax
		jz	short loc_401D8E
		cmp	byte ptr [edi],	3Ah
		jz	short loc_401D8E
		mov	[esp+28h+var_28], offset aUnknownOptionC ; "unknown option -- %c"
		mov	[esp+28h+var_24], ebx
		call	sub_401960

loc_401D8E:				; CODE XREF: sub_401A80+2F7j
					; sub_401A80+2FCj
		mov	dword_403010, ebx
		mov	eax, 3Fh
		jmp	loc_401B45
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D9E:				; CODE XREF: sub_401A80+15Cj
					; sub_401A80+164j
		mov	edx, 1
		jmp	loc_401BEA
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401DA8:				; CODE XREF: sub_401A80+133j
		lea	eax, [edx+2]
		jmp	short loc_401D56
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401DAD:				; CODE XREF: sub_401A80+116j
		mov	dword_40301C, edx
		jmp	loc_401B9C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401DB8:				; CODE XREF: sub_401A80+3Bj
		mov	eax, dword_403014
		cmp	byte ptr [eax],	0
		jnz	loc_401BC0
		jmp	loc_401AD5
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_401DD0:				; CODE XREF: sub_401A80+1Fj
		mov	eax, ds:dword_404000
		jmp	loc_401AB9
sub_401A80	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401DE0	proc near		; CODE XREF: sub_401138+6Ap

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], ebx
		mov	eax, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	[esp+18h+var_18], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_10], eax
		call	sub_401A80
		cmp	eax, 0FFFFFFFEh
		jz	short loc_401E10

loc_401E07:				; CODE XREF: sub_401DE0+8Dj
		mov	ebx, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401E10:				; CODE XREF: sub_401DE0+25j
		mov	ecx, dword_40300C
		mov	edx, dword_40301C
		inc	ecx
		mov	dword_40300C, ecx
		cmp	edx, 0FFFFFFFFh
		jz	short loc_401E54
		mov	[esp+18h+var_14], edx
		mov	eax, dword_403018
		mov	[esp+18h+var_10], ecx
		mov	[esp+18h+var_C], ebx
		mov	[esp+18h+var_18], eax
		call	sub_4019C0
		mov	edx, dword_403018
		mov	eax, dword_40301C
		sub	eax, edx
		sub	dword_40300C, eax

loc_401E54:				; CODE XREF: sub_401DE0+46j
		mov	eax, 0FFFFFFFFh
		mov	dword_40301C, eax
		mov	eax, 0FFFFFFFFh
		mov	dword_403018, eax
		mov	eax, 0FFFFFFFFh
		jmp	short loc_401E07
sub_401DE0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	eax, [ebp+8]
		mov	edx, [ebp+10h]
		mov	[esp], eax
		mov	eax, [ebp+0Ch]
		mov	[esp+8], edx
		mov	[esp+4], eax
		call	sub_401A80
		cmp	eax, 0FFFFFFFEh
		jz	short loc_401EA0

loc_401E97:				; CODE XREF: .text:00401F1Dj
					; .text:00402010j ...
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401EA0:				; CODE XREF: .text:00401E95j
		mov	dword ptr [ebp-18h], 0FFFFFFFFh
		mov	ecx, dword_40300C
		mov	ebx, offset dword_4017E0
		mov	edi, dword_403014
		mov	dword_403014, ebx
		inc	ecx
		mov	dword_40300C, ecx
		cmp	byte ptr [edi],	0
		jnz	short loc_401F22
		mov	edx, dword_40301C
		cmp	edx, 0FFFFFFFFh
		jz	short loc_401F04
		mov	[esp+8], ecx
		mov	eax, dword_403018
		mov	ecx, [ebp+0Ch]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[esp+0Ch], ecx
		call	sub_4019C0
		mov	edx, dword_403018
		mov	eax, dword_40301C
		sub	eax, edx
		sub	dword_40300C, eax

loc_401F04:				; CODE XREF: .text:00401ED3j
		mov	eax, 0FFFFFFFFh
		mov	dword_40301C, eax
		mov	eax, 0FFFFFFFFh
		mov	dword_403018, eax
		mov	eax, 0FFFFFFFFh
		jmp	loc_401E97
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F22:				; CODE XREF: .text:00401EC8j
		mov	ecx, 3Dh
		mov	eax, ecx
		mov	edx, edi
		mov	ah, al

loc_401F2D:				; CODE XREF: .text:00401F36j
		mov	al, [edx]
		cmp	al, ah
		jz	short loc_401F3A
		inc	edx
		test	al, al
		jnz	short loc_401F2D
		xor	edx, edx

loc_401F3A:				; CODE XREF: .text:00401F31j
		mov	eax, edx
		mov	[ebp-10h], eax
		test	eax, eax
		jz	loc_4021C7
		inc	dword ptr [ebp-10h]
		sub	eax, edi
		mov	[ebp-14h], eax

loc_401F4F:				; CODE XREF: .text:004021D2j
		mov	ecx, [ebp+14h]
		xor	esi, esi
		mov	eax, [ecx]
		test	eax, eax
		jz	short loc_401F8F
		xor	ebx, ebx
		lea	esi, [esi+0]

loc_401F60:				; CODE XREF: .text:00401F8Dj
		mov	[esp], edi
		mov	edx, [ebp+14h]
		mov	ecx, [ebp-14h]
		mov	eax, [edx+ebx]
		mov	[esp+8], ecx
		mov	[esp+4], eax
		call	strncmp
		test	eax, eax
		jz	loc_402174

loc_401F81:				; CODE XREF: .text:00402190j
		mov	edx, [ebp+14h]
		add	ebx, 10h
		inc	esi
		mov	eax, [edx+ebx]
		test	eax, eax
		jnz	short loc_401F60

loc_401F8F:				; CODE XREF: .text:00401F58j
					; .text:004021C2j
		cmp	dword ptr [ebp-18h], 0FFFFFFFFh
		jz	loc_402140
		mov	eax, [ebp-18h]
		mov	ecx, [ebp+14h]
		shl	eax, 4
		mov	esi, [ecx+eax+4]
		test	esi, esi
		jnz	loc_402034
		mov	ebx, [ebp-10h]
		test	ebx, ebx
		jz	short loc_402034
		mov	ecx, dword_403008
		test	ecx, ecx
		jz	short loc_401FDE
		mov	eax, [ebp+10h]
		cmp	byte ptr [eax],	3Ah
		jz	short loc_401FDE
		mov	dword ptr [esp], offset	aOptionDoesnTTa	; "option doesn't take an argument -- %.*s"...
		mov	edx, [ebp-14h]
		mov	[esp+8], edi
		mov	[esp+4], edx
		call	sub_401960

loc_401FDE:				; CODE XREF: .text:00401FBDj
					; .text:00401FC5j
		mov	eax, [ebp-18h]
		mov	ecx, [ebp+14h]
		shl	eax, 4
		mov	edx, [ecx+eax+8]
		test	edx, edx
		jnz	short loc_40202B
		mov	eax, [ecx+eax+0Ch]
		mov	dword_403010, eax

loc_401FF8:				; CODE XREF: .text:00402032j
		mov	edx, [ebp+10h]
		movzx	eax, byte ptr [edx]
		cmp	al, 2Dh
		mov	dl, al
		jz	short loc_402020
		cmp	al, 2Bh
		jz	short loc_402020

loc_402008:				; CODE XREF: .text:00402027j
					; .text:00402100j
		cmp	dl, 3Ah
		mov	eax, 3Fh
		jnz	loc_401E97

loc_402016:				; CODE XREF: .text:00402029j
		mov	eax, 3Ah
		jmp	loc_401E97
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402020:				; CODE XREF: .text:00402002j
					; .text:00402006j
		mov	ecx, [ebp+10h]
		cmp	byte ptr [ecx+1], 3Ah

loc_402027:				; CODE XREF: .text:0040210Dj
		jnz	short loc_402008
		jmp	short loc_402016
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40202B:				; CODE XREF: .text:00401FEDj
		xor	eax, eax
		mov	dword_403010, eax
		jmp	short loc_401FF8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402034:				; CODE XREF: .text:00401FA8j
					; .text:00401FB3j
		mov	eax, [ebp-18h]
		mov	ecx, [ebp+14h]
		shl	eax, 4
		mov	edx, [ecx+eax+4]
		lea	eax, [edx-1]
		cmp	eax, 1
		ja	short loc_40205C
		mov	eax, [ebp-10h]
		test	eax, eax
		jz	loc_40211C
		mov	eax, [ebp-10h]
		mov	ds:dword_404004, eax

loc_40205C:				; CODE XREF: .text:00402047j
					; .text:0040211Dj ...
		mov	eax, [ebp-18h]
		mov	edx, [ebp+14h]
		shl	eax, 4
		cmp	dword ptr [edx+eax+4], 1
		jz	short loc_4020A6

loc_40206C:				; CODE XREF: .text:004020AEj
		mov	eax, [ebp-18h]
		mov	ecx, [ebp+14h]
		shl	eax, 4
		mov	edx, [ecx+eax+8]
		test	edx, edx
		jz	short loc_40209D
		mov	eax, [ecx+eax+0Ch]
		mov	[edx], eax
		xor	eax, eax

loc_402085:				; CODE XREF: .text:004020A4j
		mov	ecx, [ebp+18h]
		test	ecx, ecx
		jz	loc_401E97
		mov	edx, [ebp-18h]
		mov	ecx, [ebp+18h]
		mov	[ecx], edx
		jmp	loc_401E97
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40209D:				; CODE XREF: .text:0040207Bj
		mov	edx, [ebp+14h]
		mov	eax, [edx+eax+0Ch]
		jmp	short loc_402085
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4020A6:				; CODE XREF: .text:0040206Aj
		mov	esi, ds:dword_404004
		test	esi, esi
		jnz	short loc_40206C
		mov	ebx, dword_403008
		test	ebx, ebx
		jz	short loc_4020D2
		mov	ecx, [ebp+10h]
		cmp	byte ptr [ecx],	3Ah
		jz	short loc_4020D2
		mov	dword ptr [esp], offset	aOptionRequir_0	; "option requires an argument -- %s"
		mov	[esp+4], edi
		call	sub_401960

loc_4020D2:				; CODE XREF: .text:004020B8j
					; .text:004020C0j
		mov	eax, [ebp-18h]
		mov	edx, [ebp+14h]
		shl	eax, 4
		mov	ecx, [edx+eax+8]
		test	ecx, ecx
		jnz	short loc_402112
		mov	eax, [edx+eax+0Ch]
		mov	dword_403010, eax

loc_4020EC:				; CODE XREF: .text:0040211Aj
		dec	dword_40300C
		mov	ecx, [ebp+10h]
		movzx	edx, byte ptr [ecx]
		cmp	dl, 2Dh
		jz	short loc_402106
		cmp	dl, 2Bh
		jnz	loc_402008

loc_402106:				; CODE XREF: .text:004020FBj
		mov	eax, [ebp+10h]
		cmp	byte ptr [eax+1], 3Ah
		jmp	loc_402027
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402112:				; CODE XREF: .text:004020E1j
		xor	edi, edi
		mov	dword_403010, edi
		jmp	short loc_4020EC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40211C:				; CODE XREF: .text:0040204Ej
		dec	edx
		jnz	loc_40205C
		mov	eax, dword_40300C
		mov	ecx, [ebp+0Ch]
		mov	edx, [ecx+eax*4]
		inc	eax
		mov	dword_40300C, eax
		mov	ds:dword_404004, edx
		jmp	loc_40205C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_402140:				; CODE XREF: .text:00401F93j
		mov	esi, dword_403008
		test	esi, esi
		jz	short loc_402162
		mov	edx, [ebp+10h]
		cmp	byte ptr [edx],	3Ah
		jz	short loc_402162
		mov	dword ptr [esp], offset	aUnknownOptionS	; "unknown option -- %s"
		mov	[esp+4], edi
		call	sub_401960

loc_402162:				; CODE XREF: .text:00402148j
					; .text:00402150j ...
		xor	ebx, ebx
		mov	eax, 3Fh
		mov	dword_403010, ebx
		jmp	loc_401E97
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402174:				; CODE XREF: .text:00401F7Bj
		mov	edx, [ebp+14h]
		mov	eax, [edx+ebx]
		mov	[esp], eax
		call	strlen
		cmp	eax, [ebp-14h]
		jz	short loc_4021BF
		cmp	dword ptr [ebp-18h], 0FFFFFFFFh
		jnz	short loc_402195
		mov	[ebp-18h], esi
		jmp	loc_401F81
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402195:				; CODE XREF: .text:0040218Bj
		mov	eax, dword_403008
		test	eax, eax
		jz	short loc_402162
		mov	ecx, [ebp+10h]
		cmp	byte ptr [ecx],	3Ah
		jz	short loc_402162
		mov	dword ptr [esp], offset	aAmbiguousOptio	; "ambiguous option -- %.*s"
		mov	eax, [ebp-14h]
		mov	[esp+8], edi
		mov	[esp+4], eax
		call	sub_401960
		jmp	short loc_402162
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4021BF:				; CODE XREF: .text:00402185j
		mov	[ebp-18h], esi
		jmp	loc_401F8F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4021C7:				; CODE XREF: .text:00401F41j
		mov	[esp], edi
		call	strlen
		mov	[ebp-14h], eax
		jmp	loc_401F4F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4021E0	proc near		; CODE XREF: sub_401778+1Cp
					; sub_401778+41p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		xor	eax, eax
		push	ebx
		sub	esp, 4		; lpModuleName
		mov	ebx, [ebp+arg_4]
		test	ebx, ebx
		jz	loc_4022DC

loc_4021F4:				; CODE XREF: sub_4021E0+118j
		mov	dword ptr [ebx+4], 0A8h
		xor	ecx, ecx
		mov	edx, 35h
		mov	dword ptr [ebx+8], 3EBh
		test	eax, eax
		mov	dword ptr [ebx+0Ch], 0Bh
		mov	[ebx+80h], ecx
		mov	[ebx+84h], edx
		mov	dword ptr [ebx+2Ch], offset dword_4023D0
		mov	dword ptr [ebx+30h], offset dword_4023D8
		mov	dword ptr [ebx+14h], offset unk_404008
		jz	loc_4022D0
		mov	eax, [ebx+0A4h]
		mov	ds:dword_40400C, eax

loc_402244:				; CODE XREF: sub_4021E0+F7j
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [ebx+24h], offset unk_404010
		mov	dword ptr [ebx+48h], offset sub_4023B0
		mov	dword ptr [ebx+4Ch], offset sub_4023A0
		mov	[ebx+28h], eax
		mov	dword ptr [ebx+50h], offset sub_402390
		mov	dword ptr [ebx+54h], offset sub_402380
		mov	eax, [ebp+0]
		mov	dword ptr [ebx+44h], offset calloc
		mov	dword ptr [ebx+18h], offset loc_402378
		mov	dword ptr [ebx+1Ch], offset loc_402370
		mov	[ebx], eax
		mov	dword ptr [ebx+20h], offset loc_402368
		mov	[esp+8+var_8], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	eax, 1
		mov	dword ptr [ebx+34h], offset dword_403000
		mov	dword ptr [ebx+38h], offset unk_403030
		mov	dword ptr [ebx+3Ch], offset dword_404000
		mov	dword ptr [ebx+40h], 404014h

loc_4022C8:				; CODE XREF: sub_4021E0+10Fj
		mov	ebx, [ebp+var_4]
		leave
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4022D0:				; CODE XREF: sub_4021E0+53j
		mov	dword ptr [ebx+10h], offset dword_40400C
		jmp	loc_402244
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4022DC:				; CODE XREF: sub_4021E0+Ej
		mov	[esp+8+var_8], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_4022C8
		mov	ebx, edx
		mov	eax, 1
		jmp	loc_4021F4
sub_4021E0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION exit. PRESS KEYPAD "+" TO	EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fprintf. PRESS KEYPAD "+"	TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION signal. PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __errno. PRESS KEYPAD "+"	TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION calloc. PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION ctime. PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strerror.	PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION vfprintf.	PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strtol. PRESS KEYPAD "+" TO EXPAND]
		align 4
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strncmp. PRESS KEYPAD "+"	TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strlen. PRESS KEYPAD "+" TO EXPAND]
		align 4

loc_402360:				; CODE XREF: sub_4018E0+6Cj
		jmp	ds:fputc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_402368:				; DATA XREF: sub_4021E0+AEo
		jmp	ds:realloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_402370:				; DATA XREF: sub_4021E0+A5o
		jmp	ds:free
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_402378:				; DATA XREF: sub_4021E0+9Eo
		jmp	ds:malloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402380	proc near		; DATA XREF: sub_4021E0+8Do
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402380	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402390	proc near		; DATA XREF: sub_4021E0+86o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402390	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4023A0	proc near		; DATA XREF: sub_4021E0+7Co
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4023A0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4023B0	proc near		; DATA XREF: sub_4021E0+75o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4023B0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 4
dword_4023D0	dd 0FFFFFFFFh, 0	; DATA XREF: sub_4021E0+3Eo
dword_4023D8	dd 0FFFFFFFFh, 9 dup(0)	; DATA XREF: sub_4021E0+45o
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 00000030 (	 48.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001800
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 403000h
dword_403000	dd 0			; DATA XREF: start+6r sub_4021E0+CCo
dword_403004	dd 4010CBh		; DATA XREF: .text:004013E9r
					; sub_401468+1r ...
dword_403008	dd 1			; DATA XREF: sub_401A80+1F7r
					; sub_401A80+28Cr ...
dword_40300C	dd 1			; DATA XREF: sub_401138+77r
					; sub_401A80+11r ...
dword_403010	dd 3Fh			; DATA XREF: sub_401A80+220w
					; sub_401A80+2BAw ...
dword_403014	dd 4017E0h		; DATA XREF: sub_401A80+6Cw
					; sub_401A80+E7w ...
dword_403018	dd 0FFFFFFFFh		; DATA XREF: sub_401A80+50w
					; sub_401A80+81r ...
dword_40301C	dd 0FFFFFFFFh		; DATA XREF: sub_401A80+46w
					; sub_401A80+72r ...
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_403030	db    0	;		; DATA XREF: sub_4021E0+D3o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_data		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 00000014 (	 20.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 404000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_404000	dd ?			; DATA XREF: sub_401A80+25r
					; sub_401A80+5Dw ...
dword_404004	dd ?			; DATA XREF: sub_401138+44r
					; sub_401A80+Bw ...
unk_404008	db    ?	;		; DATA XREF: sub_4021E0+4Co
		db    ?	;
		db    ?	;
		db    ?	;
dword_40400C	dd ?			; DATA XREF: sub_401254+38r
					; sub_401364+1r ...
unk_404010	db    ?	;		; DATA XREF: sub_4021E0+6Eo
		db    ?	;
		db    ?	;
		db    ?	;
_bss		ends

;
; Imports from cygdb2
;
; Section 4. (virtual address 00005000)
; Virtual size			: 000002EC (	748.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001A00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp___db_err:dword ; DATA XREF:	__db_errr
		extrn __imp_db_appexit:dword ; DATA XREF: db_appexitr
		extrn __imp_db_appinit:dword ; DATA XREF: db_appinitr


;
; Imports from cygwin1
;
		extrn __imp___errno:dword ; DATA XREF: __errnor
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn __progname:dword	; DATA XREF: sub_4018E0+25r
; void *__cdecl	_imp_calloc(size_t,size_t)
		extrn __imp_calloc:dword ; DATA	XREF: callocr
; char *__cdecl	_imp_ctime(const time_t	*)
		extrn __imp_ctime:dword	; DATA XREF: ctimer
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_401778+4Cr
					; .text:00402348r
; void __cdecl _imp_exit(int)
		extrn __imp_exit:dword	; DATA XREF: exitr
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
		extrn fputc:dword	; DATA XREF: .text:00402360r
; void __cdecl free(void *)
		extrn free:dword	; DATA XREF: .text:00402370r
; void *__cdecl	malloc(size_t)
		extrn malloc:dword	; DATA XREF: .text:00402378r
; void *__cdecl	realloc(void *,size_t)
		extrn realloc:dword	; DATA XREF: .text:00402368r
		extrn __imp_signal:dword ; DATA	XREF: signalr
; char *__cdecl	_imp_strerror(int)
		extrn __imp_strerror:dword ; DATA XREF:	strerrorr
; size_t __cdecl _imp_strlen(const char	*)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; int __cdecl _imp_strncmp(const char *,const char *,size_t)
		extrn __imp_strncmp:dword ; DATA XREF: strncmpr
; __int32 __cdecl _imp_strtol(const char *,char	**,int)
		extrn __imp_strtol:dword ; DATA	XREF: strtolr
		extrn __imp_vfprintf:dword ; DATA XREF:	vfprintfr


;
; Imports from KERNEL32
;
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr



		end start
