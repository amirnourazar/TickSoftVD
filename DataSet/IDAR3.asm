

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\col.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00001320 (   4896.)
; Section size in file		: 00001400 (   5120.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		and	esp, 0FFFFFFF0h
		mov	eax, ds:dword_404000
		test	eax, eax
		jz	short loc_401013
		int	3		; Trap to Debugger

loc_401013:				; CODE XREF: start+10j
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_401700
		call	sub_401F60
		leave
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401050	proc near		; CODE XREF: sub_401700+95p
					; sub_401700+B8p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	edx, 1Dh
		mov	[esp+18h+var_10], edx
		mov	[esp+18h+var_18], offset aUsageColBfxLNl ; "usage: col [-bfx] [-l nline]\n"
		mov	[esp+18h+var_C], eax
		mov	eax, 1
		mov	[esp+18h+var_14], eax
		call	fwrite
		mov	[esp+18h+var_18], 1
		call	exit
		lea	esi, [esi+0]
sub_401050	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401090	proc near		; CODE XREF: sub_4010D0+5Ep
					; sub_4010D0+DBp ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	ecx, 1
		mov	[esp+18h+var_14], ecx
		mov	[esp+18h+var_18], offset aColWriteError_ ; "col: write error.\n"
		mov	[esp+18h+var_C], eax
		mov	eax, 12h
		mov	[esp+18h+var_10], eax
		call	fwrite
		mov	[esp+18h+var_18], 1
		call	exit
		lea	esi, [esi+0]
sub_401090	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4010D0	proc near		; CODE XREF: sub_401640+39p
					; sub_401700+34Ep

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		push	edi
		xor	edi, edi
		push	esi
		push	ebx
		sub	esp, 0Ch
		mov	edx, ds:dword_4040E0
		test	dl, 1
		jz	short loc_401100
		mov	eax, ds:dword_4040F0
		test	eax, eax
		jz	short loc_401153
		mov	edi, 1
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401100:				; CODE XREF: sub_4010D0+14j
					; sub_4010D0+84j
		mov	eax, edx
		shr	eax, 1Fh
		lea	esi, [edx+eax]
		sar	esi, 1
		mov	ebx, esi
		lea	esi, [esi+0]

loc_401110:				; CODE XREF: sub_4010D0+5Cj
		dec	ebx
		js	short loc_401140

loc_401113:				; CODE XREF: sub_4010D0+64j
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+18h+var_18], 0Ah
		mov	[esp+18h+var_14], eax
		call	putc
		inc	eax
		jnz	short loc_401110
		call	sub_401090
		dec	ebx
		jns	short loc_401113
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401140:				; CODE XREF: sub_4010D0+41j
		test	edi, edi
		jnz	short loc_401156

loc_401144:				; CODE XREF: sub_4010D0+BEj
					; sub_4010D0+D9j ...
		xor	eax, eax
		mov	ds:dword_4040E0, eax
		add	esp, 0Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401153:				; CODE XREF: sub_4010D0+1Dj
		inc	edx
		jmp	short loc_401100
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401156:				; CODE XREF: sub_4010D0+72j
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+18h+var_18], 1Bh
		mov	[esp+18h+var_14], eax
		call	putc
		inc	eax
		jz	short loc_4011B2

loc_401171:				; CODE XREF: sub_4010D0+E7j
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+18h+var_18], 39h
		mov	[esp+18h+var_14], eax
		call	putc
		inc	eax
		jz	short loc_4011B9

loc_40118C:				; CODE XREF: sub_4010D0+EEj
		test	esi, esi
		jnz	short loc_401144
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+18h+var_18], 0Dh
		mov	[esp+18h+var_14], eax
		call	putc
		inc	eax
		jnz	short loc_401144
		call	sub_401090
		jmp	short loc_401144
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4011B2:				; CODE XREF: sub_4010D0+9Fj
		call	sub_401090
		jmp	short loc_401171
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4011B9:				; CODE XREF: sub_4010D0+BAj
		call	sub_401090
		jmp	short loc_40118C
sub_4010D0	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4011C0	proc near		; CODE XREF: sub_401640+1Dp

arg_0		= dword	ptr  8

		push	ebp
		mov	eax, ds:dword_404080
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		mov	[edx+8], eax
		pop	ebp
		mov	ds:dword_404080, edx
		retn
sub_4011C0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4011E0	proc near		; CODE XREF: sub_401220+3Fp
					; sub_4012B0+2D7p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	[esp+18h+var_18], ebx
		mov	[esp+18h+var_14], eax
		call	realloc
		test	eax, eax
		mov	ebx, eax
		jz	short loc_401207

loc_4011FF:				; CODE XREF: sub_4011E0+39j
		add	esp, 14h
		mov	eax, ebx
		pop	ebx
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401207:				; CODE XREF: sub_4011E0+1Dj
		mov	[esp+18h+var_18], 1
		xor	eax, eax
		mov	[esp+18h+var_14], eax
		call	sub_401D00
		jmp	short loc_4011FF
sub_4011E0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401220	proc near		; CODE XREF: sub_401700+106p
					; sub_401700+360p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	ebx
		sub	esp, 10h
		mov	edi, ds:dword_404080
		test	edi, edi
		jz	short loc_40124F
		cld
		mov	eax, [edi+8]
		mov	ecx, 7
		mov	ebx, edi
		mov	ds:dword_404080, eax
		xor	eax, eax
		rep stosd
		add	esp, 10h
		mov	eax, ebx
		pop	ebx
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40124F:				; CODE XREF: sub_401220+10j
		mov	[esp+18h+var_18], 0
		mov	eax, 700h
		mov	[esp+18h+var_14], eax
		call	sub_4011E0
		mov	ds:dword_404080, eax
		mov	ebx, eax
		mov	edx, 3Eh

loc_401270:				; CODE XREF: sub_401220+59j
		lea	eax, [ebx+1Ch]
		dec	edx
		mov	[ebx+8], eax
		mov	ebx, eax
		jns	short loc_401270
		mov	dword ptr [eax+8], 0
		mov	edi, ds:dword_404080
		cld
		mov	ecx, 7
		mov	eax, [edi+8]
		mov	ebx, edi
		mov	ds:dword_404080, eax
		xor	eax, eax
		rep stosd
		add	esp, 10h
		mov	eax, ebx
		pop	ebx
		pop	edi
		pop	ebp
		retn
sub_401220	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4012B0	proc near		; CODE XREF: sub_401640+41p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_18], 0
		mov	eax, [esi+10h]
		mov	[ebp+var_14], eax
		mov	eax, [esi+14h]
		test	eax, eax
		jz	loc_4013F6
		mov	eax, [esi+0Ch]
		cmp	eax, ds:dword_404060
		jg	loc_401573
		mov	eax, [esi+18h]
		cmp	eax, ds:dword_404020
		jge	loc_4015A0

loc_4012F2:				; CODE XREF: sub_4012B0+2EAj
		mov	ecx, ds:dword_404030

loc_4012F8:				; CODE XREF: sub_4012B0+314j
		shl	eax, 2
		mov	edi, ecx
		lea	edx, [eax+1]
		cmp	edx, 7
		jbe	short loc_40130E
		test	cl, 4
		jnz	loc_4015C9

loc_40130E:				; CODE XREF: sub_4012B0+53j
					; sub_4012B0+325j
		cld
		mov	ecx, edx
		shr	ecx, 2
		xor	eax, eax
		test	dl, 2
		rep stosd
		jz	short loc_401325
		mov	word ptr [edi],	0
		add	edi, 2

loc_401325:				; CODE XREF: sub_4012B0+6Bj
		test	dl, 1
		jz	short loc_40132D
		mov	byte ptr [edi],	0

loc_40132D:				; CODE XREF: sub_4012B0+78j
		mov	edi, [ebp+var_14]
		mov	ebx, [esi]
		dec	edi
		mov	[ebp+var_20], ebx
		js	short loc_40135C
		mov	ds:dword_404040, edi
		mov	ecx, ds:dword_404030
		jmp	short loc_40134B
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401346:				; CODE XREF: sub_4012B0+AAj
		mov	ds:dword_404040, eax

loc_40134B:				; CODE XREF: sub_4012B0+94j
		movsx	eax, word ptr [ebx]
		add	ebx, 4
		inc	dword ptr [ecx+eax*4]
		mov	eax, ds:dword_404040
		dec	eax
		jns	short loc_401346

loc_40135C:				; CODE XREF: sub_4012B0+86j
		xor	eax, eax
		mov	ds:dword_404070, eax
		xor	eax, eax
		mov	ds:dword_404040, eax
		mov	eax, [esi+18h]
		test	eax, eax
		js	short loc_4013A8
		mov	ecx, ds:dword_404030

loc_401377:				; CODE XREF: sub_4012B0+F6j
		mov	edx, ds:dword_404040
		mov	eax, [ecx+edx*4]
		mov	ds:dword_404050, eax
		mov	eax, ds:dword_404070
		mov	[ecx+edx*4], eax
		mov	eax, ds:dword_404050
		add	ds:dword_404070, eax
		mov	eax, ds:dword_404040
		inc	eax
		cmp	[esi+18h], eax
		mov	ds:dword_404040, eax
		jge	short loc_401377

loc_4013A8:				; CODE XREF: sub_4012B0+BFj
		mov	ds:dword_404040, edi
		test	edi, edi
		mov	ebx, [ebp+var_20]
		js	short loc_4013E1
		mov	esi, ds:dword_404030
		mov	edi, ds:dword_404010

loc_4013C1:				; CODE XREF: sub_4012B0+12Fj
		movsx	eax, word ptr [ebx]
		mov	edx, [ebx]
		add	ebx, 4
		mov	ecx, [esi+eax*4]
		mov	[edi+ecx*4], edx
		inc	dword ptr [esi+eax*4]
		mov	eax, ds:dword_404040
		dec	eax
		mov	ds:dword_404040, eax
		test	eax, eax
		jns	short loc_4013C1

loc_4013E1:				; CODE XREF: sub_4012B0+103j
		mov	esi, [ebp+var_14]
		mov	ebx, ds:dword_404010
		test	esi, esi
		jg	short loc_401407

loc_4013EE:				; CODE XREF: sub_4012B0+155j
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4013F6:				; CODE XREF: sub_4012B0+1Ej
		mov	ebx, [esi]
		nop
		lea	esi, [esi+0]

loc_401400:				; CODE XREF: sub_4012B0+28Bj
		mov	esi, [ebp+var_14]
		test	esi, esi
		jle	short loc_4013EE

loc_401407:				; CODE XREF: sub_4012B0+13Cj
		movsx	edx, word ptr [ebx]
		mov	[ebp+var_10], ebx
		mov	[ebp+var_1C], edx

loc_401410:				; CODE XREF: sub_4012B0+177j
		dec	[ebp+var_14]
		add	[ebp+var_10], 4
		mov	ecx, [ebp+var_14]
		test	ecx, ecx
		jle	short loc_401429
		mov	edx, [ebp+var_10]
		movsx	eax, word ptr [edx]
		cmp	eax, [ebp+var_1C]
		jz	short loc_401410

loc_401429:				; CODE XREF: sub_4012B0+16Cj
		mov	edx, ds:dword_404100
		test	edx, edx
		jz	short loc_401439
		mov	ebx, [ebp+var_10]
		sub	ebx, 4

loc_401439:				; CODE XREF: sub_4012B0+181j
		mov	eax, [ebp+var_18]
		cmp	[ebp+var_1C], eax
		jle	loc_4014EC
		mov	edi, [ebp+var_1C]
		sub	edi, eax
		mov	eax, ds:dword_4040C0
		test	eax, eax
		setnz	al
		xor	edx, edx
		cmp	edi, 1
		setnle	dl
		test	eax, edx
		jz	short loc_4014C0
		mov	eax, [ebp+var_1C]
		test	eax, eax
		js	loc_40156B

loc_40146B:				; CODE XREF: sub_4012B0+2BEj
		mov	edx, [ebp+var_18]
		sar	eax, 3
		test	edx, edx
		js	loc_401563

loc_401479:				; CODE XREF: sub_4012B0+2B6j
		mov	esi, eax
		sar	edx, 3
		sub	esi, edx
		lea	eax, ds:0[esi*8]
		sub	edi, eax
		lea	esi, [esi+0]

loc_401490:				; CODE XREF: sub_4012B0+1FCj
		dec	esi
		js	short loc_4014C0

loc_401493:				; CODE XREF: sub_4012B0+204j
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+28h+var_28], 9
		mov	[esp+28h+var_24], eax
		call	putc
		inc	eax
		jnz	short loc_401490
		call	sub_401090
		dec	esi
		jns	short loc_401493
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_4014C0:				; CODE XREF: sub_4012B0+1AEj
					; sub_4012B0+1E1j ...
		dec	edi
		js	short loc_4014E6

loc_4014C3:				; CODE XREF: sub_4012B0+234j
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+28h+var_28], 20h
		mov	[esp+28h+var_24], eax
		call	putc
		inc	eax
		jnz	short loc_4014C0
		call	sub_401090
		dec	edi
		jns	short loc_4014C3

loc_4014E6:				; CODE XREF: sub_4012B0+211j
		mov	edx, [ebp+var_1C]
		mov	[ebp+var_18], edx

loc_4014EC:				; CODE XREF: sub_4012B0+18Fj
		inc	[ebp+var_18]
		nop

loc_4014F0:				; CODE XREF: sub_4012B0+2AAj
					; sub_4012B0+2B1j
		movzx	eax, byte ptr [ebx+2]
		cmp	al, ds:byte_404110
		jz	short loc_401516
		movsx	edx, al
		cmp	edx, 1
		jz	loc_4015F0
		cmp	edx, 2
		jz	loc_401622

loc_401511:				; CODE XREF: sub_4012B0+35Fj
					; sub_4012B0+36Dj
		mov	ds:byte_404110,	al

loc_401516:				; CODE XREF: sub_4012B0+24Aj
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+28h+var_24], eax
		movsx	eax, byte ptr [ebx+3]
		mov	[esp+28h+var_28], eax
		call	putc
		inc	eax
		jz	loc_4015E0

loc_401535:				; CODE XREF: sub_4012B0+335j
		add	ebx, 4
		cmp	ebx, [ebp+var_10]
		jnb	loc_401400
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+28h+var_28], 8
		mov	[esp+28h+var_24], eax
		call	putc
		inc	eax
		jnz	short loc_4014F0
		call	sub_401090
		jmp	short loc_4014F0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401563:				; CODE XREF: sub_4012B0+1C3j
		add	edx, 7
		jmp	loc_401479
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40156B:				; CODE XREF: sub_4012B0+1B5j
		add	eax, 7
		jmp	loc_40146B
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401573:				; CODE XREF: sub_4012B0+2Dj
		mov	ds:dword_404060, eax
		shl	eax, 2
		mov	[esp+28h+var_24], eax
		mov	eax, ds:dword_404010
		mov	[esp+28h+var_28], eax
		call	sub_4011E0
		mov	ds:dword_404010, eax
		mov	eax, [esi+18h]
		cmp	eax, ds:dword_404020
		jl	loc_4012F2

loc_4015A0:				; CODE XREF: sub_4012B0+3Cj
		inc	eax
		mov	ds:dword_404020, eax
		shl	eax, 2
		mov	[esp+28h+var_24], eax
		mov	eax, ds:dword_404030
		mov	[esp+28h+var_28], eax
		call	sub_4011E0
		mov	ds:dword_404030, eax
		mov	ecx, eax
		mov	eax, [esi+18h]
		jmp	loc_4012F8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4015C9:				; CODE XREF: sub_4012B0+58j
		mov	dword ptr [ecx], 0
		lea	edi, [ecx+4]
		lea	edx, [eax-3]
		jmp	loc_40130E
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_4015E0:				; CODE XREF: sub_4012B0+27Fj
		call	sub_401090
		jmp	loc_401535
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_4015F0:				; CODE XREF: sub_4012B0+252j
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+28h+var_28], 0Fh
		mov	[esp+28h+var_24], eax

loc_401603:				; CODE XREF: sub_4012B0+385j
		call	putc
		inc	eax
		jz	short loc_401614
		movzx	eax, byte ptr [ebx+2]
		jmp	loc_401511
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401614:				; CODE XREF: sub_4012B0+359j
		call	sub_401090
		movzx	eax, byte ptr [ebx+2]
		jmp	loc_401511
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401622:				; CODE XREF: sub_4012B0+25Bj
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+28h+var_28], 0Eh
		mov	[esp+28h+var_24], eax
		jmp	short loc_401603
sub_4012B0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401640	proc near		; CODE XREF: sub_401700+25Dp
					; sub_401700+309p

var_18		= dword	ptr -18h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, [ebp+arg_0]
		jmp	short loc_401662
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401650:				; CODE XREF: sub_401640+37j
		inc	ds:dword_4040E0
		test	eax, eax
		jnz	short loc_4016A0

loc_40165A:				; CODE XREF: sub_401640+50j
					; sub_401640+68j
		mov	[esp+18h+var_18], ebx
		call	sub_4011C0

loc_401662:				; CODE XREF: sub_401640+Bj
		dec	esi
		js	short loc_4016B0
		mov	ebx, ds:dword_4040D0
		mov	eax, [ebx+8]
		mov	ds:dword_4040D0, eax
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_401650
		call	sub_4010D0
		mov	[esp+18h+var_18], ebx
		call	sub_4012B0
		inc	ds:dword_4040E0
		mov	eax, [ebx]
		test	eax, eax
		jz	short loc_40165A
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_4016A0:				; CODE XREF: sub_401640+18j
		mov	[esp+18h+var_18], eax
		call	free
		jmp	short loc_40165A
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_4016B0:				; CODE XREF: sub_401640+23j
		mov	eax, ds:dword_4040D0
		test	eax, eax
		jz	short loc_4016C0
		mov	dword ptr [eax+4], 0

loc_4016C0:				; CODE XREF: sub_401640+77j
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_401640	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4016D0	proc near		; CODE XREF: sub_401700+4EEp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	eax, offset aPastFirstLine ; "past first line"
		mov	ebp, esp
		sub	esp, 8
		mov	edx, [ebp+arg_0]
		test	edx, edx
		js	short loc_4016E7
		mov	eax, offset aLineAlreadyFlu ; "-- line already flushed"

loc_4016E7:				; CODE XREF: sub_4016D0+10j
		mov	[esp+8+var_4], eax
		mov	[esp+8+var_8], offset aWarningCanTBac ;	"warning: can't back up %s"
		call	sub_401F10
		leave
		retn
sub_4016D0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401700	proc near		; DATA XREF: start+33o

var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_D		= byte ptr -0Dh
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	eax, 10h
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 3Ch
		mov	esi, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		and	esp, 0FFFFFFF0h
		call	sub_401F30
		call	__main
		mov	eax, [ebx]
		mov	[esp+48h+var_48], eax
		call	sub_401C00
		mov	[esp+48h+var_48], 0
		mov	eax, offset unk_403073
		mov	[esp+48h+var_44], eax
		call	setlocale
		mov	eax, 80h
		mov	ds:dword_4040B0, eax
		lea	esi, [esi+0]

loc_401750:				; CODE XREF: sub_401700+82j
					; DATA XREF: .rdata:00403098o
		mov	ecx, 1		; case 0x68
		mov	ds:dword_4040C0, ecx
		nop
		lea	esi, [esi+0]

loc_401760:				; CODE XREF: sub_401700+157j
					; sub_401700+176j ...
		mov	[esp+48h+var_44], ebx
		mov	edi, offset aBfhlX ; "bfhl:x"
		mov	[esp+48h+var_40], edi
		mov	[esp+48h+var_48], esi
		call	getopt
		cmp	eax, 0FFFFFFFFh
		jz	short loc_4017AF

loc_40177A:				; CODE XREF: sub_401700+ADj
		sub	eax, 62h	; switch 23 cases
		cmp	eax, 16h
		ja	short loc_401790 ; default
		jmp	ds:off_403098[eax*4] ; switch jump
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_401790:				; CODE XREF: sub_401700+80j
					; sub_401700+82j
					; DATA XREF: ...
		mov	edi, offset aBfhlX ; default
		call	sub_401050
		mov	[esp+48h+var_40], edi
		mov	[esp+48h+var_44], ebx
		mov	[esp+48h+var_48], esi
		call	getopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_40177A

loc_4017AF:				; CODE XREF: sub_401700+78j
		mov	eax, ds:optind
		cmp	[eax], esi
		jz	short loc_4017BD
		call	sub_401050

loc_4017BD:				; CODE XREF: sub_401700+B6j
		shl	ds:dword_4040B0, 1
		mov	[ebp+var_30], 0
		mov	[ebp+var_14], 0
		mov	[ebp+var_18], 0
		mov	[ebp+var_2C], 0
		mov	[ebp+var_24], 0
		mov	[ebp+var_28], 0
		mov	[ebp+var_20], 0
		mov	[ebp+var_1C], 0
		mov	ds:byte_404110,	1
		mov	[ebp+var_D], 1
		call	sub_401220
		mov	ds:dword_4040D0, eax
		mov	esi, eax

loc_401812:				; CODE XREF: sub_401700+145j
					; sub_401700+147j ...
		call	__getreent	; default
		mov	eax, [eax+4]
		mov	[esp+48h+var_48], eax
		call	getc
		cmp	eax, 0FFFFFFFFh
		mov	edi, eax
		jz	loc_4019E8

loc_40182D:				; CODE XREF: sub_401700+2E2j
		mov	eax, ds:_ctype_
		movsx	eax, byte ptr [eax+edi+1]
		test	al, 17h
		jnz	loc_4018CF
		lea	eax, [edi-8]	; switch 25 cases
		cmp	eax, 18h
		ja	short loc_401812 ; default
		jmp	ds:off_4030F4[eax*4] ; switch jump
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401850:				; CODE XREF: sub_401700+82j
					; DATA XREF: .rdata:00403098o
		xor	eax, eax	; case 0x78
		mov	ds:dword_4040C0, eax
		jmp	loc_401760
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_401860:				; CODE XREF: sub_401700+82j
					; DATA XREF: .rdata:00403098o
		mov	eax, ds:optarg	; case 0x6C
		mov	eax, [eax]
		mov	[esp+48h+var_48], eax
		call	atoi
		mov	ds:dword_4040B0, eax
		test	eax, eax
		jg	loc_401760
		call	__getreent
		mov	edx, ds:optarg
		mov	edx, [edx]
		mov	[esp+48h+var_40], edx
		mov	edx, offset aColBadLArgumen ; "col: bad	-l argument %s.\n"
		mov	[esp+48h+var_44], edx
		mov	eax, [eax+0Ch]
		mov	[esp+48h+var_48], eax
		call	fprintf
		mov	[esp+48h+var_48], 1
		call	exit
		lea	esi, [esi+0]

loc_4018B0:				; CODE XREF: sub_401700+82j
					; DATA XREF: .rdata:00403098o
		mov	edi, 1		; case 0x66
		mov	ds:dword_4040F0, edi
		jmp	loc_401760
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4018C0:				; CODE XREF: sub_401700+82j
					; DATA XREF: .rdata:00403098o
		mov	eax, 1		; case 0x62
		mov	ds:dword_404100, eax
		jmp	loc_401760
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4018CF:				; CODE XREF: sub_401700+139j
		mov	eax, [ebp+var_24]
		mov	edx, [ebp+var_2C]
		sub	eax, edx
		cmp	eax, [ebp+var_1C]
		jz	loc_401962
		mov	[ebp+var_2C], 0
		mov	eax, [ebp+var_24]
		mov	ebx, [ebp+var_1C]
		sub	ebx, eax
		mov	eax, ds:dword_4040F0
		test	eax, eax
		jnz	short loc_401906
		test	byte ptr [ebp+var_1C], 1
		jz	short loc_401906
		mov	[ebp+var_2C], 1
		inc	ebx

loc_401906:				; CODE XREF: sub_401700+1F6j
					; sub_401700+1FCj
		test	ebx, ebx
		jl	loc_401A77
		jle	short loc_401934
		mov	eax, [esi+8]
		test	eax, eax
		jz	loc_401A6E
		dec	ebx
		mov	esi, eax
		test	ebx, ebx
		jle	short loc_401934

loc_401922:				; CODE XREF: sub_401700+232j
		mov	eax, [eax+8]
		test	eax, eax
		jz	loc_401A6E
		dec	ebx
		mov	esi, eax
		test	ebx, ebx
		jg	short loc_401922

loc_401934:				; CODE XREF: sub_401700+20Ej
					; sub_401700+220j ...
		mov	eax, [ebp+var_2C]
		mov	edx, [ebp+var_1C]
		add	edx, eax
		mov	[ebp+var_24], edx
		mov	ebx, edx
		mov	eax, [ebp+var_28]
		mov	edx, ds:dword_4040B0
		sub	ebx, eax
		lea	eax, [edx+20h]
		cmp	eax, ebx
		jg	short loc_401962
		mov	eax, ebx
		sub	eax, edx
		add	[ebp+var_28], eax
		mov	[esp+48h+var_48], eax
		call	sub_401640

loc_401962:				; CODE XREF: sub_401700+1DAj
					; sub_401700+251j
		mov	ecx, [esi+10h]
		mov	edx, [esi+0Ch]
		lea	eax, [ecx+1]
		cmp	eax, edx
		jl	loc_401AD7
		test	edx, edx
		mov	ebx, 5Ah
		jz	short loc_40197F
		lea	ebx, [edx+edx]

loc_40197F:				; CODE XREF: sub_401700+27Aj
		lea	eax, ds:0[ebx*4]
		mov	[esp+48h+var_44], eax
		mov	eax, [esi]
		mov	[esp+48h+var_48], eax
		call	sub_4011E0
		mov	[esi], eax
		mov	ecx, [esi+10h]
		mov	[esi+0Ch], ebx
		lea	edx, [eax+ecx*4]
		lea	eax, [ecx+1]
		mov	[esi+10h], eax
		mov	eax, edi
		mov	[edx+3], al
		movzx	eax, [ebp+var_D]
		mov	[edx+2], al
		mov	eax, [ebp+var_18]
		mov	[edx], ax
		mov	edx, [ebp+var_18]
		cmp	[esi+18h], edx
		jle	loc_401B00

loc_4019C3:				; CODE XREF: sub_401700+3FAj
		mov	dword ptr [esi+14h], 1

loc_4019CA:				; CODE XREF: sub_401700+147j
					; DATA XREF: .rdata:004030F4o
		inc	[ebp+var_18]	; case 0x20

loc_4019CD:				; CODE XREF: sub_401700+409j
					; sub_401700+472j
		call	__getreent
		mov	eax, [eax+4]
		mov	[esp+48h+var_48], eax
		call	getc
		cmp	eax, 0FFFFFFFFh
		mov	edi, eax
		jnz	loc_40182D

loc_4019E8:				; CODE XREF: sub_401700+127j
		mov	eax, [esi+8]
		jmp	short loc_4019F3
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019ED:				; CODE XREF: sub_401700+2F5j
		inc	[ebp+var_24]
		mov	eax, [eax+8]

loc_4019F3:				; CODE XREF: sub_401700+2EBj
		test	eax, eax
		jnz	short loc_4019ED
		mov	eax, [ebp+var_24]
		mov	esi, [ebp+var_28]
		mov	edx, [ebp+var_14]
		sub	eax, esi
		lea	eax, [eax+edx+1]
		mov	[esp+48h+var_48], eax
		call	sub_401640
		cmp	ds:byte_404110,	1
		jz	short loc_401A36
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+48h+var_48], 0Fh
		mov	[esp+48h+var_44], eax
		call	putc
		inc	eax
		jz	loc_401BB3

loc_401A36:				; CODE XREF: sub_401700+315j
					; sub_401700+4B8j
		mov	eax, [ebp+var_20]
		mov	ebx, [ebp+var_24]
		sub	eax, ebx
		test	byte ptr [ebp+var_20], 1
		jz	loc_401B9B
		inc	eax

loc_401A49:				; CODE XREF: sub_401700+49Dj
		mov	ds:dword_4040E0, eax

loc_401A4E:				; CODE XREF: sub_401700+4AEj
		call	sub_4010D0
		mov	[esp+48h+var_48], 0
		call	exit
		nop

loc_401A60:				; CODE XREF: sub_401700+370j
		call	sub_401220
		mov	[eax+4], esi
		dec	ebx
		mov	[esi+8], eax
		mov	esi, eax

loc_401A6E:				; CODE XREF: sub_401700+215j
					; sub_401700+227j
		test	ebx, ebx
		jg	short loc_401A60
		jmp	loc_401934
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A77:				; CODE XREF: sub_401700+208j
					; sub_401700+381j
		mov	eax, [esi+4]
		test	eax, eax
		jz	short loc_401A83
		inc	ebx
		mov	esi, eax
		js	short loc_401A77

loc_401A83:				; CODE XREF: sub_401700+37Cj
		test	ebx, ebx
		jz	loc_401934
		mov	eax, [ebp+var_28]
		test	eax, eax
		jnz	loc_401B8A
		test	ebx, ebx
		jns	loc_401934

loc_401A9E:				; CODE XREF: sub_401700+3D0j
		call	sub_401220
		inc	[ebp+var_14]
		inc	ebx
		mov	[esi+4], eax
		mov	[eax+8], esi
		mov	esi, eax
		mov	ds:dword_4040D0, eax
		jns	loc_401934
		call	sub_401220
		inc	[ebp+var_14]
		inc	ebx
		mov	[esi+4], eax
		mov	[eax+8], esi
		mov	esi, eax
		mov	ds:dword_4040D0, eax
		js	short loc_401A9E
		jmp	loc_401934
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401AD7:				; CODE XREF: sub_401700+26Dj
		mov	eax, [esi]
		lea	edx, [eax+ecx*4]
		lea	eax, [ecx+1]
		mov	[esi+10h], eax
		mov	eax, edi
		mov	[edx+3], al
		movzx	eax, [ebp+var_D]
		mov	[edx+2], al
		mov	eax, [ebp+var_18]
		mov	[edx], ax
		mov	edx, [ebp+var_18]
		cmp	[esi+18h], edx
		jg	loc_4019C3

loc_401B00:				; CODE XREF: sub_401700+2BDj
		mov	eax, [ebp+var_18]
		inc	[ebp+var_18]
		mov	[esi+18h], eax
		jmp	loc_4019CD
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B0E:				; CODE XREF: sub_401700+147j
					; DATA XREF: .rdata:004030F4o
		add	[ebp+var_1C], 2	; case 0xA
		mov	eax, [ebp+var_20]
		cmp	[ebp+var_1C], eax
		jle	short loc_401B20 ; case	0xD
		mov	edx, [ebp+var_1C]
		mov	[ebp+var_20], edx

loc_401B20:				; CODE XREF: sub_401700+147j
					; sub_401700+418j
					; DATA XREF: ...
		mov	[ebp+var_18], 0	; case 0xD
		jmp	loc_401812	; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B2C:				; CODE XREF: sub_401700+147j
					; DATA XREF: .rdata:004030F4o
		call	__getreent	; case 0x1B
		mov	eax, [eax+4]
		mov	[esp+48h+var_48], eax
		call	getc
		cmp	eax, 38h
		jz	loc_401BE0
		jg	short loc_401BBD
		cmp	eax, 37h
		jnz	loc_401812	; default

loc_401B50:				; CODE XREF: sub_401700+147j
					; DATA XREF: .rdata:004030F4o
		sub	[ebp+var_1C], 2	; case 0xB
		jmp	loc_401812	; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B59:				; CODE XREF: sub_401700+147j
					; DATA XREF: .rdata:004030F4o
		mov	[ebp+var_D], 1	; case 0xF
		jmp	loc_401812	; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B62:				; CODE XREF: sub_401700+147j
					; DATA XREF: .rdata:004030F4o
		mov	[ebp+var_D], 2	; case 0xE
		jmp	loc_401812	; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B6B:				; CODE XREF: sub_401700+147j
					; DATA XREF: .rdata:004030F4o
		or	[ebp+var_18], 7	; case 0x9
		inc	[ebp+var_18]
		jmp	loc_4019CD
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B77:				; CODE XREF: sub_401700+147j
					; DATA XREF: .rdata:004030F4o
		mov	ecx, [ebp+var_18] ; case 0x8
		test	ecx, ecx
		jz	loc_401812	; default
		dec	[ebp+var_18]
		jmp	loc_401812	; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B8A:				; CODE XREF: sub_401700+390j
		inc	[ebp+var_30]
		cmp	[ebp+var_30], 1
		jz	short loc_401BE8
		sub	[ebp+var_1C], ebx
		jmp	loc_401934
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B9B:				; CODE XREF: sub_401700+342j
		test	eax, eax
		jnz	loc_401A49
		mov	ecx, 2
		mov	ds:dword_4040E0, ecx
		jmp	loc_401A4E
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401BB3:				; CODE XREF: sub_401700+330j
		call	sub_401090
		jmp	loc_401A36
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401BBD:				; CODE XREF: sub_401700+445j
		cmp	eax, 39h
		jnz	loc_401812	; default
		inc	[ebp+var_1C]
		mov	eax, [ebp+var_20]
		cmp	[ebp+var_1C], eax
		jle	loc_401812	; default
		mov	edx, [ebp+var_1C]
		mov	[ebp+var_20], edx
		jmp	loc_401812	; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401BE0:				; CODE XREF: sub_401700+43Fj
		dec	[ebp+var_1C]
		jmp	loc_401812	; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401BE8:				; CODE XREF: sub_401700+491j
		mov	eax, [ebp+var_1C]
		mov	[esp+48h+var_48], eax
		call	sub_4016D0
		sub	[ebp+var_1C], ebx
		jmp	loc_401934
sub_401700	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401C00	proc near		; CODE XREF: sub_401700+26p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8

		push	ebp
		mov	eax, 2Fh
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_0]
		mov	[esp+18h+var_14], eax
		mov	[esp+18h+var_18], ebx
		call	strrchr
		test	eax, eax
		jz	short loc_401C29
		mov	ds:dword_404090, eax
		cmp	byte ptr [eax],	0
		jnz	short loc_401C35

loc_401C29:				; CODE XREF: sub_401C00+1Dj
		mov	ds:dword_404090, ebx
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C35:				; CODE XREF: sub_401C00+27j
		inc	eax
		mov	ds:dword_404090, eax
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn
sub_401C00	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		jmp	short sub_401C50
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401C50	proc near		; CODE XREF: .text:00401C41j
					; sub_401D00+1Ap

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, [ebp+arg_4]
		call	__errno
		mov	ebx, [eax]
		call	__getreent
		mov	edx, ds:dword_404090
		mov	[esp+18h+var_10], edx
		mov	edx, offset aS	; "%s: "
		mov	[esp+18h+var_14], edx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	fprintf
		test	esi, esi
		jz	short loc_401CCE
		call	__getreent
		mov	[esp+18h+var_14], esi
		mov	edx, [ebp+arg_8]
		mov	esi, 2
		mov	[esp+18h+var_10], edx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	vfprintf
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	ecx, 1
		mov	[esp+18h+var_10], esi
		mov	[esp+18h+var_14], ecx
		mov	[esp+18h+var_C], eax
		mov	[esp+18h+var_18], offset asc_403165 ; ": "
		call	fwrite

loc_401CCE:				; CODE XREF: sub_401C50+37j
		mov	[esp+18h+var_18], ebx
		call	strerror
		mov	ebx, eax
		call	__getreent
		mov	[esp+18h+var_10], ebx
		mov	edx, offset aS_0 ; "%s\n"
		mov	[esp+18h+var_14], edx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	fprintf
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		call	exit
sub_401C50	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401D00	proc near		; CODE XREF: sub_4011E0+34p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+arg_8]
		sub	esp, 18h
		mov	[esp+18h+var_10], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+18h+var_14], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		call	sub_401C50
		leave
		retn
sub_401D00	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		jmp	short sub_401D30
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401D30	proc near		; CODE XREF: .text:00401D21j
					; sub_401D30+8Ap

var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_4]
		call	__getreent
		mov	edx, ds:dword_404090
		mov	ecx, offset aS	; "%s: "
		mov	[esp+18h+var_14], ecx
		mov	[esp+18h+var_10], edx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	fprintf
		test	ebx, ebx
		jz	short loc_401D7C
		call	__getreent
		mov	[esp+18h+var_14], ebx
		mov	edx, [ebp+arg_8]
		mov	[esp+18h+var_10], edx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	vfprintf

loc_401D7C:				; CODE XREF: sub_401D30+2Fj
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], 0Ah
		mov	[esp+18h+var_14], eax
		call	fputc
		mov	eax, [ebp+arg_0]
		mov	[esp+18h+var_18], eax
		call	exit
		nop
		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+arg_8]
		sub	esp, 18h
		mov	[esp+34h+var_2C], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+34h+var_30], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+34h+var_34], eax
		call	sub_401D30
		leave
		retn
sub_401D30	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		jmp	short sub_401DD0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401DD0	proc near		; CODE XREF: .text:00401DC1j
					; .text:00401E93p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	esi, [ebp+arg_0]
		call	__errno
		mov	ebx, [eax]
		call	__getreent
		mov	edx, ds:dword_404090
		mov	[esp+18h+var_10], edx
		mov	edx, offset aS	; "%s: "
		mov	[esp+18h+var_14], edx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	fprintf
		test	esi, esi
		jz	short loc_401E4E
		call	__getreent
		mov	[esp+18h+var_14], esi
		mov	edx, [ebp+arg_4]
		mov	esi, 1
		mov	[esp+18h+var_10], edx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	vfprintf
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_14], esi
		mov	[esp+18h+var_18], offset asc_403165 ; ": "
		mov	[esp+18h+var_C], eax
		mov	eax, 2
		mov	[esp+18h+var_10], eax
		call	fwrite

loc_401E4E:				; CODE XREF: sub_401DD0+37j
		mov	[esp+18h+var_18], ebx
		call	strerror
		mov	ebx, eax
		call	__getreent
		mov	[esp+18h+var_10], ebx
		mov	ebx, offset aS_0 ; "%s\n"
		mov	[esp+18h+var_14], ebx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	fprintf
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_401DD0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8
		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+0Ch]
		sub	esp, 8
		mov	[esp+4], eax
		mov	eax, [ebp+8]
		mov	[esp], eax
		call	sub_401DD0
		leave
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401EA0	proc near		; CODE XREF: sub_401F10+13p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	ebx, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		call	__getreent
		mov	edx, ds:dword_404090
		mov	ecx, offset aS	; "%s: "
		mov	[esp+18h+var_14], ecx
		mov	[esp+18h+var_10], edx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	fprintf
		test	ebx, ebx
		jz	short loc_401EED
		call	__getreent
		mov	[esp+18h+var_10], esi
		mov	[esp+18h+var_14], ebx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	vfprintf

loc_401EED:				; CODE XREF: sub_401EA0+33j
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[ebp+arg_0], 0Ah
		mov	[ebp+arg_4], eax
		add	esp, 10h
		pop	ebx
		pop	esi
		pop	ebp
		jmp	fputc
sub_401EA0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401F10	proc near		; CODE XREF: sub_4016D0+22p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		lea	eax, [ebp+arg_4]
		sub	esp, 8
		mov	[esp+8+var_4], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+8+var_8], eax
		call	sub_401EA0
		leave
		retn
sub_401F10	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401F30	proc near		; CODE XREF: sub_401700+17p
		push	ecx
		mov	ecx, esp
		add	ecx, 8

loc_401F36:				; CODE XREF: sub_401F30+1Bj
		cmp	eax, 1000h
		jb	short loc_401F4D
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		jmp	short loc_401F36
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F4D:				; CODE XREF: sub_401F30+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		jmp	eax
sub_401F30	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401F60	proc near		; CODE XREF: start+3Ap

var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_C2		= dword	ptr -0C2h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		mov	[esp+18h+var_14], eax
		mov	[esp+18h+var_18], esi
		call	sub_4020D0
		sub	esp, 8
		test	eax, eax
		jz	short loc_401F91
		mov	[esp+18h+var_18], 0

loc_401F8B:				; CODE XREF: sub_401F60+56j
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)

loc_401F91:				; CODE XREF: sub_401F60+22j
		sub	esp, 0C0h
		lea	ebx, [esp+0D8h+var_C2+1]
		and	ebx, 0FFFFFFF0h
		mov	dword ptr [ebx], 0
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	sub_4020D0
		sub	esp, 8
		mov	[esp+0D8h+var_D8], ebx
		jmp	short loc_401F8B
sub_401F60	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fwrite. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION realloc. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION putc. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION getc. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION exit. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getreent. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fprintf. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION atoi. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION getopt. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION setlocale. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fputc. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strerror.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION vfprintf.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __errno. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strrchr. PRESS KEYPAD "+"	TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4020D0	proc near		; CODE XREF: sub_401F60+18p
					; sub_401F60+4Bp

var_18		= dword	ptr -18h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h	; lpModuleName
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_0]
		test	ebx, ebx
		jz	loc_4021BA
		mov	dword ptr [ebx+4], 0A8h
		xor	eax, eax
		mov	ecx, 96h
		mov	dword ptr [ebx+8], 3EDh
		mov	dword ptr [ebx+0Ch], 13h
		mov	[ebx+80h], eax
		mov	[ebx+84h], ecx
		mov	dword ptr [ebx+2Ch], offset dword_402310
		mov	dword ptr [ebx+30h], offset dword_402318
		mov	dword ptr [ebx+14h], offset unk_4040A4
		mov	eax, ds:_impure_ptr
		mov	[ebx+10h], eax

loc_40212B:				; CODE XREF: sub_4020D0+14Bj
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+0]
		mov	[ebx+28h], esi
		mov	dword ptr [ebx+48h], offset sub_4022E0
		mov	dword ptr [ebx+4Ch], offset sub_4022D0
		mov	dword ptr [ebx+50h], offset sub_4022C0
		mov	dword ptr [ebx+54h], offset sub_4022B0
		mov	dword ptr [ebx+24h], offset unk_4040A0
		mov	[ebx], eax
		mov	dword ptr [ebx+18h], offset loc_4022A0
		mov	dword ptr [ebx+1Ch], offset free
		mov	dword ptr [ebx+20h], offset realloc
		mov	dword ptr [ebx+44h], offset loc_402290
		mov	[esp+18h+var_18], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	dword ptr [ebx+34h], offset aUsageColBfxLNl ; "usage: col [-bfx] [-l nline]\n"
		mov	dword ptr [ebx+38h], offset aUsageColBfxLNl ; "usage: col [-bfx] [-l nline]\n"
		mov	dword ptr [ebx+3Ch], offset dword_404000
		mov	dword ptr [ebx+40h], 404140h
		call	sub_402260
		mov	eax, 1

loc_4021B1:				; CODE XREF: sub_4020D0+FDj
		lea	esp, [ebp+var_8]
		pop	ebx
		pop	esi
		pop	ebp
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4021BA:				; CODE XREF: sub_4020D0+10j
		mov	[esp+18h+var_18], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_4021B1
		mov	dword ptr [edx+4], 0A8h
		mov	ebx, edx
		mov	eax, 96h
		mov	dword ptr [edx+8], 3EDh
		mov	dword ptr [edx+0Ch], 13h
		xor	edx, edx
		mov	[ebx+80h], edx
		mov	edx, [ebx+0A4h]
		mov	[ebx+84h], eax
		mov	dword ptr [ebx+2Ch], offset dword_402310
		mov	dword ptr [ebx+30h], offset dword_402318
		mov	dword ptr [ebx+14h], offset unk_4040A4
		mov	eax, ds:_impure_ptr
		mov	[eax], edx
		jmp	loc_40212B
sub_4020D0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402230	proc near		; CODE XREF: sub_402260+1Fp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ebx, [ebp+arg_4]
		jmp	short loc_40224C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402240:				; CODE XREF: sub_402230+1Ej
		mov	edx, [ecx+4]
		mov	eax, [ecx]
		add	ecx, 8
		add	edx, esi
		add	[edx], eax

loc_40224C:				; CODE XREF: sub_402230+Ej
		cmp	ecx, ebx
		jb	short loc_402240
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_402230	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402260	proc near		; CODE XREF: sub_4020D0+D7p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	edx, 400000h
		mov	ebp, esp
		mov	eax, offset unk_403170
		sub	esp, 0Ch
		mov	[esp+0Ch+var_4], edx
		mov	[esp+0Ch+var_8], eax
		mov	[esp+0Ch+var_C], offset	unk_403170
		call	sub_402230
		leave
		retn
sub_402260	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_402290:				; DATA XREF: sub_4020D0+A2o
		jmp	ds:calloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_4022A0:				; DATA XREF: sub_4020D0+8Do
		jmp	ds:malloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4022B0	proc near		; DATA XREF: sub_4020D0+7Do
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4022B0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4022C0	proc near		; DATA XREF: sub_4020D0+76o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4022C0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4022D0	proc near		; DATA XREF: sub_4020D0+6Fo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4022D0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4022E0	proc near		; DATA XREF: sub_4020D0+68o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4022E0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
dword_402310	dd 0FFFFFFFFh, 0	; DATA XREF: sub_4020D0+3Eo
					; sub_4020D0+12Fo
dword_402318	dd 0FFFFFFFFh, 39h dup(0) ; DATA XREF: sub_4020D0+45o
					; sub_4020D0+136o
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 00000170 (	368.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001800
; Flags	40000040: Data Readable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 403000h
aUsageColBfxLNl	db 'usage: col [-bfx] [-l nline]',0Ah,0 ; DATA XREF: sub_401050+17o
					; sub_4020D0+BBo ...
aColWriteError_	db 'col: write error.',0Ah,0 ; DATA XREF: sub_401090+17o
aPastFirstLine	db 'past first line',0  ; DATA XREF: sub_4016D0+1o
aLineAlreadyFlu	db '-- line already flushed',0 ; DATA XREF: sub_4016D0+12o
aWarningCanTBac	db 'warning: can',27h,'t back up %s',0 ; DATA XREF: sub_4016D0+1Bo
unk_403073	db    0	;		; DATA XREF: sub_401700+32o
aBfhlX		db 'bfhl:x',0           ; DATA XREF: sub_401700+64o
					; sub_401700+90o
aColBadLArgumen	db 'col: bad -l argument %s.',0Ah,0 ; DATA XREF: sub_401700+18Do
		align 4
off_403098	dd offset loc_4018C0	; DATA XREF: sub_401700+82r
		dd offset loc_401790	; jump table for switch	statement
		dd offset loc_401790
		dd offset loc_401790
		dd offset loc_4018B0
		dd offset loc_401790
		dd offset loc_401750
		dd offset loc_401790
		dd offset loc_401790
		dd offset loc_401790
		dd offset loc_401860
		dd offset loc_401790
		dd offset loc_401790
		dd offset loc_401790
		dd offset loc_401790
		dd offset loc_401790
		dd offset loc_401790
		dd offset loc_401790
		dd offset loc_401790
		dd offset loc_401790
		dd offset loc_401790
		dd offset loc_401790
		dd offset loc_401850
off_4030F4	dd offset loc_401B77	; DATA XREF: sub_401700+147r
		dd offset loc_401B6B	; jump table for switch	statement
		dd offset loc_401B0E
		dd offset loc_401B50
		dd offset loc_401812
		dd offset loc_401B20
		dd offset loc_401B62
		dd offset loc_401B59
		dd offset loc_401812
		dd offset loc_401812
		dd offset loc_401812
		dd offset loc_401812
		dd offset loc_401812
		dd offset loc_401812
		dd offset loc_401812
		dd offset loc_401812
		dd offset loc_401812
		dd offset loc_401812
		dd offset loc_401812
		dd offset loc_401B2C
		dd offset loc_401812
		dd offset loc_401812
		dd offset loc_401812
		dd offset loc_401812
		dd offset loc_4019CA
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
aS		db '%s: ',0             ; DATA XREF: sub_401C50+21o
					; sub_401D30+15o ...
asc_403165	db ': ',0               ; DATA XREF: sub_401C50+72o
					; sub_401DD0+65o
aS_0		db '%s',0Ah,0           ; DATA XREF: sub_401C50+91o
					; sub_401DD0+91o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_403170	db    0	;		; DATA XREF: sub_402260+8o
					; sub_402260+18o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_rdata		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 00000140 (	320.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 404000h
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
dword_404000	dd ?			; DATA XREF: start+9r sub_4020D0+C9o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404010	dd ?			; DATA XREF: sub_4012B0+10Br
					; sub_4012B0+134r ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404020	dd ?			; DATA XREF: sub_4012B0+36r
					; sub_4012B0+2E4r ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404030	dd ?			; DATA XREF: sub_4012B0+42r
					; sub_4012B0+8Er ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404040	dd ?			; DATA XREF: sub_4012B0+88w
					; sub_4012B0+96w ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404050	dd ?			; DATA XREF: sub_4012B0+D0w
					; sub_4012B0+DDr
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404060	dd ?			; DATA XREF: sub_4012B0+27r
					; sub_4012B0+2C3w
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404070	dd ?			; DATA XREF: sub_4012B0+AEw
					; sub_4012B0+D5r ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404080	dd ?			; DATA XREF: sub_4011C0+1r
					; sub_4011C0+Fw ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404090	dd ?			; DATA XREF: sub_401C00+1Fw
					; sub_401C00+29w ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_4040A0	db    ?	;		; DATA XREF: sub_4020D0+84o
		db    ?	;
		db    ?	;
		db    ?	;
unk_4040A4	db    ?	;		; DATA XREF: sub_4020D0+4Co
					; sub_4020D0+13Do
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_4040B0	dd ?			; DATA XREF: sub_401700+45w
					; sub_401700+BDw ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_4040C0	dd ?			; DATA XREF: sub_4012B0+19Ar
					; sub_401700+55w ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_4040D0	dd ?			; DATA XREF: sub_401640+25r
					; sub_401640+2Ew ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_4040E0	dd ?			; DATA XREF: sub_4010D0+Br
					; sub_4010D0+76w ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_4040F0	dd ?			; DATA XREF: sub_4010D0+16r
					; sub_401700+1B5w ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404100	dd ?			; DATA XREF: sub_4012B0+179r
					; sub_401700+1C5w
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
byte_404110	db ?			; DATA XREF: sub_4012B0+244r
					; sub_4012B0+261w ...
		align 40h
_bss		ends

;
; Imports from cygwin1
;
; Section 4. (virtual address 00005000)
; Virtual size			: 000002F8 (	760.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001A00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp___errno:dword ; DATA XREF: __errnor
		extrn __imp___getreent:dword ; DATA XREF: __getreentr
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn _ctype_:dword	; DATA XREF: sub_401700+12Dr
		extrn _impure_ptr:dword	; DATA XREF: sub_4020D0+53r
					; sub_4020D0+144r
; int __cdecl _imp_atoi(const char *)
		extrn __imp_atoi:dword	; DATA XREF: atoir
; void *__cdecl	calloc(size_t,size_t)
		extrn calloc:dword	; DATA XREF: .text:00402290r
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_401F60+2Br
					; .text:00402220r
; void __cdecl _imp_exit(int)
		extrn __imp_exit:dword	; DATA XREF: exitr
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
		extrn __imp_fputc:dword	; DATA XREF: fputcr
; void __cdecl _imp_free(void *)
		extrn __imp_free:dword	; DATA XREF: freer
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
		extrn __imp_getc:dword	; DATA XREF: getcr
		extrn __imp_getopt:dword ; DATA	XREF: getoptr
; void *__cdecl	malloc(size_t)
		extrn malloc:dword	; DATA XREF: .text:004022A0r
		extrn optarg:dword	; DATA XREF: sub_401700+160r
					; sub_401700+181r
		extrn optind:dword	; DATA XREF: sub_401700+AFr
		extrn __imp_putc:dword	; DATA XREF: putcr
; void *__cdecl	_imp_realloc(void *,size_t)
		extrn __imp_realloc:dword ; DATA XREF: reallocr
		extrn __imp_setlocale:dword ; DATA XREF: setlocaler
; char *__cdecl	_imp_strerror(int)
		extrn __imp_strerror:dword ; DATA XREF:	strerrorr
; char *__cdecl	_imp_strrchr(const char	*,int)
		extrn __imp_strrchr:dword ; DATA XREF: strrchrr
		extrn __imp_vfprintf:dword ; DATA XREF:	vfprintfr


;
; Imports from KERNEL32
;
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr



		end start
