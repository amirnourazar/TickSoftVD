

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\pamarith.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00001398 (   5016.)
; Section size in file		: 00001400 (   5120.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		and	esp, 0FFFFFFF0h
		mov	eax, ds:dword_404000
		test	eax, eax
		jz	short loc_401013
		int	3		; Trap to Debugger

loc_401013:				; CODE XREF: start+10j
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_401310
		call	sub_401FB0
		leave
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401050	proc near		; CODE XREF: sub_401310+7EEp

var_58		= dword	ptr -58h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	[ebp+var_10], eax
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_14], edx
		mov	edx, [ebp+arg_4]
		mov	esi, [ebp+var_10]
		mov	[ebp+var_18], eax
		mov	ecx, [eax+20h]
		mov	[ebp+var_1C], edx
		mov	[ebp+var_20], ecx
		mov	[esp+58h+var_58], esi
		call	pnm_allocpamrow
		mov	[ebp+var_24], eax
		mov	ebx, [ebp+var_14]
		mov	[esp+58h+var_58], ebx
		call	pnm_allocpamrow
		mov	[ebp+var_28], eax
		mov	edx, [ebp+var_18]
		mov	[esp+58h+var_58], edx
		call	pnm_allocpamrow
		mov	[ebp+var_2C], eax
		mov	ecx, [ebp+var_18]
		mov	[ebp+var_30], 0
		mov	eax, [ecx+14h]
		test	eax, eax
		jnz	loc_401142

loc_4010B0:				; CODE XREF: sub_401050+ECj
		mov	eax, [ebp+var_24]
		mov	[esp+58h+var_58], eax
		call	pm_freerow
		mov	esi, [ebp+var_28]
		mov	[esp+58h+var_58], esi
		call	pm_freerow
		mov	edi, [ebp+var_2C]
		mov	[ebp+arg_0], edi
		add	esp, 4Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	pm_freerow
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4010D8:				; CODE XREF: sub_401050+188j
		mov	edx, [ebp+var_1C]
		mov	dword ptr [esp+0], offset aInternalError_ ; "Internal error.  applyUnNormalizedFunct"...
		mov	[esp-4+arg_0], edx
		call	pm_error
		mov	eax, [ebp+var_18]
		mov	ecx, [eax+1Ch]
		mov	[ebp+var_3C], ecx
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401100:				; CODE XREF: sub_401050+19Dj
					; sub_401050+1ACj ...
		mov	ebx, [ebp+var_38]
		mov	[ebx+esi*4], edi
		inc	esi
		cmp	[ebp+var_3C], esi
		ja	loc_401190
		mov	esi, [ebp+var_18]
		mov	eax, [esi+18h]

loc_401116:				; CODE XREF: sub_401050+136j
		inc	[ebp+var_34]
		cmp	eax, [ebp+var_34]
		ja	short loc_401180

loc_40111E:				; CODE XREF: sub_401050+126j
		mov	ebx, [ebp+var_2C]
		mov	[esp-4+arg_0], ebx
		mov	edx, [ebp+var_18]
		mov	[esp+0], edx
		call	pnm_writepamrow
		inc	[ebp+var_30]
		mov	ecx, [ebp+var_18]
		mov	eax, [ebp+var_30]
		cmp	[ecx+14h], eax
		jbe	loc_4010B0

loc_401142:				; CODE XREF: sub_401050+5Aj
		mov	eax, [ebp+var_24]
		mov	[esp-4+arg_0], eax
		mov	ecx, [ebp+var_10]
		mov	[esp+0], ecx
		call	pnm_readpamrow
		mov	esi, [ebp+var_28]
		mov	[esp-4+arg_0], esi
		mov	ebx, [ebp+var_14]
		mov	[esp+0], ebx
		call	pnm_readpamrow
		mov	[ebp+var_34], 0
		mov	ebx, [ebp+var_18]
		mov	eax, [ebx+18h]
		cmp	eax, 0
		jbe	short loc_40111E
		mov	edx, [ebx+1Ch]
		mov	[ebp+var_3C], edx
		mov	esi, esi

loc_401180:				; CODE XREF: sub_401050+CCj
		xor	esi, esi
		cmp	[ebp+var_3C], 0
		jbe	short loc_401116
		nop
		lea	esi, [esi+0]

loc_401190:				; CODE XREF: sub_401050+BAj
		mov	ebx, [ebp+var_10]
		mov	ecx, [ebx+1Ch]
		dec	ecx
		cmp	ecx, esi
		jbe	short loc_40119D
		mov	ecx, esi

loc_40119D:				; CODE XREF: sub_401050+149j
		mov	eax, [ebp+var_14]
		mov	edx, [eax+1Ch]
		dec	edx
		cmp	edx, esi
		jbe	short loc_4011AA
		mov	edx, esi

loc_4011AA:				; CODE XREF: sub_401050+156j
		cmp	[ebp+var_1C], 0Fh
		mov	eax, [ebp+var_2C]
		mov	ebx, [ebp+var_34]
		mov	ebx, [eax+ebx*4]
		mov	eax, [ebp+var_34]
		mov	[ebp+var_38], ebx
		mov	ebx, [ebp+var_24]
		mov	eax, [ebx+eax*4]
		mov	[ebp+var_44], eax
		mov	ebx, [eax+ecx*4]
		mov	ecx, [ebp+var_34]
		mov	[ebp+var_40], ebx
		mov	ebx, [ebp+var_28]
		mov	eax, [ebx+ecx*4]
		mov	ecx, [eax+edx*4]
		ja	loc_4010D8
		mov	edi, [ebp+var_1C]
		jmp	ds:off_403064[edi*4]

loc_4011E8:				; DATA XREF: .rdata:004030A0o
		mov	edi, [ebp+var_40]
		shr	edi, cl
		jmp	loc_401100
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4011F2:				; CODE XREF: sub_401050+191j
					; DATA XREF: .rdata:0040309Co
		mov	edi, [ebp+var_40]
		mov	ebx, [ebp+var_20]
		shl	edi, cl
		and	edi, ebx
		jmp	loc_401100
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401201:				; CODE XREF: sub_401050+191j
					; DATA XREF: .rdata:00403098o
		mov	edi, [ebp+var_40]
		xor	edi, ecx
		jmp	loc_401100
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40120B:				; CODE XREF: sub_401050+191j
					; DATA XREF: .rdata:00403094o
		mov	edi, [ebp+var_40]
		or	edi, ecx
		not	edi

loc_401212:				; CODE XREF: sub_401050+1D3j
		mov	ebx, [ebp+var_20]
		and	edi, ebx
		jmp	loc_401100
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40121C:				; CODE XREF: sub_401050+191j
					; DATA XREF: .rdata:00403090o
		mov	edi, [ebp+var_40]
		and	edi, ecx
		not	edi
		jmp	short loc_401212
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401225:				; CODE XREF: sub_401050+191j
					; DATA XREF: .rdata:0040308Co
		mov	edi, [ebp+var_40]
		or	edi, ecx
		jmp	loc_401100
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40122F:				; CODE XREF: sub_401050+191j
					; DATA XREF: .rdata:00403088o
		mov	edi, [ebp+var_40]
		and	edi, ecx
		jmp	loc_401100
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401239:				; CODE XREF: sub_401050+191j
					; DATA XREF: .rdata:00403084o
		cmp	[ebp+var_40], ecx
		mov	edi, 2
		ja	loc_401100
		setnb	cl
		movzx	edi, cl
		jmp	loc_401100
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401252:				; CODE XREF: sub_401050+191j
					; DATA XREF: .rdata:00403080o
		mov	ebx, [ebp+var_40]
		lea	edi, [ebx+ecx+1]
		shr	edi, 1
		jmp	loc_401100
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401260:				; CODE XREF: sub_401050+191j
					; DATA XREF: .rdata:0040307Co
		cmp	ecx, [ebp+var_40]
		mov	edi, ecx
		jnb	loc_401100
		mov	edi, [ebp+var_40]
		jmp	loc_401100
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401273:				; CODE XREF: sub_401050+191j
					; DATA XREF: .rdata:00403078o
		cmp	ecx, [ebp+var_40]
		mov	edi, ecx
		jbe	loc_401100
		mov	edi, [ebp+var_40]
		jmp	loc_401100
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401286:				; CODE XREF: sub_401050+191j
					; DATA XREF: .rdata:00403074o
		cmp	[ebp+var_40], ecx
		jbe	short loc_4012FC
		mov	edi, [ebp+var_40]
		sub	edi, ecx
		jmp	loc_401100
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401295:				; CODE XREF: sub_401050+191j
					; DATA XREF: .rdata:00403070o
		cmp	ecx, [ebp+var_40]
		mov	edi, [ebp+var_20]
		jbe	loc_401100
		mov	edx, [ebp+var_20]
		mov	eax, ecx
		mov	edi, [ebp+var_40]
		shr	eax, 1
		imul	edi, edx
		xor	edx, edx
		add	eax, edi
		div	ecx
		mov	edi, eax
		jmp	loc_401100
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4012BB:				; CODE XREF: sub_401050+191j
					; DATA XREF: .rdata:00403068o
		mov	edi, [ebp+var_40]
		sub	edi, ecx
		jns	loc_401100
		xor	edi, edi
		jmp	loc_401100
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4012CD:				; CODE XREF: sub_401050+191j
					; DATA XREF: .rdata:0040306Co
		mov	eax, [ebp+var_40]
		xor	edx, edx
		imul	ecx, eax
		mov	eax, [ebp+var_20]
		shr	eax, 1
		add	eax, ecx
		div	[ebp+var_20]
		mov	edi, eax
		jmp	loc_401100
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4012E6:				; CODE XREF: sub_401050+191j
					; DATA XREF: .rdata:00403064o
		mov	edi, [ebp+var_40]
		add	edi, ecx
		cmp	edi, [ebp+var_20]
		jbe	loc_401100
		mov	edi, [ebp+var_20]
		jmp	loc_401100
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4012FC:				; CODE XREF: sub_401050+239j
		mov	edx, [ebp+var_40]
		mov	edi, ecx
		sub	edi, edx
		jmp	loc_401100
sub_401050	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401310	proc near		; DATA XREF: start+33o

var_6C8		= dword	ptr -6C8h
var_6C4		= dword	ptr -6C4h
var_6C0		= dword	ptr -6C0h
var_6BC		= dword	ptr -6BCh
var_6B8		= dword	ptr -6B8h
var_6B4		= dword	ptr -6B4h
var_6B0		= dword	ptr -6B0h
var_69C		= dword	ptr -69Ch
var_694		= dword	ptr -694h
var_690		= dword	ptr -690h
var_68C		= dword	ptr -68Ch
var_688		= dword	ptr -688h
var_684		= dword	ptr -684h
var_680		= dword	ptr -680h
var_67C		= dword	ptr -67Ch
var_678		= dword	ptr -678h
var_674		= dword	ptr -674h
var_670		= dword	ptr -670h
var_66C		= dword	ptr -66Ch
var_668		= dword	ptr -668h
var_664		= dword	ptr -664h
var_660		= dword	ptr -660h
var_65C		= dword	ptr -65Ch
var_658		= dword	ptr -658h
var_654		= dword	ptr -654h
var_650		= dword	ptr -650h
var_64C		= dword	ptr -64Ch
var_648		= dword	ptr -648h
var_644		= dword	ptr -644h
var_640		= dword	ptr -640h
var_63C		= dword	ptr -63Ch
var_638		= dword	ptr -638h
var_634		= dword	ptr -634h
var_630		= dword	ptr -630h
var_62C		= dword	ptr -62Ch
var_628		= dword	ptr -628h
var_624		= dword	ptr -624h
var_620		= dword	ptr -620h
var_61C		= dword	ptr -61Ch
var_618		= dword	ptr -618h
var_60C		= dword	ptr -60Ch
var_5FC		= dword	ptr -5FCh
var_5F8		= dword	ptr -5F8h
var_4E8		= dword	ptr -4E8h
var_4DC		= dword	ptr -4DCh
var_4D4		= dword	ptr -4D4h
var_4D0		= dword	ptr -4D0h
var_4CC		= dword	ptr -4CCh
var_4C8		= dword	ptr -4C8h
var_4C0		= dword	ptr -4C0h
var_3B8		= dword	ptr -3B8h
var_3B4		= dword	ptr -3B4h
var_3B0		= dword	ptr -3B0h
var_3AC		= dword	ptr -3ACh
var_3A8		= dword	ptr -3A8h
var_3A4		= dword	ptr -3A4h
var_3A0		= dword	ptr -3A0h
var_39C		= dword	ptr -39Ch
var_398		= dword	ptr -398h
var_394		= dword	ptr -394h
var_288		= dword	ptr -288h
var_274		= dword	ptr -274h
var_270		= dword	ptr -270h
var_26C		= dword	ptr -26Ch
var_268		= dword	ptr -268h
var_158		= dword	ptr -158h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	eax, 10h
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 6BCh
		xor	ebx, ebx
		mov	edi, [ebp+arg_4]
		and	esp, 0FFFFFFF0h
		call	sub_401F80
		lea	esi, [ebp+arg_0]
		call	__main
		mov	[esp+6C8h+var_6C8], esi
		lea	esi, [ebp+var_624]
		and	ebx, 0FFFFFF00h
		mov	[esp+6C8h+var_6C4], edi
		mov	bh, 0
		call	pnm_init
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_65C], eax
		mov	[esp+6C8h+var_6C8], 960h
		call	malloc
		mov	[eax+40h], esi
		lea	ecx, [ebp+var_61C]
		lea	edx, [ebp+var_620]
		mov	[eax+10h], ecx
		lea	esi, [ebp+var_630]
		lea	ecx, [ebp+var_628]
		mov	[eax+28h], edx
		lea	edx, [ebp+var_62C]
		mov	[eax+58h], ecx
		mov	ecx, 1
		mov	[eax+70h], edx
		xor	edx, edx
		mov	[eax+88h], esi
		xor	esi, esi
		mov	byte ptr [eax],	0
		mov	dword ptr [eax+4], offset unk_4030A4
		mov	dword ptr [eax+8], 1
		mov	dword ptr [eax+0Ch], 0
		mov	dword ptr [eax+14h], 0
		mov	byte ptr [eax+18h], 0
		mov	dword ptr [eax+1Ch], offset aSubtract ;	"subtract"
		mov	dword ptr [eax+20h], 1
		mov	dword ptr [eax+24h], 0
		mov	dword ptr [eax+2Ch], 0
		mov	byte ptr [eax+30h], 0
		mov	dword ptr [eax+34h], offset aMultiply ;	"multiply"
		mov	dword ptr [eax+38h], 1
		mov	dword ptr [eax+3Ch], 0
		mov	dword ptr [eax+44h], 0
		mov	byte ptr [eax+48h], 0
		mov	dword ptr [eax+4Ch], offset aDivide ; "divide"
		mov	dword ptr [eax+50h], 1
		mov	dword ptr [eax+54h], 0
		mov	dword ptr [eax+5Ch], 0
		mov	byte ptr [eax+60h], 0
		mov	dword ptr [eax+64h], offset aDifference	; "difference"
		mov	dword ptr [eax+68h], 1
		mov	dword ptr [eax+6Ch], 0
		mov	dword ptr [eax+74h], 0
		mov	byte ptr [eax+78h], 0
		mov	dword ptr [eax+7Ch], offset aMinimum ; "minimum"
		mov	[eax+80h], ecx
		lea	ecx, [ebp+var_634]
		mov	[eax+84h], edx
		mov	edx, offset aMaximum ; "maximum"
		mov	[eax+8Ch], esi
		mov	esi, 1
		mov	[eax+0A0h], ecx
		xor	ecx, ecx
		mov	[eax+94h], edx
		xor	edx, edx
		mov	[eax+98h], esi
		lea	esi, [ebp+var_638]
		mov	[eax+9Ch], ecx
		mov	ecx, offset aMean ; "mean"
		mov	[eax+0A4h], edx
		mov	edx, 1
		mov	[eax+0B8h], esi
		xor	esi, esi
		mov	[eax+0ACh], ecx
		xor	ecx, ecx
		mov	[eax+0B0h], edx
		lea	edx, [ebp+var_63C]
		mov	[eax+0B4h], esi
		mov	esi, offset aCompare ; "compare"
		mov	[eax+0BCh], ecx
		mov	ecx, 1
		mov	[eax+0D0h], edx
		xor	edx, edx
		mov	[eax+0C4h], esi
		xor	esi, esi
		mov	[eax+0C8h], ecx
		lea	ecx, [ebp+var_640]
		mov	[eax+0CCh], edx
		mov	edx, offset aAnd ; "and"
		mov	[eax+0D4h], esi
		mov	esi, 1
		mov	[eax+0E8h], ecx
		xor	ecx, ecx
		mov	[eax+0DCh], edx
		xor	edx, edx
		mov	[eax+0E0h], esi
		lea	esi, [ebp+var_644]
		mov	[eax+0E4h], ecx
		mov	ecx, offset aOr	; "or"
		mov	[eax+0ECh], edx
		mov	edx, 1
		mov	[eax+100h], esi
		xor	esi, esi
		mov	[eax+0F4h], ecx
		xor	ecx, ecx
		mov	[eax+0F8h], edx
		lea	edx, [ebp+var_648]
		mov	[eax+0FCh], esi
		mov	esi, offset aNand ; "nand"
		mov	[eax+104h], ecx
		mov	ecx, 1
		mov	[eax+118h], edx
		xor	edx, edx
		mov	byte ptr [eax+90h], 0
		mov	byte ptr [eax+0A8h], 0
		mov	byte ptr [eax+0C0h], 0
		mov	byte ptr [eax+0D8h], 0
		mov	byte ptr [eax+0F0h], 0
		mov	byte ptr [eax+108h], 0
		mov	[eax+10Ch], esi
		xor	esi, esi
		mov	[eax+110h], ecx
		lea	ecx, [ebp+var_64C]
		mov	[eax+114h], edx
		mov	edx, offset aNor ; "nor"
		mov	[eax+11Ch], esi
		mov	esi, 1
		mov	[eax+130h], ecx
		xor	ecx, ecx
		mov	[eax+124h], edx
		xor	edx, edx
		mov	[eax+128h], esi
		lea	esi, [ebp+var_650]
		mov	[eax+12Ch], ecx
		mov	ecx, offset aXor ; "xor"
		mov	[eax+134h], edx
		mov	edx, 1
		mov	[eax+148h], esi
		xor	esi, esi
		mov	[eax+13Ch], ecx
		xor	ecx, ecx
		mov	[eax+140h], edx
		lea	edx, [ebp+var_654]
		mov	[eax+144h], esi
		mov	esi, offset aShiftleft ; "shiftleft"
		mov	[eax+14Ch], ecx
		mov	ecx, 1
		mov	[eax+160h], edx
		xor	edx, edx
		mov	[eax+154h], esi
		xor	esi, esi
		mov	[eax+158h], ecx
		lea	ecx, [ebp+var_658]
		mov	[eax+15Ch], edx
		mov	edx, offset aShiftright	; "shiftright"
		mov	[eax+164h], esi
		mov	esi, 1
		mov	[eax+178h], ecx
		xor	ecx, ecx
		mov	[eax+16Ch], edx
		xor	edx, edx
		mov	[eax+170h], esi
		xor	esi, esi
		mov	[eax+174h], ecx
		xor	ecx, ecx
		mov	[eax+17Ch], edx
		mov	edx, 8
		mov	[eax+188h], esi
		mov	byte ptr [eax+120h], 0
		mov	byte ptr [eax+138h], 0
		mov	byte ptr [eax+150h], 0
		mov	byte ptr [eax+168h], 0
		mov	[esp+6C8h+var_6BC], eax
		lea	eax, [ebp+var_65C]
		mov	[esp+6C8h+var_6B4], ecx
		mov	[esp+6C8h+var_6B8], edx
		mov	[esp+6C8h+var_6C0], ebx
		mov	[esp+6C8h+var_6C4], edi
		mov	[esp+6C8h+var_6C8], eax
		call	optParseOptions3
		mov	ebx, [ebp+var_61C]
		mov	eax, [ebp+var_620]
		mov	ecx, [ebp+var_624]
		mov	edx, [ebp+var_628]
		add	eax, ebx
		mov	esi, [ebp+var_62C]
		add	eax, ecx
		mov	ebx, [ebp+var_630]
		add	eax, edx
		mov	ecx, [ebp+var_634]
		add	eax, esi
		mov	edx, [ebp+var_638]
		add	eax, ebx
		mov	esi, [ebp+var_63C]
		add	eax, ecx
		mov	ebx, [ebp+var_640]
		add	eax, edx
		mov	ecx, [ebp+var_644]
		add	eax, esi
		mov	edx, [ebp+var_648]
		add	eax, ebx
		mov	esi, [ebp+var_64C]
		add	eax, ecx
		mov	ebx, [ebp+var_650]
		add	eax, edx
		mov	ecx, [ebp+var_654]
		add	eax, esi
		mov	edx, [ebp+var_658]
		add	eax, ebx
		add	eax, ecx
		add	eax, edx
		cmp	eax, 1
		ja	loc_401B29

loc_40174F:				; CODE XREF: sub_401310+825j
		mov	eax, [ebp+var_65C]
		cmp	eax, 3
		jz	loc_401A28
		mov	[esp+6C8h+var_6C8], offset aYouMustSpecify ; "You must specify two arguments:  the fi"...
		dec	eax
		mov	[esp+6C8h+var_6C4], eax
		call	pm_error

loc_40176F:				; CODE XREF: sub_401310+724j
		mov	edi, [ebp+var_61C]
		test	edi, edi
		jz	loc_4019C6
		mov	[ebp+var_20], 0

loc_401784:				; CODE XREF: sub_401310+6C7j
					; sub_401310+6EFj ...
		mov	edx, [ebp+var_28]
		lea	esi, [ebp+var_158]
		mov	edi, 128h
		mov	[esp+6C8h+var_6C8], edx
		call	pm_openr
		mov	[ebp+var_660], eax
		mov	ebx, [ebp+var_24]
		mov	[esp+6C8h+var_6C8], ebx
		call	pm_openr
		mov	[ebp+var_664], eax
		mov	eax, 128h
		mov	[esp+6C8h+var_6C0], eax
		mov	[esp+6C8h+var_6C4], esi
		mov	ecx, [ebp+var_660]
		mov	[esp+6C8h+var_6C8], ecx
		call	pnm_readpaminit
		mov	[esp+6C8h+var_6C0], edi
		lea	edx, [ebp+var_288]
		mov	[esp+6C8h+var_6C4], edx
		mov	ebx, [ebp+var_664]
		mov	[esp+6C8h+var_6C8], ebx
		call	pnm_readpaminit
		mov	esi, [ebp+var_140]
		mov	ebx, [ebp+var_270]
		cmp	esi, ebx
		jz	loc_401B3A
		mov	ecx, [ebp+var_144]
		mov	edx, [ebp+var_274]

loc_401808:				; CODE XREF: sub_401310+838j
		mov	eax, [ebp+var_26C]
		mov	[esp+6C8h+var_6B4], edx
		mov	[esp+6C8h+var_6B8], ebx
		mov	[esp+6C8h+var_6B0], eax
		mov	edi, [ebp+var_13C]
		mov	[esp+6C8h+var_6C0], ecx
		mov	[esp+6C8h+var_6C4], esi
		mov	[esp+6C8h+var_6BC], edi
		mov	[esp+6C8h+var_6C8], offset aTheTwoImagesMu ; "The two images must be the same width a"...
		call	pm_error

loc_401838:				; CODE XREF: sub_401310+83Ej
		mov	edx, [ebp+var_13C]
		cmp	edx, 1
		jz	short loc_401866
		mov	eax, [ebp+var_26C]
		cmp	eax, 1
		jz	short loc_401866
		cmp	edx, eax
		jz	short loc_401866
		mov	[esp+6C8h+var_6C0], eax
		mov	[esp+6C8h+var_6C4], edx
		mov	[esp+6C8h+var_6C8], offset aTheTwoImages_0 ; "The two images must have the same	depth"...
		call	pm_error

loc_401866:				; CODE XREF: sub_401310+531j
					; sub_401310+53Cj ...
		lea	ecx, [ebp+var_158]
		mov	edx, 12Ch
		lea	esi, [ebp+var_4E8]
		mov	[esp+6C8h+var_6C4], ecx
		lea	ebx, [ebp+var_618]
		lea	edi, [ebp+var_288]
		mov	[esp+6C8h+var_6C0], edx
		mov	[esp+6C8h+var_6C8], esi
		mov	esi, 128h
		call	memcpy
		mov	[esp+6C8h+var_6C8], ebx
		mov	eax, 12Ch
		mov	[esp+6C8h+var_6C0], eax
		mov	[esp+6C8h+var_6C4], edi
		call	memcpy
		mov	[ebp+var_3B4], esi
		mov	edx, 12Ch
		mov	ebx, [ebp+var_20]
		mov	[ebp+var_3B8], edx
		call	__getreent
		mov	ecx, [eax+8]
		mov	edx, [ebp+var_4DC]
		mov	eax, [ebp+var_60C]
		mov	[ebp+var_3B0], ecx
		cmp	eax, edx
		jge	short loc_4018E1
		mov	eax, edx

loc_4018E1:				; CODE XREF: sub_401310+5CDj
		mov	[ebp+var_3AC], eax
		mov	eax, [ebp+var_4D4]
		xor	esi, esi
		mov	[ebp+var_3A8], esi
		mov	edx, [ebp+var_4CC]
		mov	edi, [ebp+var_4D0]
		mov	[ebp+var_3A4], eax
		mov	eax, [ebp+var_5FC]
		mov	[ebp+var_3A0], edi
		cmp	eax, edx
		jnb	short loc_401919
		mov	eax, edx

loc_401919:				; CODE XREF: sub_401310+605j
		mov	[ebp+var_39C], eax
		cmp	ebx, 0Fh
		ja	loc_401A04
		mov	eax, 1
		mov	cl, bl
		shl	eax, cl
		test	eax, 1FFh
		jnz	loc_401A39
		test	ah, 3Eh
		jz	loc_401B66

loc_401945:				; CODE XREF: sub_401310+6FBj
		mov	edx, [ebp+var_5F8]
		mov	eax, [ebp+var_4C8]
		cmp	edx, eax
		jz	short loc_40196F
		mov	[esp+6C8h+var_6C4], eax
		mov	[esp+6C8h+var_6C0], edx
		mov	[esp+6C8h+var_6C8], offset aForABitStringO ; "For a bit	string operation, the maxvals"...
		call	pm_error
		mov	eax, [ebp+var_4C8]

loc_40196F:				; CODE XREF: sub_401310+643j
		mov	[esp+6C8h+var_6C8], eax
		call	pm_maxvaltobits
		mov	[esp+6C8h+var_6C8], eax
		call	pm_bitstomaxval
		mov	edx, [ebp+var_4C8]
		cmp	eax, edx
		jz	short loc_40199F
		mov	[esp+6C8h+var_6C4], edx
		mov	[esp+6C8h+var_6C8], offset aForABitStrin_0 ; "For a bit	string operation, the maxvals"...

loc_401994:				; CODE XREF: sub_401310+88Ej
		call	pm_error
		mov	edx, [ebp+var_4C8]

loc_40199F:				; CODE XREF: sub_401310+677j
					; sub_401310+87Dj
		mov	[ebp+var_398], edx
		mov	edx, [ebp+var_398]
		mov	[esp+6C8h+var_6C8], edx
		call	pm_maxvaltobits
		mov	edx, eax
		add	edx, 7
		jns	loc_401A76

loc_4019BE:				; CODE XREF: sub_401310+760j
		lea	edx, [eax+0Eh]
		jmp	loc_401A76
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019C6:				; CODE XREF: sub_401310+467j
		mov	ecx, [ebp+var_620]
		test	ecx, ecx
		jz	short loc_4019DC
		mov	[ebp+var_20], 1
		jmp	loc_401784
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019DC:				; CODE XREF: sub_401310+6BEj
		mov	esi, [ebp+var_624]
		test	esi, esi
		jnz	loc_401B5A
		mov	eax, [ebp+var_628]
		test	eax, eax
		jz	loc_401D87
		mov	[ebp+var_20], 3
		jmp	loc_401784
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A04:				; CODE XREF: sub_401310+612j
					; sub_401310+859j
		cmp	[ebp+var_684], 1
		jz	loc_401945
		cmp	[ebp+var_688], 1
		jb	short loc_401A39
		cmp	[ebp+var_68C], 2
		jnz	short loc_401A5D
		jmp	loc_401B6F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A28:				; CODE XREF: sub_401310+448j
		mov	edx, [edi+4]
		mov	[ebp+var_28], edx
		mov	ebx, [edi+8]
		mov	[ebp+var_24], ebx
		jmp	loc_40176F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A39:				; CODE XREF: sub_401310+626j
					; sub_401310+708j
		cmp	ebx, 8
		mov	eax, 2
		jz	short loc_401A57
		mov	edx, [ebp+var_4C8]
		mov	eax, [ebp+var_5F8]
		cmp	eax, edx
		jb	loc_401B53

loc_401A57:				; CODE XREF: sub_401310+731j
					; sub_401310+845j
		mov	[ebp+var_398], eax

loc_401A5D:				; CODE XREF: sub_401310+711j
		mov	edx, [ebp+var_398]
		mov	[esp+6C8h+var_6C8], edx
		call	pm_maxvaltobits
		mov	edx, eax
		add	edx, 7
		js	loc_4019BE

loc_401A76:				; CODE XREF: sub_401310+6A8j
					; sub_401310+6B1j
		lea	eax, [ebp+var_3B8]
		sar	edx, 3
		add	eax, 28h
		mov	[ebp+var_394], edx
		lea	esi, [ebp+var_4C0]
		lea	edi, [ebp+var_3B8]
		mov	[esp+6C8h+var_6C4], esi
		mov	[esp+6C8h+var_6C8], eax
		call	strcpy
		mov	[esp+6C8h+var_6C8], edi
		call	pnm_writepaminit
		mov	esi, [ebp+var_20]
		cmp	esi, 0Fh
		ja	short loc_401ACE
		mov	eax, 1
		mov	ecx, esi
		shl	eax, cl
		test	eax, 1FFh
		jnz	loc_401BA3
		test	ah, 3Eh
		jnz	short loc_401AE5
		test	ah, 0C0h
		jnz	short loc_401AE5

loc_401ACE:				; CODE XREF: sub_401310+79Ej
		mov	ebx, [ebp+var_690]
		test	ebx, ebx
		jz	loc_401BA3
		cmp	[ebp+var_694], 2
		ja	short loc_401B03

loc_401AE5:				; CODE XREF: sub_401310+7B7j
					; sub_401310+7BCj ...
		mov	[esp+6C8h+var_6C4], esi
		lea	edi, [ebp+var_3B8]
		lea	edx, [ebp+var_288]
		mov	[esp+6C8h+var_6C8], edi
		lea	eax, [ebp+var_158]
		call	sub_401050

loc_401B03:				; CODE XREF: sub_401310+7D3j
		mov	eax, [ebp+var_660]
		mov	[esp+6C8h+var_6C8], eax
		call	pm_close
		mov	ebx, [ebp+var_664]
		mov	[esp+6C8h+var_6C8], ebx
		call	pm_close
		lea	esp, [ebp+var_C]
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B29:				; CODE XREF: sub_401310+439j
		mov	[esp+6C8h+var_6C8], offset aYouMaySpecifyO ; "You may specify only one function"
		call	pm_error
		jmp	loc_40174F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B3A:				; CODE XREF: sub_401310+4E6j
		mov	ecx, [ebp+var_144]
		mov	edx, [ebp+var_274]
		cmp	ecx, edx
		jnz	loc_401808
		jmp	loc_401838
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B53:				; CODE XREF: sub_401310+741j
		mov	eax, edx
		jmp	loc_401A57
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B5A:				; CODE XREF: sub_401310+6D4j
		mov	[ebp+var_20], 2
		jmp	loc_401784
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B66:				; CODE XREF: sub_401310+62Fj
		test	ah, 0C0h
		jz	loc_401A04

loc_401B6F:				; CODE XREF: sub_401310+713j
		mov	ebx, [ebp+var_4C8]
		mov	[esp+6C8h+var_6C8], ebx
		call	pm_maxvaltobits
		mov	[esp+6C8h+var_6C8], eax
		call	pm_bitstomaxval
		mov	edx, [ebp+var_4C8]
		cmp	eax, edx
		jz	loc_40199F
		mov	[esp+6C8h+var_6C4], edx
		mov	[esp+6C8h+var_6C8], offset aForABitShiftOp ; "For a bit	shift operation, the maxval o"...
		jmp	loc_401994
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401BA3:				; CODE XREF: sub_401310+7AEj
					; sub_401310+7C6j
		mov	edx, [ebp+var_268]
		cmp	[ebp+var_138], edx
		jz	loc_401AE5
		lea	edx, [ebp+var_158]
		lea	ebx, [ebp+var_288]
		mov	[esp+6C8h+var_6C8], edx
		call	pnm_allocpamrown
		mov	[ebp+var_668], eax
		mov	[esp+6C8h+var_6C8], ebx
		call	pnm_allocpamrown
		mov	[ebp+var_66C], eax
		lea	ecx, [ebp+var_3B8]
		mov	[esp+6C8h+var_6C8], ecx
		call	pnm_allocpamrown
		mov	[ebp+var_670], eax
		mov	edi, [ebp+var_3A4]
		xor	eax, eax
		mov	[ebp+var_674], eax
		test	edi, edi
		jnz	loc_401CD7

loc_401C07:				; CODE XREF: sub_401310+9C1j
		mov	ecx, [ebp+var_668]
		mov	[esp+6C8h+var_6C8], ecx
		call	pm_freerow
		mov	edx, [ebp+var_66C]
		mov	[esp+6C8h+var_6C8], edx
		call	pm_freerow
		mov	esi, [ebp+var_670]
		mov	[esp+6C8h+var_6C8], esi
		call	pm_freerow
		mov	eax, [ebp+var_660]
		mov	[esp+6C8h+var_6C8], eax
		call	pm_close
		mov	ebx, [ebp+var_664]
		mov	[esp+6C8h+var_6C8], ebx
		call	pm_close
		lea	esp, [ebp+var_C]
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C57:				; CODE XREF: sub_401310+A6Aj
		fstp	st
		fstp	st
		mov	[esp-4+arg_0], esi
		mov	dword ptr [esp+0], offset aInternalErro_0 ; "Internal error.  applyNormalizedFunctio"...
		call	pm_error
		mov	edx, [ebp+var_39C]
		mov	[ebp+var_680], edx
		mov	esi, esi
		lea	edi, [edi+0]

loc_401C80:				; CODE XREF: sub_401310+AC6j
					; sub_401310+AE4j ...
		fld	[ebp+var_67C]
		mov	ecx, [ebp+var_678]
		fstp	dword ptr [ecx+ebx*4]
		inc	ebx
		cmp	[ebp+var_680], ebx
		ja	loc_401D30
		mov	eax, [ebp+var_3A0]

loc_401CA2:				; CODE XREF: sub_401310+A19j
		inc	edi
		cmp	eax, edi
		ja	short loc_401D20

loc_401CA7:				; CODE XREF: sub_401310+A02j
		mov	eax, [ebp+var_670]
		lea	ebx, [ebp+var_3B8]
		mov	[esp+0], ebx
		mov	[esp-4+arg_0], eax
		call	pnm_writepamrown
		inc	[ebp+var_674]
		mov	edi, [ebp+var_674]
		cmp	[ebp+var_3A4], edi
		jbe	loc_401C07

loc_401CD7:				; CODE XREF: sub_401310+8F1j
		mov	ebx, [ebp+var_668]
		lea	ecx, [ebp+var_158]
		lea	edi, [ebp+var_288]
		mov	[esp+0], ecx
		mov	[esp-4+arg_0], ebx
		call	pnm_readpamrown
		mov	eax, [ebp+var_66C]
		mov	[esp+0], edi
		xor	edi, edi
		mov	[esp-4+arg_0], eax
		call	pnm_readpamrown
		mov	eax, [ebp+var_3A0]
		cmp	eax, 0
		jbe	short loc_401CA7
		mov	edx, [ebp+var_39C]
		mov	[ebp+var_680], edx

loc_401D20:				; CODE XREF: sub_401310+995j
		xor	ebx, ebx
		cmp	[ebp+var_680], 0
		jbe	loc_401CA2
		nop

loc_401D30:				; CODE XREF: sub_401310+986j
		mov	ecx, [ebp+var_13C]
		dec	ecx
		cmp	ecx, ebx
		jbe	short loc_401D3D
		mov	ecx, ebx

loc_401D3D:				; CODE XREF: sub_401310+A29j
		mov	edx, [ebp+var_26C]
		dec	edx
		cmp	edx, ebx
		jbe	short loc_401D4A
		mov	edx, ebx

loc_401D4A:				; CODE XREF: sub_401310+A36j
		mov	eax, [ebp+var_670]
		cmp	esi, 8
		mov	eax, [eax+edi*4]
		mov	[ebp+var_678], eax
		mov	eax, [ebp+var_668]
		mov	eax, [eax+edi*4]
		fld	dword ptr [eax+ecx*4]
		mov	ecx, [ebp+var_66C]
		mov	[ebp+var_69C], eax
		mov	eax, [ecx+edi*4]
		fld	dword ptr [eax+edx*4]
		ja	loc_401C57
		jmp	ds:off_4034BC[esi*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D87:				; CODE XREF: sub_401310+6E2j
		mov	ebx, [ebp+var_62C]
		test	ebx, ebx
		jnz	loc_401E5C
		mov	edx, [ebp+var_630]
		test	edx, edx
		jz	loc_401E87
		mov	[ebp+var_20], 5
		jmp	loc_401784
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401DB0:				; CODE XREF: sub_401310+A70j
					; DATA XREF: .rdata:004034DCo
		fcom	st(1)
		fnstsw	ax
		sahf
		jb	loc_401E68
		fcompp	st(1), st
		fnstsw	ax
		sahf
		jbe	loc_401E7C
		fldz
		nop
		lea	esi, [esi+0]

loc_401DD0:				; CODE XREF: sub_401310+AD3j
					; sub_401310+AE0j ...
		fstp	[ebp+var_67C]
		jmp	loc_401C80
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401DDB:				; CODE XREF: sub_401310+A70j
					; DATA XREF: .rdata:004034D8o
		faddp	st(1), st
		fmul	ds:flt_4034B8
		jmp	short loc_401DD0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401DE5:				; CODE XREF: sub_401310+A70j
					; DATA XREF: .rdata:004034D4o
		fst	[ebp+var_67C]

loc_401DEB:				; CODE XREF: sub_401310+B31j
		fcomp	st(1)
		fnstsw	ax
		sahf
		jb	short loc_401DD0
		fstp	st
		jmp	loc_401C80
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401DF9:				; CODE XREF: sub_401310+A70j
					; DATA XREF: .rdata:004034D0o
		fst	[ebp+var_67C]

loc_401DFF:				; CODE XREF: sub_401310+B43j
		fcomp	st(1)
		fnstsw	ax
		sahf
		ja	short loc_401DD0
		fstp	st
		jmp	loc_401C80
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E0D:				; CODE XREF: sub_401310+A70j
					; DATA XREF: .rdata:004034CCo
		fld	st(1)
		fsub	st, st(1)
		fxch	st(2)
		fcom	st(1)
		fnstsw	ax
		fxch	st(2)
		sahf
		fstp	[ebp+var_67C]
		ja	short loc_401E73
		fsubrp	st(1), st
		jmp	short loc_401DD0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E26:				; CODE XREF: sub_401310+A70j
					; DATA XREF: .rdata:004034C8o
		fcom	st(1)
		fnstsw	ax
		sahf
		jbe	short loc_401E68
		fdivp	st(1), st
		jmp	short loc_401DD0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E31:				; CODE XREF: sub_401310+A70j
					; DATA XREF: .rdata:004034C0o
		fsubp	st(1), st
		fstp	[ebp+var_67C]
		fldz
		fld	[ebp+var_67C]
		jmp	short loc_401DEB
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E43:				; CODE XREF: sub_401310+A70j
					; DATA XREF: .rdata:004034BCo
		faddp	st(1), st
		fstp	[ebp+var_67C]
		fld1
		fld	[ebp+var_67C]
		jmp	short loc_401DFF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E55:				; CODE XREF: sub_401310+A70j
					; DATA XREF: .rdata:004034C4o
		fmulp	st(1), st
		jmp	loc_401DD0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E5C:				; CODE XREF: sub_401310+A7Fj
		mov	[ebp+var_20], 4
		jmp	loc_401784
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E68:				; CODE XREF: sub_401310+AA5j
					; sub_401310+B1Bj
		fstp	st
		fstp	st
		fld1
		jmp	loc_401DD0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E73:				; CODE XREF: sub_401310+B10j
		fstp	st
		fstp	st
		jmp	loc_401C80
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E7C:				; CODE XREF: sub_401310+AB0j
		fld	ds:flt_4034B8
		jmp	loc_401DD0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E87:				; CODE XREF: sub_401310+A8Dj
		mov	edi, [ebp+var_634]
		test	edi, edi
		jz	short loc_401E9D
		mov	[ebp+var_20], 6
		jmp	loc_401784
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E9D:				; CODE XREF: sub_401310+B7Fj
		mov	ecx, [ebp+var_638]
		test	ecx, ecx
		jz	short loc_401EB3
		mov	[ebp+var_20], 7
		jmp	loc_401784
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401EB3:				; CODE XREF: sub_401310+B95j
		mov	esi, [ebp+var_63C]
		test	esi, esi
		jz	short loc_401EC9
		mov	[ebp+var_20], 8
		jmp	loc_401784
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401EC9:				; CODE XREF: sub_401310+BABj
		mov	eax, [ebp+var_640]
		test	eax, eax
		jz	short loc_401EDF
		mov	[ebp+var_20], 9
		jmp	loc_401784
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401EDF:				; CODE XREF: sub_401310+BC1j
		mov	ebx, [ebp+var_644]
		test	ebx, ebx
		jz	short loc_401EF5
		mov	[ebp+var_20], 0Ah
		jmp	loc_401784
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401EF5:				; CODE XREF: sub_401310+BD7j
		mov	edx, [ebp+var_648]
		test	edx, edx
		jz	short loc_401F0B
		mov	[ebp+var_20], 0Bh
		jmp	loc_401784
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F0B:				; CODE XREF: sub_401310+BEDj
		mov	edi, [ebp+var_64C]
		test	edi, edi
		jz	short loc_401F21
		mov	[ebp+var_20], 0Ch
		jmp	loc_401784
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F21:				; CODE XREF: sub_401310+C03j
		mov	ecx, [ebp+var_650]
		test	ecx, ecx
		jz	short loc_401F37
		mov	[ebp+var_20], 0Dh
		jmp	loc_401784
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F37:				; CODE XREF: sub_401310+C19j
		mov	esi, [ebp+var_654]
		test	esi, esi
		jz	short loc_401F4D
		mov	[ebp+var_20], 0Eh
		jmp	loc_401784
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F4D:				; CODE XREF: sub_401310+C2Fj
		mov	eax, [ebp+var_658]
		test	eax, eax
		jz	short loc_401F63
		mov	[ebp+var_20], 0Fh
		jmp	loc_401784
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F63:				; CODE XREF: sub_401310+C45j
		mov	[esp+6C8h+var_6C8], offset aYouMustSpeci_0 ; "You must specify a function (e.g.	'-add"...
		call	pm_error
		jmp	loc_401784
sub_401310	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401F80	proc near		; CODE XREF: sub_401310+19p
		push	ecx
		mov	ecx, esp
		add	ecx, 8

loc_401F86:				; CODE XREF: sub_401F80+1Bj
		cmp	eax, 1000h
		jb	short loc_401F9D
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		jmp	short loc_401F86
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F9D:				; CODE XREF: sub_401F80+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		jmp	eax
sub_401F80	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401FB0	proc near		; CODE XREF: start+3Ap

var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_C2		= dword	ptr -0C2h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		mov	[esp+18h+var_14], eax
		mov	[esp+18h+var_18], esi
		call	sub_402060
		sub	esp, 8
		test	eax, eax
		jz	short loc_401FE1
		mov	[esp+18h+var_18], 0

loc_401FDB:				; CODE XREF: sub_401FB0+56j
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)

loc_401FE1:				; CODE XREF: sub_401FB0+22j
		sub	esp, 0C0h
		lea	ebx, [esp+0D8h+var_C2+1]
		and	ebx, 0FFFFFFF0h
		mov	dword ptr [ebx], 0
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	sub_402060
		sub	esp, 8
		mov	[esp+0D8h+var_D8], ebx
		jmp	short loc_401FDB
sub_401FB0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memcpy. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strcpy. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getreent. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS KEYPAD "+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402060	proc near		; CODE XREF: sub_401FB0+18p
					; sub_401FB0+4Bp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		push	ebx
		sub	esp, 4		; lpModuleName
		mov	ebx, [ebp+arg_4]
		test	ebx, ebx
		jz	loc_402163

loc_402074:				; CODE XREF: sub_402060+11Fj
		mov	dword ptr [ebx+4], 0A8h
		xor	ecx, ecx
		mov	edx, 84h
		mov	dword ptr [ebx+8], 3EDh
		test	eax, eax
		mov	dword ptr [ebx+0Ch], 12h
		mov	[ebx+80h], ecx
		mov	[ebx+84h], edx
		mov	dword ptr [ebx+2Ch], offset dword_402388
		mov	dword ptr [ebx+30h], offset dword_402390
		mov	dword ptr [ebx+14h], offset unk_404014
		jnz	loc_402151
		mov	eax, ds:_impure_ptr
		mov	[ebx+10h], eax

loc_4020C1:				; CODE XREF: sub_402060+FEj
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [ebx+48h], offset sub_402260
		mov	dword ptr [ebx+4Ch], offset sub_402250
		mov	[ebx+28h], eax
		mov	eax, [ebp+0]
		mov	dword ptr [ebx+50h], offset sub_402240
		mov	dword ptr [ebx+54h], offset sub_402230
		mov	dword ptr [ebx+24h], offset unk_404010
		mov	[ebx], eax
		mov	dword ptr [ebx+18h], offset malloc
		mov	dword ptr [ebx+1Ch], offset loc_402220
		mov	dword ptr [ebx+20h], offset loc_402210
		mov	dword ptr [ebx+44h], offset loc_402200
		mov	[esp+8+var_8], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	dword ptr [ebx+34h], offset aInternalError_ ; "Internal	error.	applyUnNormalizedFunct"...
		mov	dword ptr [ebx+38h], offset aInternalError_ ; "Internal	error.	applyUnNormalizedFunct"...
		mov	dword ptr [ebx+3Ch], offset dword_404000
		mov	dword ptr [ebx+40h], 404040h
		call	sub_4021D0
		mov	eax, 1

loc_40214A:				; CODE XREF: sub_402060+116j
		mov	ebx, [ebp+var_4]
		leave
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402151:				; CODE XREF: sub_402060+53j
		mov	edx, [ebx+0A4h]
		mov	eax, ds:_impure_ptr
		mov	[eax], edx
		jmp	loc_4020C1
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402163:				; CODE XREF: sub_402060+Ej
		mov	[esp+8+var_8], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_40214A
		mov	ebx, edx
		mov	eax, 1
		jmp	loc_402074
sub_402060	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4021A0	proc near		; CODE XREF: sub_4021D0+1Fp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ebx, [ebp+arg_4]
		jmp	short loc_4021BC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4021B0:				; CODE XREF: sub_4021A0+1Ej
		mov	edx, [ecx+4]
		mov	eax, [ecx]
		add	ecx, 8
		add	edx, esi
		add	[edx], eax

loc_4021BC:				; CODE XREF: sub_4021A0+Ej
		cmp	ecx, ebx
		jb	short loc_4021B0
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_4021A0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4021D0	proc near		; CODE XREF: sub_402060+E0p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	edx, 400000h
		mov	ebp, esp
		mov	eax, offset unk_4034E0
		sub	esp, 0Ch
		mov	[esp+0Ch+var_4], edx
		mov	[esp+0Ch+var_8], eax
		mov	[esp+0Ch+var_C], offset	unk_4034E0
		call	sub_4021A0
		leave
		retn
sub_4021D0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_402200:				; DATA XREF: sub_402060+ABo
		jmp	ds:calloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_402210:				; DATA XREF: sub_402060+A4o
		jmp	ds:realloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_402220:				; DATA XREF: sub_402060+9Do
		jmp	ds:free
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402230	proc near		; DATA XREF: sub_402060+86o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402230	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402240	proc near		; DATA XREF: sub_402060+7Fo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402240	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402250	proc near		; DATA XREF: sub_402060+72o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402250	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402260	proc near		; DATA XREF: sub_402060+6Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402260	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION optParseOptions3.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_bitstomaxval. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_close.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_error.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_freerow. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_maxvaltobits. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_openr.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_allocpamrow. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_allocpamrown.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_init.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_readpaminit. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_readpamrow. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_readpamrown. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_writepaminit.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_writepamrow. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_writepamrown.	PRESS KEYPAD "+" TO EXPAND]
		align 4
dword_402388	dd 0FFFFFFFFh, 0	; DATA XREF: sub_402060+3Eo
dword_402390	dd 0FFFFFFFFh, 1Bh dup(0) ; DATA XREF: sub_402060+45o
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 000004E0 (   1248.)
; Section size in file		: 00000600 (   1536.)
; Offset to raw	data for section: 00001800
; Flags	40000040: Data Readable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 403000h
aInternalError_	db 'Internal error.  applyUnNormalizedFunction() called for a fu'
					; DATA XREF: sub_401050+8Bo
					; sub_402060+C4o ...
		db 'nction it doesn',27h,'t know how to do: %u',0
		align 4
off_403064	dd offset loc_4012E6	; DATA XREF: sub_401050+191r
		dd offset loc_4012BB
		dd offset loc_4012CD
		dd offset loc_401295
		dd offset loc_401286
		dd offset loc_401273
		dd offset loc_401260
		dd offset loc_401252
		dd offset loc_401239
		dd offset loc_40122F
		dd offset loc_401225
		dd offset loc_40121C
		dd offset loc_40120B
		dd offset loc_401201
		dd offset loc_4011F2
		dd offset loc_4011E8
unk_4030A4	db  61h	; a		; DATA XREF: sub_401310+94o
		db  64h	; d
		db  64h	; d
		db    0	;
aSubtract	db 'subtract',0         ; DATA XREF: sub_401310+B4o
aMultiply	db 'multiply',0         ; DATA XREF: sub_401310+D4o
aDivide		db 'divide',0           ; DATA XREF: sub_401310+F4o
aDifference	db 'difference',0       ; DATA XREF: sub_401310+114o
aMinimum	db 'minimum',0          ; DATA XREF: sub_401310+134o
aMaximum	db 'maximum',0          ; DATA XREF: sub_401310+14Do
aMean		db 'mean',0             ; DATA XREF: sub_401310+17Fo
aCompare	db 'compare',0          ; DATA XREF: sub_401310+1B1o
aAnd		db 'and',0              ; DATA XREF: sub_401310+1E3o
aOr		db 'or',0               ; DATA XREF: sub_401310+215o
aNand		db 'nand',0             ; DATA XREF: sub_401310+247o
aNor		db 'nor',0              ; DATA XREF: sub_401310+2A3o
aXor		db 'xor',0              ; DATA XREF: sub_401310+2D5o
aShiftleft	db 'shiftleft',0        ; DATA XREF: sub_401310+307o
aShiftright	db 'shiftright',0       ; DATA XREF: sub_401310+339o
		align 4
aYouMustSpecify	db 'You must specify two arguments:  the files which are the ope'
					; DATA XREF: sub_401310+44Eo
		db 'rands of the dyadic function.  You specified %d',0
aTheTwoImagesMu	db 'The two images must be the same width and height.  The first'
					; DATA XREF: sub_401310+51Co
		db ' is %ux%ux%u, but the second is %ux%ux%u',0
		align 4
aTheTwoImages_0	db 'The two images must have the same depth or one of them must '
					; DATA XREF: sub_401310+54Ao
		db 'have depth 1.  The first has depth %u and the second has dep'
		db 'th %u',0
		align 4
aForABitStringO	db 'For a bit string operation, the maxvals of the left and righ'
					; DATA XREF: sub_401310+64Do
		db 't image must be the same.  You have left=%u and right=%u',0
		align 4
aForABitStrin_0	db 'For a bit string operation, the maxvals of the inputs must b'
					; DATA XREF: sub_401310+67Do
		db 'e a full binary count, i.e. a power of two minus one such as'
		db ' 0xff.  You have 0x%x',0
		align 4
aYouMaySpecifyO	db 'You may specify only one function',0 ; DATA XREF: sub_401310+819o
		align 4
aForABitShiftOp	db 'For a bit shift operation, the maxval of the left input imag'
					; DATA XREF: sub_401310+887o
		db 'e must be a full binary count, i.e. a power of two minus one'
		db ' such as 0xff.  You have 0x%x',0
		align 4
aInternalErro_0	db 'Internal error.  applyNormalizedFunction() called for a func'
					; DATA XREF: sub_401310+94Fo
		db 'tion it doesn',27h,'t know how to do: %u',0
		align 4
aYouMustSpeci_0	db 'You must specify a function (e.g. ',27h,'-add',27h,')',0
					; DATA XREF: sub_401310+C53o
		align 4
flt_4034B8	dd 5.0e-1		; DATA XREF: sub_401310+ACDr
					; sub_401310+B6Cr
off_4034BC	dd offset loc_401E43	; DATA XREF: sub_401310+A70r
		dd offset loc_401E31
		dd offset loc_401E55
		dd offset loc_401E26
		dd offset loc_401E0D
		dd offset loc_401DF9
		dd offset loc_401DE5
		dd offset loc_401DDB
		dd offset loc_401DB0
unk_4034E0	db    0	;		; DATA XREF: sub_4021D0+8o
					; sub_4021D0+18o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_rdata		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 00000040 (	 64.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 404000h
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
dword_404000	dd ?			; DATA XREF: start+9r sub_402060+D2o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_404010	db    ?	;		; DATA XREF: sub_402060+8Do
		db    ?	;
		db    ?	;
		db    ?	;
unk_404014	db    ?	;		; DATA XREF: sub_402060+4Co
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
_bss		ends

;
; Imports from cygwin1
;
; Section 4. (virtual address 00005000)
; Virtual size			: 000003D0 (	976.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001E00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp___getreent:dword ; DATA XREF: __getreentr
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn _impure_ptr:dword	; DATA XREF: sub_402060+59r
					; sub_402060+F7r
; void *__cdecl	calloc(size_t,size_t)
		extrn calloc:dword	; DATA XREF: .text:00402200r
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_401FB0+2Br
					; .text:00402190r
; void __cdecl free(void *)
		extrn free:dword	; DATA XREF: .text:00402220r
; void *__cdecl	_imp_malloc(size_t)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; void *__cdecl	_imp_memcpy(void *,const void *,size_t)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; void *__cdecl	realloc(void *,size_t)
		extrn realloc:dword	; DATA XREF: .text:00402210r
; char *__cdecl	_imp_strcpy(char *,const char *)
		extrn __imp_strcpy:dword ; DATA	XREF: strcpyr


;
; Imports from KERNEL32
;
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr


;
; Imports from cygnetpbm-10
;
		extrn __imp_optParseOptions3:dword ; DATA XREF:	optParseOptions3r
		extrn __imp_pm_bitstomaxval:dword ; DATA XREF: pm_bitstomaxvalr
		extrn __imp_pm_close:dword ; DATA XREF:	pm_closer
		extrn __imp_pm_error:dword ; DATA XREF:	pm_errorr
		extrn __imp_pm_freerow:dword ; DATA XREF: pm_freerowr
		extrn __imp_pm_maxvaltobits:dword ; DATA XREF: pm_maxvaltobitsr
		extrn __imp_pm_openr:dword ; DATA XREF:	pm_openrr
		extrn __imp_pnm_allocpamrow:dword ; DATA XREF: pnm_allocpamrowr
		extrn __imp_pnm_allocpamrown:dword ; DATA XREF:	pnm_allocpamrownr
		extrn __imp_pnm_init:dword ; DATA XREF:	pnm_initr
		extrn __imp_pnm_readpaminit:dword ; DATA XREF: pnm_readpaminitr
		extrn __imp_pnm_readpamrow:dword ; DATA	XREF: pnm_readpamrowr
		extrn __imp_pnm_readpamrown:dword ; DATA XREF: pnm_readpamrownr
		extrn __imp_pnm_writepaminit:dword ; DATA XREF:	pnm_writepaminitr
		extrn __imp_pnm_writepamrow:dword ; DATA XREF: pnm_writepamrowr
		extrn __imp_pnm_writepamrown:dword ; DATA XREF:	pnm_writepamrownr



		end start
