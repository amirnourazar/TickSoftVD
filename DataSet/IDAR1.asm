

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\annotate.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00001364 (   4964.)
; Section size in file		: 00001400 (   5120.)
; Offset to raw	data for section: 00000400
; Flags	60000060: Text Data Executable Readable
; Alignment	: 16 bytes ?

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		and	esp, 0FFFFFFF0h
		mov	eax, ds:dword_404000
		test	eax, eax
		jz	short loc_401013
		int	3		; Trap to Debugger

loc_401013:				; CODE XREF: start+10j
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_4013F0
		call	sub_401F70
		mov	esp, ebp
		pop	ebp
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401050:				; CODE XREF: .text:00402344j
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	loc_401CD0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8
byte_401060	db 72h,	62h, 0		; DATA XREF: sub_4013F0+7Bo
		dd 0A0D0920h		; DATA XREF: sub_4013F0+EAo
					; sub_4013F0+470o ...
		align 4
aFont		db 'font',0             ; DATA XREF: sub_4013F0+105o
aAlign		db 'align',0            ; DATA XREF: sub_4013F0+11Ao
aSize		db 'size',0             ; DATA XREF: sub_4013F0+12Fo
aColor		db 'color',0            ; DATA XREF: sub_4013F0+144o
aMove		db 'move',0             ; DATA XREF: sub_4013F0+159o
aText		db 'text',0             ; DATA XREF: sub_4013F0+16Eo
asc_401088	db 0Dh,0Ah,0		; DATA XREF: sub_4013F0+182o
					; sub_4013F0+330o ...
aFontErrorAtLin	db 'font error at line %d: %s',0Ah,0 ; DATA XREF: sub_4013F0+2AAo
byte_4010A6	db 0			; DATA XREF: sub_4013F0+2FBo
aBadSyntaxLineD	db 'Bad syntax, line %d',0Ah,0 ; DATA XREF: sub_4013F0+30Ao
aDD		db '%d %d',0            ; DATA XREF: sub_4013F0+34Ao
		dd 7 dup(90909090h)
		align 4
aMissingCoordin	db 'Missing coordinates at line %d',0Ah,0 ; DATA XREF: sub_4013F0+37Co
aDDDD		db '%d %d %d %d',0      ; DATA XREF: sub_4013F0+3CBo
aBadColorAtLine	db 'Bad color at line %d',0Ah,0 ; DATA XREF: sub_4013F0+440o
aLeft		db 'left',0             ; DATA XREF: sub_4013F0+4BDo
aCenter		db 'center',0           ; DATA XREF: sub_4013F0+4DBo
aRight		db 'right',0            ; DATA XREF: sub_4013F0+4FCo
aWb		db 'wb',0               ; DATA XREF: sub_4013F0+553o
aCannotCreateS	db 'Cannot create %s',0Ah,0 ; DATA XREF: sub_4013F0+5AEo
aSDidNotLoadPro	db '%s did not load properly',0Ah,0 ; DATA XREF: sub_4013F0+5E0o
aCouldnTOpenS	db 'Couldn',27h,'t open %s',0Ah,0 ; DATA XREF: sub_4013F0+5F6o
		align 10h
aUsageAnnotateI	db 'Usage: annotate imagein.jpg imageout.jpg',0Ah
					; DATA XREF: sub_4013F0+61Fo
		db 0Ah,0
		dd 5 dup(90909090h)
		align 4
aStandardInputS	db 'Standard input should consist of',0Ah,0 ; DATA XREF: sub_4013F0+647o
		dd 7 dup(90909090h)
		align 4
aLinesInTheFoll	db 'lines in the following formats:',0Ah,0 ; DATA XREF: sub_4013F0+66Fo
		dd 7 dup(90909090h)
		align 4
aColorRGB0255Ea	db 'color r g b (0-255 each) [a (0-127, 0 is opaque)]',0Ah,0
					; DATA XREF: sub_4013F0+697o
aFontFontname	db 'font fontname',0Ah,0 ; DATA XREF: sub_4013F0+6BFo
aSizePointsize	db 'size pointsize',0Ah,0 ; DATA XREF: sub_4013F0+6E7o
aAlignLeftRight	db 'align (left|right|center)',0Ah,0 ; DATA XREF: sub_4013F0+70Fo
aMoveXY		db 'move x y',0Ah,0     ; DATA XREF: sub_4013F0+737o
aTextActualOutp	db 'text actual-output-text',0Ah ; DATA XREF: sub_4013F0+75Fo
		db 0Ah,0
		dd 90900DEBh, 2	dup(90909090h)
		align 4
aIfTheFileParis	db 'If the file ',27h,'paris.ttf',27h,' exists in /usr/share/fon'
					; DATA XREF: sub_4013F0+787o
		db 'ts/truetype or in a',0Ah,0
		dd 6 dup(90909090h)
		align 4
aLocationSpecif	db 'location specified in the GDFONTPATH environment variable, ',27h
					; DATA XREF: sub_4013F0+7AFo
		db 'font paris',27h,' is',0Ah,0
		dd 5 dup(90909090h)
aSufficient_You	db 'sufficient. You may also specify the full, rooted path of a '
					; DATA XREF: sub_4013F0+7D7o
		db 'font file.',0Ah,0
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4013F0	proc near		; DATA XREF: start+33o

var_8A8		= dword	ptr -8A8h
var_8A4		= dword	ptr -8A4h
var_8A0		= dword	ptr -8A0h
var_89C		= dword	ptr -89Ch
var_898		= qword	ptr -898h
var_890		= qword	ptr -890h
var_888		= dword	ptr -888h
var_884		= dword	ptr -884h
var_880		= dword	ptr -880h
var_870		= qword	ptr -870h
var_868		= dword	ptr -868h
var_864		= dword	ptr -864h
var_860		= dword	ptr -860h
var_85C		= dword	ptr -85Ch
var_858		= dword	ptr -858h
var_854		= dword	ptr -854h
var_850		= dword	ptr -850h
var_84C		= dword	ptr -84Ch
var_848		= dword	ptr -848h
var_844		= dword	ptr -844h
var_840		= dword	ptr -840h
var_83C		= dword	ptr -83Ch
var_838		= dword	ptr -838h
var_834		= word ptr -834h
var_438		= dword	ptr -438h
var_434		= dword	ptr -434h
var_430		= dword	ptr -430h
var_41C		= dword	ptr -41Ch
var_418		= dword	ptr -418h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		push	edi
		push	esi
		mov	esi, 1
		push	ebx
		sub	esp, 89Ch
		and	esp, 0FFFFFFF0h
		call	sub_401F40
		mov	ebx, [ebp+arg_4]
		call	__main
		mov	[ebp+var_85C], esi
		xor	eax, eax
		xor	ecx, ecx
		mov	[ebp+var_868], eax
		mov	edx, 0Ch
		xor	eax, eax
		mov	[ebp+var_850], eax
		xor	eax, eax
		cmp	[ebp+arg_0], 3
		mov	[ebp+var_84C], eax
		mov	eax, 656D6974h
		mov	[ebp+var_838], eax
		mov	eax, 73h
		mov	[ebp+var_860], ecx
		mov	[ebp+var_864], edx
		mov	[ebp+var_834], ax
		jnz	loc_4019F3
		mov	esi, [ebx+4]
		mov	ebx, [ebx+8]
		mov	[esp+8A8h+var_8A4], offset byte_401060
		mov	[esp+8A8h+var_8A8], esi
		mov	[ebp+var_858], ebx
		call	_fopen64
		test	eax, eax
		mov	ebx, eax
		jz	loc_4019DD
		mov	[esp+8A8h+var_8A8], eax
		call	gdImageCreateFromJpeg
		mov	[ebp+var_854], eax
		mov	[esp+8A8h+var_8A8], ebx
		call	fclose
		mov	eax, [ebp+var_854]
		test	eax, eax
		jz	loc_4019C7
		nop

loc_4014B0:				; CODE XREF: sub_4013F0+102j
					; sub_4013F0+296j
		call	__getreent
		mov	eax, [eax+4]
		mov	[esp+8A8h+var_8A4], 400h
		mov	[esp+8A8h+var_8A0], eax
		lea	eax, [ebp+var_418]
		mov	[esp+8A8h+var_8A8], eax
		call	fgets
		test	eax, eax
		jz	loc_401943
		mov	[esp+8A8h+var_8A4], offset dword_401063
		lea	eax, [ebp+var_418]
		mov	[esp+8A8h+var_8A8], eax
		call	strtok
		test	eax, eax
		jz	short loc_4014B0
		cld
		mov	edi, offset aFont ; "font"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jz	loc_401910
		cld
		mov	edi, offset aAlign ; "align"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_401890
		cld
		mov	edi, offset aSize ; "size"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jz	loc_401860
		cld
		mov	edi, offset aColor ; "color"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jz	loc_401795
		cld
		mov	edi, offset aMove ; "move"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jz	loc_401720
		cld
		mov	edi, offset aText ; "text"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	loc_4016F5
		mov	[esp+8A8h+var_8A4], offset asc_401088 ;	"\r\n"
		mov	esi, [ebp+var_850]
		mov	[esp+8A8h+var_8A8], 0
		call	strtok
		test	eax, eax
		mov	ebx, eax
		jz	loc_4016EB

loc_401596:				; CODE XREF: sub_4013F0+300j
		mov	[esp+8A8h+var_880], ebx
		fldz
		mov	eax, [ebp+var_84C]
		mov	[esp+8A8h+var_8A8], 0
		lea	edi, [ebp+var_838]
		fstp	[esp+8A8h+var_890]
		fild	[ebp+var_864]
		mov	[esp+8A8h+var_884], eax
		mov	eax, [ebp+var_850]
		mov	[esp+8A8h+var_89C], edi
		mov	[esp+8A8h+var_888], eax
		mov	eax, [ebp+var_860]
		mov	[esp+8A8h+var_8A0], eax
		lea	eax, [ebp+var_438]
		fst	[ebp+var_870]
		fstp	[esp+8A8h+var_898]
		mov	[esp+8A8h+var_8A4], eax
		call	gdImageStringFT
		cmp	[ebp+var_868], 1
		jz	loc_4016D2
		cmp	[ebp+var_868], 1
		jle	short loc_401611
		cmp	[ebp+var_868], 2
		jz	loc_4016BD

loc_401611:				; CODE XREF: sub_4013F0+212j
					; sub_4013F0+2DDj
		mov	[esp+8A8h+var_880], ebx
		mov	eax, [ebp+var_84C]
		fldz
		mov	[esp+8A8h+var_888], esi
		mov	edx, [ebp+var_854]
		fstp	[esp+8A8h+var_890]
		fld	[ebp+var_870]
		mov	[esp+8A8h+var_884], eax
		mov	eax, [ebp+var_860]
		mov	[esp+8A8h+var_89C], edi
		fstp	[esp+8A8h+var_898]
		mov	[esp+8A8h+var_8A0], eax
		mov	[esp+8A8h+var_8A4], 0
		mov	[esp+8A8h+var_8A8], edx
		call	gdImageStringFT
		test	eax, eax
		mov	ebx, eax
		jnz	short loc_40168B
		mov	eax, [ebp+var_41C]
		mov	edx, [ebp+var_434]
		sub	eax, edx
		sub	[ebp+var_84C], eax
		jmp	short loc_401680
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401680:				; CODE XREF: sub_4013F0+281j
					; sub_4013F0+371j ...
		inc	[ebp+var_85C]
		jmp	loc_4014B0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40168B:				; CODE XREF: sub_4013F0+26Bj
		call	__getreent
		mov	[esp+8A8h+var_89C], ebx
		mov	edx, [ebp+var_85C]
		mov	[esp+8A8h+var_8A4], offset aFontErrorAtLin ; "font error at line %d: %s\n"
		mov	[esp+8A8h+var_8A0], edx
		mov	eax, [eax+0Ch]
		mov	[esp+8A8h+var_8A8], eax
		call	fprintf
		mov	[esp+8A8h+var_8A8], 7

loc_4016B8:				; CODE XREF: sub_4013F0+32Ej
					; sub_4013F0+3A0j ...
		call	exit

loc_4016BD:				; CODE XREF: sub_4013F0+21Bj
		mov	eax, [ebp+var_430]
		mov	ecx, [ebp+var_438]
		sub	eax, ecx

loc_4016CB:				; CODE XREF: sub_4013F0+2F9j
		sub	esi, eax
		jmp	loc_401611
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4016D2:				; CODE XREF: sub_4013F0+205j
		mov	edx, [ebp+var_438]
		mov	eax, [ebp+var_430]
		sub	eax, edx
		mov	edx, eax
		shr	edx, 1Fh
		add	eax, edx
		sar	eax, 1
		jmp	short loc_4016CB
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4016EB:				; CODE XREF: sub_4013F0+1A0j
		mov	ebx, offset byte_4010A6
		jmp	loc_401596
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4016F5:				; CODE XREF: sub_4013F0+17Cj
					; sub_4013F0+348j ...
		call	__getreent
		mov	[esp+8A8h+var_8A4], offset aBadSyntaxLineD ; "Bad syntax, line %d\n"
		mov	edx, [ebp+var_85C]
		mov	[esp+8A8h+var_8A0], edx
		mov	eax, [eax+0Ch]
		mov	[esp+8A8h+var_8A8], eax
		call	fprintf
		mov	[esp+8A8h+var_8A8], 4
		jmp	short loc_4016B8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401720:				; CODE XREF: sub_4013F0+167j
		mov	[esp+8A8h+var_8A4], offset asc_401088 ;	"\r\n"
		mov	[esp+8A8h+var_8A8], 0
		call	strtok
		test	eax, eax
		mov	edx, eax
		jz	short loc_4016F5
		mov	[esp+8A8h+var_8A4], offset aDD ; "%d %d"
		lea	eax, [ebp+var_84C]
		mov	[esp+8A8h+var_89C], eax
		lea	eax, [ebp+var_850]
		mov	[esp+8A8h+var_8A0], eax
		mov	[esp+8A8h+var_8A8], edx
		call	sscanf
		cmp	eax, 2
		jz	loc_401680
		call	__getreent
		mov	[esp+8A8h+var_8A4], offset aMissingCoordin ; "Missing coordinates at line %d\n"
		mov	edx, [ebp+var_85C]
		mov	[esp+8A8h+var_8A0], edx

loc_40177E:				; CODE XREF: sub_4013F0+5E8j
		mov	eax, [eax+0Ch]
		mov	[esp+8A8h+var_8A8], eax
		call	fprintf
		mov	[esp+8A8h+var_8A8], 3
		jmp	loc_4016B8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401795:				; CODE XREF: sub_4013F0+152j
		mov	[esp+8A8h+var_8A4], offset asc_401088 ;	"\r\n"
		mov	[esp+8A8h+var_8A8], 0
		call	strtok
		xor	ecx, ecx
		mov	edx, eax
		test	eax, eax
		mov	[ebp+var_83C], ecx
		jz	loc_4016F5
		mov	[esp+8A8h+var_8A4], offset aDDDD ; "%d %d %d %d"
		lea	eax, [ebp+var_83C]
		mov	dword ptr [esp+8A8h+var_898+4],	eax
		lea	eax, [ebp+var_840]
		mov	dword ptr [esp+8A8h+var_898], eax
		lea	eax, [ebp+var_844]
		mov	[esp+8A8h+var_89C], eax
		lea	eax, [ebp+var_848]
		mov	[esp+8A8h+var_8A0], eax
		mov	[esp+8A8h+var_8A8], edx
		call	sscanf
		cmp	eax, 2
		jle	short loc_40182B
		mov	eax, [ebp+var_83C]
		mov	edx, [ebp+var_848]
		shl	eax, 18h
		shl	edx, 10h
		add	eax, edx
		mov	edx, [ebp+var_844]
		shl	edx, 8
		lea	edx, [edx+eax]
		mov	eax, [ebp+var_840]
		add	edx, eax
		mov	[ebp+var_860], edx
		jmp	loc_401680
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40182B:				; CODE XREF: sub_4013F0+406j
		call	__getreent
		mov	[esp+8A8h+var_8A4], offset aBadColorAtLine ; "Bad color	at line	%d\n"
		mov	edx, [ebp+var_85C]
		mov	[esp+8A8h+var_8A0], edx

loc_401842:				; CODE XREF: sub_4013F0+5FEj
		mov	eax, [eax+0Ch]
		mov	[esp+8A8h+var_8A8], eax
		call	fprintf
		mov	[esp+8A8h+var_8A8], 2
		jmp	loc_4016B8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_401860:				; CODE XREF: sub_4013F0+13Dj
		mov	[esp+8A8h+var_8A4], offset dword_401063
		mov	[esp+8A8h+var_8A8], 0
		call	strtok
		test	eax, eax
		jz	loc_4016F5
		mov	[esp+8A8h+var_8A8], eax
		call	atoi
		mov	[ebp+var_864], eax
		jmp	loc_401680
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401890:				; CODE XREF: sub_4013F0+128j
		mov	[esp+8A8h+var_8A4], offset dword_401063
		mov	[esp+8A8h+var_8A8], 0
		call	strtok
		test	eax, eax
		jz	loc_4016F5
		cld
		mov	edi, offset aLeft ; "left"
		mov	ecx, 5
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4018CA
		xor	edi, edi
		mov	[ebp+var_868], edi
		jmp	loc_401680
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4018CA:				; CODE XREF: sub_4013F0+4CBj
		cld
		mov	edi, offset aCenter ; "center"
		mov	ecx, 7
		mov	esi, eax
		repe cmpsb
		jnz	short loc_4018EB
		mov	esi, 1
		mov	[ebp+var_868], esi
		jmp	loc_401680
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4018EB:				; CODE XREF: sub_4013F0+4E9j
		cld
		mov	edi, offset aRight ; "right"
		mov	ecx, 6
		mov	esi, eax
		repe cmpsb
		jnz	loc_401680
		mov	ebx, 2
		mov	[ebp+var_868], ebx
		jmp	loc_401680
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401910:				; CODE XREF: sub_4013F0+113j
		mov	[esp+8A8h+var_8A4], offset dword_401063
		mov	[esp+8A8h+var_8A8], 0
		call	strtok
		test	eax, eax
		jz	loc_4016F5
		mov	[esp+8A8h+var_8A4], eax
		lea	eax, [ebp+var_838]
		mov	[esp+8A8h+var_8A8], eax
		call	strcpy
		jmp	loc_401680
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401943:				; CODE XREF: sub_4013F0+E4j
		mov	[esp+8A8h+var_8A4], offset aWb ; "wb"
		mov	edx, [ebp+var_858]
		mov	[esp+8A8h+var_8A8], edx
		call	_fopen64
		test	eax, eax
		mov	ebx, eax
		jz	short loc_401999
		mov	[esp+8A8h+var_8A4], eax
		mov	eax, [ebp+var_854]
		mov	[esp+8A8h+var_8A0], 5Fh
		mov	[esp+8A8h+var_8A8], eax
		call	gdImageJpeg
		mov	edx, [ebp+var_854]
		mov	[esp+8A8h+var_8A8], edx
		call	gdImageDestroy
		mov	[esp+8A8h+var_8A8], ebx
		call	fclose
		lea	esp, [ebp+var_C]
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401999:				; CODE XREF: sub_4013F0+56Dj
		call	__getreent
		mov	[esp+8A8h+var_8A4], offset aCannotCreateS ; "Cannot create %s\n"
		mov	edx, [ebp+var_858]
		mov	[esp+8A8h+var_8A0], edx
		mov	eax, [eax+0Ch]
		mov	[esp+8A8h+var_8A8], eax
		call	fprintf
		mov	[esp+8A8h+var_8A8], 5
		jmp	loc_4016B8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019C7:				; CODE XREF: sub_4013F0+B9j
		call	__getreent
		mov	[esp+8A8h+var_8A0], esi
		mov	[esp+8A8h+var_8A4], offset aSDidNotLoadPro ; "%s did not load properly\n"
		jmp	loc_40177E
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019DD:				; CODE XREF: sub_4013F0+95j
		call	__getreent
		mov	[esp+8A8h+var_8A0], esi
		mov	[esp+8A8h+var_8A4], offset aCouldnTOpenS ; "Couldn't open %s\n"
		jmp	loc_401842
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019F3:				; CODE XREF: sub_4013F0+6Fj
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+8A8h+var_8A0], 2Ah
		mov	[esp+8A8h+var_8A4], 1
		mov	[esp+8A8h+var_89C], eax
		mov	[esp+8A8h+var_8A8], offset aUsageAnnotateI ; "Usage: annotate imagein.jpg imageout.jp"...
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+8A8h+var_8A0], 21h
		mov	[esp+8A8h+var_8A4], 1
		mov	[esp+8A8h+var_89C], eax
		mov	[esp+8A8h+var_8A8], offset aStandardInputS ; "Standard input should consist of\n"
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+8A8h+var_8A0], 20h
		mov	[esp+8A8h+var_8A4], 1
		mov	[esp+8A8h+var_89C], eax
		mov	[esp+8A8h+var_8A8], offset aLinesInTheFoll ; "lines in the following formats:\n"
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+8A8h+var_8A0], 32h
		mov	[esp+8A8h+var_8A4], 1
		mov	[esp+8A8h+var_89C], eax
		mov	[esp+8A8h+var_8A8], offset aColorRGB0255Ea ; "color r g	b (0-255 each) [a (0-127, 0 i"...
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+8A8h+var_8A0], 0Eh
		mov	[esp+8A8h+var_8A4], 1
		mov	[esp+8A8h+var_89C], eax
		mov	[esp+8A8h+var_8A8], offset aFontFontname ; "font fontname\n"
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+8A8h+var_8A0], 0Fh
		mov	[esp+8A8h+var_8A4], 1
		mov	[esp+8A8h+var_89C], eax
		mov	[esp+8A8h+var_8A8], offset aSizePointsize ; "size pointsize\n"
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+8A8h+var_8A0], 1Ah
		mov	[esp+8A8h+var_8A4], 1
		mov	[esp+8A8h+var_89C], eax
		mov	[esp+8A8h+var_8A8], offset aAlignLeftRight ; "align (left|right|center)\n"
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+8A8h+var_8A0], 9
		mov	[esp+8A8h+var_8A4], 1
		mov	[esp+8A8h+var_89C], eax
		mov	[esp+8A8h+var_8A8], offset aMoveXY ; "move x y\n"
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+8A8h+var_8A0], 19h
		mov	[esp+8A8h+var_8A4], 1
		mov	[esp+8A8h+var_89C], eax
		mov	[esp+8A8h+var_8A8], offset aTextActualOutp ; "text actual-output-text\n\n"
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+8A8h+var_8A0], 44h
		mov	[esp+8A8h+var_8A4], 1
		mov	[esp+8A8h+var_89C], eax
		mov	[esp+8A8h+var_8A8], offset aIfTheFileParis ; "If the file 'paris.ttf' exists in /usr/"...
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+8A8h+var_8A0], 4Bh
		mov	[esp+8A8h+var_8A4], 1
		mov	[esp+8A8h+var_89C], eax
		mov	[esp+8A8h+var_8A8], offset aLocationSpecif ; "location specified in the	GDFONTPATH en"...
		call	fwrite
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+8A8h+var_8A0], 47h
		mov	[esp+8A8h+var_8A4], 1
		mov	[esp+8A8h+var_89C], eax
		mov	[esp+8A8h+var_8A8], offset aSufficient_You ; "sufficient. You may also specify the fu"...
		call	fwrite
		mov	[esp+8A8h+var_8A8], 1
		jmp	loc_4016B8
sub_4013F0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION gdImageDestroy. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION gdImageJpeg. PRESS KEYPAD	"+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION gdImageStringFT. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION gdImageCreateFromJpeg. PRESS KEYPAD "+" TO EXPAND]
		align 10h
aLibgccw32EhSjl	db '-LIBGCCW32-EH-SJLJ-GTHR-CYGWIN',0 ; DATA XREF: .text:00401CF1o
					; sub_401E10+32o
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401C40	proc near		; DATA XREF: sub_401C60+3Do
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, ds:dword_404040
		call	dword ptr [eax+4]
		mov	esp, ebp
		pop	ebp
		retn
sub_401C40	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401C60	proc near		; CODE XREF: .text:00401D7Fp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		cld
		sub	esp, 8
		mov	ecx, 0Ch
		mov	[esp+8+var_8], ebx
		mov	ebx, [ebp+arg_0]
		mov	[esp+8+var_4], edi
		mov	edi, ebx
		rep stosd
		mov	dword ptr [ebx], 30h
		mov	eax, dword_403000
		mov	dword ptr [ebx+24h], 0FFFFFFFFh
		mov	dword ptr [ebx+4], offset abort
		mov	[ebx+14h], eax
		mov	eax, ds:dword_404010
		mov	dword ptr [ebx+8], offset sub_401C40
		mov	edx, dword_403008
		mov	dword ptr [ebx+1Ch], 0
		mov	[ebx+20h], eax
		mov	eax, dword_403004
		mov	[ebx+2Ch], edx
		mov	[ebx+28h], eax
		mov	ebx, [esp+8+var_8]
		mov	edi, [esp+8+var_4]
		mov	esp, ebp
		pop	ebp
		retn
sub_401C60	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_401CD0:				; CODE XREF: .text:00401054j
		push	ebp
		mov	ebp, esp
		sub	esp, 58h
		mov	[ebp-8], esi
		mov	eax, ds:dword_404040
		mov	[ebp-4], edi
		test	eax, eax
		jz	short loc_401CF0

loc_401CE5:				; CODE XREF: .text:00401DC6j
		mov	esi, [ebp-8]
		mov	edi, [ebp-4]
		mov	esp, ebp
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401CF0:				; CODE XREF: .text:00401CE3j
		cld
		mov	esi, offset aLibgccw32EhSjl ; "-LIBGCCW32-EH-SJLJ-GTHR-CYGWIN"
		mov	dword ptr [ebp-48h], 41414141h
		lea	edi, [ebp-28h]
		mov	ecx, 7
		mov	dword ptr [ebp-44h], 41414141h
		mov	dword ptr [ebp-40h], 41414141h
		mov	dword ptr [ebp-3Ch], 41414141h
		mov	dword ptr [ebp-38h], 41414141h
		mov	dword ptr [ebp-34h], 41414141h
		mov	dword ptr [ebp-30h], 41414141h
		mov	dword ptr [ebp-2Ch], 41414141h
		movzx	eax, word ptr ds:aLibgccw32EhSjl+1Ch
		rep movsd
		mov	[edi], ax
		movzx	eax, byte ptr ds:aLibgccw32EhSjl+1Eh
		mov	[edi+2], al
		lea	edi, [ebp-48h]
		mov	[esp], edi
		call	FindAtomA
		movzx	eax, ax
		sub	esp, 4
		test	ax, ax
		jnz	loc_401DF0
		mov	dword ptr [esp], 30h
		call	malloc
		test	eax, eax
		mov	esi, eax
		jz	loc_401DFC
		mov	[esp], eax
		call	sub_401C60
		mov	[esp], esi
		call	sub_401E10
		test	ax, ax
		jz	short loc_401DCB
		mov	dword ptr [esp+8], offset sub_401F10
		mov	dword ptr [esp+4], 0
		mov	dword ptr [esp], 0
		call	pthread_atfork
		lea	esi, [esi+0]

loc_401DB0:				; CODE XREF: .text:00401DFAj
		mov	ds:dword_404040, esi
		lea	eax, [esi+4]
		mov	ds:dword_404030, eax
		lea	eax, [esi+8]
		mov	ds:dword_404050, eax
		jmp	loc_401CE5
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401DCB:				; CODE XREF: .text:00401D8Fj
		mov	[esp], esi
		call	free
		mov	[esp], edi
		call	FindAtomA
		sub	esp, 4
		movzx	eax, ax
		jmp	short loc_401DF0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401DF0:				; CODE XREF: .text:00401D60j
					; .text:00401DE1j
		mov	[esp], eax
		call	sub_401EA0
		mov	esi, eax
		jmp	short loc_401DB0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401DFC:				; CODE XREF: .text:00401D76j
		call	abort
		jmp	short sub_401E10
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401E10	proc near		; CODE XREF: .text:00401D87p
					; .text:00401E01j ...

var_68		= dword	ptr -68h
var_58		= dword	ptr -58h
var_38		= dword	ptr -38h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	eax, 1Fh
		mov	ebp, esp
		push	edi
		mov	edx, 1
		push	esi
		push	ebx
		sub	esp, 5Ch	; lpString
		mov	ebx, [ebp+arg_0]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401E30:				; CODE XREF: sub_401E10+2Fj
		test	edx, ebx
		mov	cl, 41h
		jnz	short loc_401E38
		mov	cl, 61h

loc_401E38:				; CODE XREF: sub_401E10+24j
		mov	[eax+ebp-58h], cl
		add	edx, edx
		dec	eax
		jns	short loc_401E30
		cld
		mov	esi, offset aLibgccw32EhSjl ; "-LIBGCCW32-EH-SJLJ-GTHR-CYGWIN"
		lea	edi, [ebp+var_38]
		movzx	eax, word ptr ds:aLibgccw32EhSjl+1Ch
		mov	ecx, 7
		rep movsd
		mov	[edi], ax
		movzx	eax, byte ptr ds:aLibgccw32EhSjl+1Eh
		mov	[edi+2], al
		lea	eax, [ebp+var_58]
		mov	[esp+68h+var_68], eax
		call	AddAtomA
		movzx	esi, ax
		sub	esp, 4
		test	si, si
		jnz	short loc_401E87

loc_401E7B:				; CODE XREF: sub_401E10+83j
		xor	edx, edx

loc_401E7D:				; CODE XREF: sub_401E10+85j
		lea	esp, [ebp+var_C]
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E87:				; CODE XREF: sub_401E10+69j
		mov	[esp+68h+var_68], esi
		call	sub_401EA0
		cmp	eax, ebx
		mov	edx, esi
		jnz	short loc_401E7B
		jmp	short loc_401E7D
sub_401E10	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401EA0	proc near		; CODE XREF: .text:00401DF3p
					; sub_401E10+7Ap

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_48		= dword	ptr -48h
var_4		= dword	ptr -4
arg_0		= word ptr  8

		push	ebp
		mov	ebp, esp
		lea	edx, [ebp+var_48]
		push	ebx
		sub	esp, 54h	; nAtom
		xor	ebx, ebx
		movzx	eax, [ebp+arg_0]
		mov	[esp+58h+var_50], 3Fh
		mov	[esp+58h+var_54], edx
		mov	[esp+58h+var_58], eax
		call	GetAtomNameA
		sub	esp, 0Ch
		test	eax, eax
		jz	short loc_401EFC
		mov	eax, 1Fh
		mov	edx, 1
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401EE0:				; CODE XREF: sub_401EA0+4Aj
		cmp	byte ptr [eax+ebp-48h],	41h
		jz	short loc_401EF8

loc_401EE7:				; CODE XREF: sub_401EA0+5Aj
		add	edx, edx
		dec	eax
		jns	short loc_401EE0
		cmp	dword ptr [ebx], 30h
		jnz	short loc_401EFC
		mov	eax, ebx
		mov	ebx, [ebp+var_4]
		leave
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401EF8:				; CODE XREF: sub_401EA0+45j
		or	ebx, edx
		jmp	short loc_401EE7
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401EFC:				; CODE XREF: sub_401EA0+29j
					; sub_401EA0+4Fj
		call	abort
		jmp	short sub_401F10
sub_401EA0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401F10	proc near		; CODE XREF: sub_401EA0+61j
					; DATA XREF: .text:00401D91o

var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, ds:dword_404040
		mov	[esp+8+var_8], eax
		call	sub_401E10
		test	ax, ax
		jz	short loc_401F2C
		mov	esp, ebp
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F2C:				; CODE XREF: sub_401F10+16j
		call	abort
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
sub_401F10	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401F40	proc near		; CODE XREF: sub_4013F0+16p
		push	ecx
		mov	ecx, esp
		add	ecx, 8

loc_401F46:				; CODE XREF: sub_401F40+1Bj
		cmp	eax, 1000h
		jb	short loc_401F5D
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		jmp	short loc_401F46
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F5D:				; CODE XREF: sub_401F40+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		jmp	eax
sub_401F40	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401F70	proc near		; CODE XREF: start+3Ap

var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		mov	[esp+18h+var_14], 0
		mov	[esp+18h+var_18], esi
		call	sub_4020D0
		sub	esp, 8
		test	eax, eax
		jz	short loc_401FA3
		mov	[esp+18h+var_18], 0

loc_401F9D:				; CODE XREF: sub_401F70+57j
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)

loc_401FA3:				; CODE XREF: sub_401F70+24j
		sub	esp, 0B0h
		lea	ebx, [esp+0C8h+var_C0]
		mov	[esp+0C8h+var_C0], 0
		mov	[esp+0C8h+var_C4], ebx
		mov	[esp+0C8h+var_C8], esi
		call	sub_4020D0
		sub	esp, 8
		mov	[esp+0C8h+var_C8], ebx
		jmp	short loc_401F9D
sub_401F70	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8
; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fwrite. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION sscanf. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION atoi. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strtok. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fgets. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fclose. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _fopen64.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION exit. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getreent. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fprintf. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strcpy. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pthread_atfork. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION abort. PRESS KEYPAD "+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4020D0	proc near		; CODE XREF: sub_401F70+1Ap
					; sub_401F70+4Cp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		push	ebx
		sub	esp, 4		; lpModuleName
		mov	ebx, [ebp+arg_4]
		test	ebx, ebx
		jz	loc_4021D3

loc_4020E4:				; CODE XREF: sub_4020D0+11Fj
		mov	dword ptr [ebx+4], 0A8h
		xor	ecx, ecx
		mov	edx, 74h
		mov	dword ptr [ebx+8], 3EDh
		test	eax, eax
		mov	dword ptr [ebx+0Ch], 0Ch
		mov	[ebx+80h], ecx
		mov	[ebx+84h], edx
		mov	dword ptr [ebx+2Ch], offset dword_402350
		mov	dword ptr [ebx+30h], offset dword_40235C
		mov	dword ptr [ebx+14h], offset unk_404020
		jz	loc_4021C6
		mov	edx, [ebx+0A4h]
		mov	eax, ds:_impure_ptr
		mov	[eax], edx

loc_402136:				; CODE XREF: sub_4020D0+FEj
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [ebx+48h], offset sub_4022E0
		mov	dword ptr [ebx+4Ch], offset sub_4022D0
		mov	[ebx+28h], eax
		mov	eax, [ebp+0]
		mov	dword ptr [ebx+50h], offset sub_4022C0
		mov	dword ptr [ebx+54h], offset sub_4022B0
		mov	dword ptr [ebx+24h], offset unk_404024
		mov	[ebx], eax
		mov	dword ptr [ebx+18h], offset malloc
		mov	dword ptr [ebx+1Ch], offset free
		mov	dword ptr [ebx+20h], offset loc_4022A0
		mov	dword ptr [ebx+44h], offset loc_402290
		mov	[esp+8+var_8], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	dword ptr [ebx+34h], offset dword_403000
		mov	dword ptr [ebx+38h], offset unk_403010
		mov	dword ptr [ebx+3Ch], offset dword_404000
		mov	dword ptr [ebx+40h], 404080h
		call	sub_402260
		mov	eax, 1

loc_4021BF:				; CODE XREF: sub_4020D0+116j
		mov	ebx, [ebp+var_4]
		leave
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4021C6:				; CODE XREF: sub_4020D0+53j
		mov	eax, ds:_impure_ptr
		mov	[ebx+10h], eax
		jmp	loc_402136
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4021D3:				; CODE XREF: sub_4020D0+Ej
		mov	[esp+8+var_8], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_4021BF
		mov	ebx, edx
		mov	eax, 1
		jmp	loc_4020E4
sub_4020D0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:__imp__fopen64
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402220	proc near		; CODE XREF: sub_402260+1Dp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ebx, [ebp+arg_4]
		cmp	ecx, ebx
		jnb	short loc_402252
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_402240:				; CODE XREF: sub_402220+30j
		mov	eax, [ecx+4]
		mov	edx, esi
		add	edx, eax
		mov	eax, [ecx]
		add	ecx, 8
		add	[edx], eax
		cmp	ecx, ebx
		jb	short loc_402240

loc_402252:				; CODE XREF: sub_402220+10j
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_402220	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402260	proc near		; CODE XREF: sub_4020D0+E5p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+var_10], 400000h
		mov	[esp+18h+var_14], offset dword_404000
		mov	[esp+18h+var_18], offset dword_404000
		call	sub_402220
		mov	esp, ebp
		pop	ebp
		retn
sub_402260	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_402290:				; DATA XREF: sub_4020D0+B0o
		jmp	ds:calloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_4022A0:				; DATA XREF: sub_4020D0+A9o
		jmp	ds:realloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4022B0	proc near		; DATA XREF: sub_4020D0+8Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4022B0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4022C0	proc near		; DATA XREF: sub_4020D0+84o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4022C0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4022D0	proc near		; DATA XREF: sub_4020D0+77o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4022D0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4022E0	proc near		; DATA XREF: sub_4020D0+70o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4022E0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION FindAtomA. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION AddAtomA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetAtomNameA. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
		push	ebp
		mov	ebp, esp
		pop	ebp
		jmp	loc_401050
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8
dword_402350	dd 0FFFFFFFFh, 402340h,	0 ; DATA XREF: sub_4020D0+3Eo
dword_40235C	dd 0FFFFFFFFh, 28h dup(0) ; DATA XREF: sub_4020D0+45o
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 00000010 (	 16.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001800
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 403000h
dword_403000	dd 14h			; DATA XREF: sub_401C60+22r
					; sub_4020D0+C9o
dword_403004	dd 14h			; DATA XREF: sub_401C60+54r
dword_403008	dd 0			; DATA XREF: sub_401C60+44r
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_403010	db    0	;		; DATA XREF: sub_4020D0+D0o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_data		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 00000080 (	128.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 404000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_404000	dd ?			; DATA XREF: start+9r sub_4020D0+D7o ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404010	dd ?			; DATA XREF: sub_401C60+38r
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_404020	db    ?	;		; DATA XREF: sub_4020D0+4Co
		db    ?	;
		db    ?	;
		db    ?	;
unk_404024	db    ?	;		; DATA XREF: sub_4020D0+92o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404030	dd ?			; DATA XREF: .text:00401DB9w
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404040	dd ?			; DATA XREF: sub_401C40+6r
					; .text:00401CD9r ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404050	dd ?			; DATA XREF: .text:00401DC1w
		align 40h
_bss		ends

;
; Imports from cyggd-2
;
; Section 4. (virtual address 00005000)
; Virtual size			: 000003B8 (	952.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001A00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp_gdImageCreateFromJpeg:dword	; DATA XREF: gdImageCreateFromJpegr
		extrn __imp_gdImageDestroy:dword ; DATA	XREF: gdImageDestroyr
		extrn __imp_gdImageJpeg:dword ;	DATA XREF: gdImageJpegr
		extrn __imp_gdImageStringFT:dword ; DATA XREF: gdImageStringFTr


;
; Imports from cygwin1
;
		extrn __imp___getreent:dword ; DATA XREF: __getreentr
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn __imp__fopen64:dword ; DATA XREF:	_fopen64r
					; .text:00402210r
		extrn _impure_ptr:dword	; DATA XREF: sub_4020D0+5Fr
					; sub_4020D0+F6r
; void _imp_abort(void)
		extrn __imp_abort:dword	; DATA XREF: abortr
; int __cdecl _imp_atoi(const char *)
		extrn __imp_atoi:dword	; DATA XREF: atoir
; void *__cdecl	calloc(size_t,size_t)
		extrn calloc:dword	; DATA XREF: .text:00402290r
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_401F70+2Dr
					; .text:00402200r
; void __cdecl _imp_exit(int)
		extrn __imp_exit:dword	; DATA XREF: exitr
		extrn __imp_fclose:dword ; DATA	XREF: fcloser
		extrn __imp_fgets:dword	; DATA XREF: fgetsr
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
; void __cdecl _imp_free(void *)
		extrn __imp_free:dword	; DATA XREF: freer
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
; void *__cdecl	_imp_malloc(size_t)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
		extrn __imp_pthread_atfork:dword ; DATA	XREF: pthread_atforkr
; void *__cdecl	realloc(void *,size_t)
		extrn realloc:dword	; DATA XREF: .text:004022A0r
		extrn __imp_sscanf:dword ; DATA	XREF: sscanfr
; char *__cdecl	_imp_strcpy(char *,const char *)
		extrn __imp_strcpy:dword ; DATA	XREF: strcpyr
; char *__cdecl	_imp_strtok(char *,const char *)
		extrn __imp_strtok:dword ; DATA	XREF: strtokr


;
; Imports from KERNEL32
;
; ATOM __stdcall __imp_AddAtomA(LPCSTR lpString)
		extrn __imp_AddAtomA:dword ; DATA XREF:	AddAtomAr
; ATOM __stdcall __imp_FindAtomA(LPCSTR	lpString)
		extrn __imp_FindAtomA:dword ; DATA XREF: FindAtomAr
; UINT __stdcall __imp_GetAtomNameA(ATOM nAtom,LPSTR lpBuffer,int nSize)
		extrn __imp_GetAtomNameA:dword ; DATA XREF: GetAtomNameAr
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr



		end start
