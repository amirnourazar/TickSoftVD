

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\banner.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00000FC0 (   4032.)
; Section size in file		: 00001000 (   4096.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		and	esp, 0FFFFFFF0h
		mov	eax, ds:dword_404000
		test	eax, eax
		jz	short loc_401013
		int	3		; Trap to Debugger

loc_401013:				; CODE XREF: start+10j
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_401510
		call	sub_401C20
		leave
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401050	proc near		; CODE XREF: sub_401510+433p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_8		= dword	ptr -8

		push	ebp
		mov	ebp, esp
		push	edi
		mov	edi, 1
		push	ebx
		sub	esp, 20h	; int
		mov	[esp+28h+var_28], 0Bh
		call	GetStockObject
		mov	ds:dword_404060, eax
		sub	esp, 4		; hWnd
		mov	[esp+28h+var_28], 0
		call	GetDC
		sub	esp, 4		; HDC
		mov	ebx, eax
		mov	[esp+28h+var_28], eax
		call	CreateCompatibleDC
		mov	ds:dword_404090, eax
		sub	esp, 4		; hWnd
		mov	[esp+28h+var_24], ebx
		mov	ebx, 1
		mov	[esp+28h+var_28], 0
		call	ReleaseDC
		mov	eax, ds:dword_404060
		sub	esp, 8		; HDC
		mov	[esp+28h+var_24], eax
		mov	eax, ds:dword_404090
		mov	[esp+28h+var_28], eax
		call	SelectObject
		sub	esp, 8		; HDC
		mov	eax, offset dword_404020
		mov	[esp+28h+var_24], eax
		mov	eax, ds:dword_404090
		mov	[esp+28h+var_28], eax
		call	GetTextMetricsA
		sub	esp, 8		; int
		xor	eax, eax
		mov	[esp+28h+var_18], eax
		mov	eax, ds:dword_404020
		mov	[esp+28h+var_1C], edi
		mov	edi, offset dword_4040D0
		mov	[esp+28h+var_24], eax
		mov	eax, dword_402000
		mov	[esp+28h+var_20], ebx
		xor	ebx, ebx
		mov	[esp+28h+var_28], eax
		call	CreateBitmap
		mov	ds:dword_404070, eax
		sub	esp, 14h	; HGDIOBJ
		mov	ecx, offset unk_4040B0
		mov	[esp+28h+var_20], ecx
		mov	edx, 18h
		mov	[esp+28h+var_24], edx
		mov	[esp+28h+var_28], eax
		call	GetObjectA
		cld
		xor	eax, eax
		mov	edx, ds:dword_4040B8
		mov	ecx, 0Ah
		sub	esp, 0Ch	; HDC
		rep stosd
		mov	ds:dword_4040D8, edx
		mov	eax, 28h
		mov	ecx, 1
		mov	ds:dword_4040D0, eax
		mov	eax, ds:dword_4040B4
		mov	edi, 1
		mov	ds:word_4040DE,	cx
		mov	ds:dword_4040D4, eax
		add	eax, 1Fh
		and	eax, 0FFFFFFE0h
		mov	ds:word_4040DC,	di
		shr	eax, 3
		imul	eax, edx
		mov	ds:dword_4040E0, ebx
		mov	edx, 2
		mov	ebx, 0FFFFFFh
		mov	ds:dword_4040F0, edx
		mov	[esp+28h+var_28], eax
		mov	ds:dword_4040E4, eax
		call	malloc
		mov	ds:dword_404100, eax
		mov	eax, ds:dword_404070
		mov	[esp+28h+var_24], eax
		mov	eax, ds:dword_404090
		mov	[esp+28h+var_28], eax
		call	SelectObject
		mov	ds:dword_404080, eax
		sub	esp, 8		; int
		mov	[esp+28h+var_28], 0
		call	GetStockObject
		sub	esp, 4		; HDC
		mov	[esp+28h+var_24], eax
		mov	eax, ds:dword_404090
		mov	[esp+28h+var_28], eax
		call	SelectObject
		sub	esp, 8		; int
		mov	[esp+28h+var_28], 6
		call	GetStockObject
		sub	esp, 4		; HDC
		mov	[esp+28h+var_24], eax
		mov	eax, ds:dword_404090
		mov	[esp+28h+var_28], eax
		call	SelectObject
		mov	eax, ds:dword_404090
		sub	esp, 8		; HDC
		xor	edi, edi
		mov	[esp+28h+var_24], edi
		mov	[esp+28h+var_28], eax
		call	SetBkColor
		mov	eax, ds:dword_404090
		sub	esp, 8		; HDC
		mov	[esp+28h+var_24], ebx
		mov	[esp+28h+var_28], eax
		call	SetTextColor
		mov	eax, ds:dword_404090
		sub	esp, 8		; HDC
		mov	ecx, 2
		mov	[esp+28h+var_24], ecx
		mov	[esp+28h+var_28], eax
		call	SetBkMode
		xor	eax, eax
		xor	edx, edx
		sub	esp, 8
		mov	ds:dword_4040A0, eax
		mov	eax, dword_402000
		mov	ds:dword_4040A4, edx
		mov	ds:dword_4040A8, eax
		mov	eax, ds:dword_404020
		mov	ds:dword_4040AC, eax
		lea	esp, [ebp+var_8]
		pop	ebx
		pop	edi
		pop	ebp
		retn
sub_401050	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401280	proc near		; CODE XREF: sub_401510+460p

var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	ebp, esp
		sub	esp, 8		; HDC
		mov	eax, ds:dword_404080
		mov	[esp+8+var_4], eax
		mov	eax, ds:dword_404090
		mov	[esp+8+var_8], eax
		call	SelectObject
		mov	eax, ds:dword_404070
		sub	esp, 8		; HGDIOBJ
		mov	[esp+8+var_8], eax
		call	DeleteObject
		mov	eax, ds:dword_404090
		sub	esp, 4		; HDC
		mov	[esp+8+var_8], eax
		call	DeleteDC
		mov	eax, ds:dword_404100
		sub	esp, 4
		mov	[esp+8+var_8], eax
		call	free
		leave
		retn
sub_401280	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4012D0	proc near		; CODE XREF: sub_401510+444p

var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_15		= byte ptr -15h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 2Ch	; HDC
		mov	ebx, [ebp+arg_0]
		mov	[esp+38h+var_38], ebx
		call	strlen
		mov	[ebp+var_14], eax
		mov	eax, dword_402000
		cdq
		idiv	ds:dword_404038
		cmp	eax, [ebp+var_14]
		jge	short loc_4012FB
		mov	[ebp+var_14], eax

loc_4012FB:				; CODE XREF: sub_4012D0+26j
		mov	eax, ds:dword_4040AC
		xor	edi, edi
		mov	[esp+38h+var_28], eax
		mov	eax, ds:dword_4040A8
		mov	[esp+38h+var_2C], eax
		xor	eax, eax
		mov	[esp+38h+var_30], eax
		xor	eax, eax
		mov	[esp+38h+var_34], eax
		mov	eax, ds:dword_404090
		mov	[esp+38h+var_38], eax
		call	Rectangle
		sub	esp, 14h	; hDC
		mov	eax, 920h
		mov	[esp+38h+var_28], eax
		mov	eax, offset dword_4040A0
		mov	[esp+38h+var_2C], eax
		mov	eax, [ebp+var_14]
		mov	[esp+38h+var_34], ebx
		mov	[esp+38h+var_30], eax
		mov	eax, ds:dword_404090
		mov	[esp+38h+var_38], eax
		call	DrawTextA
		mov	eax, ds:dword_404080
		sub	esp, 14h	; HDC
		mov	[esp+38h+var_34], eax
		mov	eax, ds:dword_404090
		mov	[esp+38h+var_38], eax
		call	SelectObject
		sub	esp, 8		; HDC
		xor	eax, eax
		mov	[esp+38h+var_20], eax
		mov	eax, offset dword_4040D0
		mov	[esp+38h+var_24], eax
		mov	eax, ds:dword_404100
		mov	[esp+38h+var_30], edi
		mov	[esp+38h+var_28], eax
		mov	eax, ds:dword_4040D8
		mov	[esp+38h+var_2C], eax
		mov	eax, ds:dword_404070
		mov	[esp+38h+var_34], eax
		mov	eax, ds:dword_404090
		mov	[esp+38h+var_38], eax
		call	GetDIBits
		mov	eax, ds:dword_404070
		sub	esp, 1Ch	; HDC
		mov	[esp+38h+var_34], eax
		mov	eax, ds:dword_404090
		mov	[esp+38h+var_38], eax
		call	SelectObject
		mov	eax, ds:dword_404020
		sub	esp, 8
		dec	eax
		mov	[ebp+var_10], eax
		cmp	eax, 0FFFFFFFFh
		jz	loc_401496
		lea	esi, [esi+0]

loc_4013E0:				; CODE XREF: sub_4012D0+1C0j
		xor	edx, edx
		mov	eax, ds:dword_4040E4
		mov	esi, [ebp+var_10]
		div	ds:dword_4040D8
		mov	ecx, ds:dword_404038
		mov	ebx, ds:dword_404100
		mov	edi, eax
		mov	eax, [ebp+var_14]
		imul	edi, esi
		xor	esi, esi
		imul	eax, ecx
		add	edi, ebx
		cmp	eax, 0
		jmp	short loc_401464
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401410:				; CODE XREF: sub_4012D0+19Aj
					; sub_4012D0+19Fj
		mov	ebx, eax
		sar	ebx, 3
		movzx	eax, byte ptr [ebx+edi]
		shl	ebx, 3
		mov	[ebp+var_15], al
		call	__getreent
		mov	eax, [eax+8]
		mov	edx, esi
		mov	ecx, 7
		sub	edx, ebx
		sub	ecx, edx
		mov	edx, 20h
		mov	[esp+38h+var_34], eax
		movzx	eax, [ebp+var_15]
		sar	eax, cl
		test	al, 1
		jz	short loc_40144D
		mov	eax, dword_402004
		movsx	edx, byte ptr [eax]

loc_40144D:				; CODE XREF: sub_4012D0+173j
		mov	[esp+38h+var_38], edx
		call	putc
		mov	eax, [ebp+var_14]
		inc	esi
		mov	edx, ds:dword_404038
		imul	eax, edx
		cmp	eax, esi

loc_401464:				; CODE XREF: sub_4012D0+13Ej
		jle	short loc_401471
		test	esi, esi
		mov	eax, esi
		jns	short loc_401410
		lea	eax, [esi+7]
		jmp	short loc_401410
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401471:				; CODE XREF: sub_4012D0+194j
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+38h+var_38], 0Ah
		mov	[esp+38h+var_34], eax
		call	putc
		dec	[ebp+var_10]
		cmp	[ebp+var_10], 0FFFFFFFFh
		jnz	loc_4013E0

loc_401496:				; CODE XREF: sub_4012D0+104j
		lea	esp, [ebp+var_C]
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_4012D0	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4014A0	proc near		; CODE XREF: sub_401510+192p
					; sub_401510+397p ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, eax
		mov	[esp+18h+var_10], edx
		mov	eax, offset unk_403002
		mov	[esp+18h+var_C], eax
		mov	eax, offset aSVersionS ; "%s version %s\n"
		mov	[esp+18h+var_18], ebx
		mov	[esp+18h+var_14], eax
		call	fprintf
		mov	[esp+18h+var_C], ebx
		mov	ecx, 37h
		mov	edx, 1
		mov	[esp+18h+var_10], ecx
		mov	[esp+18h+var_14], edx
		mov	[esp+18h+var_18], offset aPrintsAStringE ; "  Prints a string enlarged as a banner "...
		call	fwrite
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn
sub_4014A0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4014F0	proc near		; CODE XREF: sub_401510+40Bp

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h

		push	ebp
		xor	ecx, ecx
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+var_10], ecx
		mov	[esp+18h+var_14], edx
		mov	[esp+18h+var_18], eax
		call	poptPrintUsage
		leave
		retn
sub_4014F0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401510	proc near		; DATA XREF: start+33o

var_198		= dword	ptr -198h
var_194		= dword	ptr -194h
var_190		= dword	ptr -190h
var_18C		= dword	ptr -18Ch
var_188		= dword	ptr -188h
var_16C		= dword	ptr -16Ch
var_168		= dword	ptr -168h
var_164		= byte ptr -164h
var_160		= dword	ptr -160h
var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_14C		= dword	ptr -14Ch
var_148		= byte ptr -148h
var_144		= dword	ptr -144h
var_140		= dword	ptr -140h
var_13C		= dword	ptr -13Ch
var_138		= dword	ptr -138h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_108		= dword	ptr -108h
var_78		= dword	ptr -78h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	eax, 10h
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 18Ch
		and	esp, 0FFFFFFF0h
		call	sub_401BF0
		call	__main
		lea	ebx, [ebp+var_78]
		xor	eax, eax
		mov	edi, 54h
		mov	[ebp+var_16C], eax
		mov	esi, offset off_402008
		mov	[esp+198h+var_190], edi
		mov	edi, 4
		mov	[esp+198h+var_194], esi
		lea	esi, [ebp+var_108]
		mov	[esp+198h+var_198], ebx
		call	memcpy
		mov	[esp+198h+var_198], esi
		mov	ecx, 8Ch
		mov	edx, offset off_40205C
		mov	[esp+198h+var_190], ecx
		mov	[esp+198h+var_194], edx
		call	memcpy
		mov	[ebp+var_144], edi
		xor	eax, eax
		xor	ecx, ecx
		mov	[ebp+var_168], eax
		mov	eax, 4
		lea	edi, [ebp+var_130]
		mov	[ebp+var_160], eax
		xor	eax, eax
		mov	[ebp+var_158], eax
		mov	eax, offset aGeneralOptions ; "General options"
		mov	[ebp+var_154], eax
		xor	eax, eax
		mov	[ebp+var_150], eax
		xor	eax, eax
		mov	[ebp+var_14C], eax
		mov	eax, [ebp+var_16C]
		mov	[ebp+var_134], ecx
		mov	ecx, 7
		cld
		rep stosd
		mov	[ebp+var_15C], ebx
		mov	edx, [ebp+arg_4]
		mov	ebx, offset aHelpOptions ; "Help options"
		mov	[ebp+var_164], 0
		mov	[ebp+var_148], 0
		mov	[ebp+var_138], ebx
		mov	eax, [edx]
		mov	[ebp+var_140], esi
		xor	esi, esi
		mov	[ebp+var_13C], esi
		mov	[esp+198h+var_198], eax
		call	strdup
		mov	ds:dword_404010, eax
		test	eax, eax
		jz	loc_401A60
		xor	eax, eax
		mov	[esp+198h+var_188], eax
		lea	eax, [ebp+var_168]
		mov	[esp+198h+var_18C], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+198h+var_190], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+198h+var_198], 0
		mov	[esp+198h+var_194], eax
		call	poptGetContext
		mov	edi, eax
		mov	eax, offset aAStringToPrint ; "A string	to print..."
		mov	[esp+198h+var_194], eax
		mov	[esp+198h+var_198], edi
		call	poptSetOtherOptionHelp
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401660:				; CODE XREF: sub_401510+17Bj
					; sub_401510+383j
		mov	[esp+198h+var_198], edi
		call	poptGetNextOpt
		test	eax, eax
		jle	loc_4018CF
		cmp	eax, 75h
		jz	loc_401909
		jg	loc_401890
		cmp	eax, 3Fh
		jz	loc_401998
		cmp	eax, 6Ch
		jnz	short loc_401660
		call	__getreent
		mov	ebx, [eax+0Ch]
		mov	esi, 3Fh
		mov	edx, ds:dword_404010
		mov	eax, ebx
		call	sub_4014A0
		mov	[esp+198h+var_18C], ebx
		mov	eax, 3Eh
		mov	[esp+198h+var_190], eax
		mov	eax, 1
		mov	[esp+198h+var_194], eax
		mov	[esp+198h+var_198], offset aThisProgramIsF ; "This program is free software; you can "...
		call	fwrite
		mov	[esp+198h+var_18C], ebx
		mov	eax, 3Ch
		mov	[esp+198h+var_190], eax
		mov	eax, 1
		mov	[esp+198h+var_194], eax
		mov	[esp+198h+var_198], offset aModifyItUnderT ; "modify it	under the terms	of the GNU Ge"...
		call	fwrite
		mov	[esp+198h+var_18C], ebx
		mov	ecx, 1
		mov	[esp+198h+var_194], ecx
		mov	[esp+198h+var_190], esi
		mov	esi, 1
		mov	[esp+198h+var_198], offset aAsPublishedByT ; "as published by the Free Software	Found"...
		call	fwrite
		mov	[esp+198h+var_18C], ebx
		mov	edx, 37h
		mov	eax, 1
		mov	[esp+198h+var_190], edx
		mov	[esp+198h+var_194], eax
		mov	[esp+198h+var_198], offset aOfTheLicenseOr ; "of the License, or (at your option) any"...
		call	fwrite
		mov	[esp+198h+var_194], ebx
		mov	[esp+198h+var_198], 0Ah
		call	fputc
		mov	[esp+198h+var_18C], ebx
		mov	eax, 40h
		mov	[esp+198h+var_190], eax
		mov	eax, 1
		mov	[esp+198h+var_194], eax
		mov	[esp+198h+var_198], offset aThisProgramIsD ; "This program is distributed in the hope"...
		call	fwrite
		mov	[esp+198h+var_18C], ebx
		mov	eax, 3Fh
		mov	[esp+198h+var_190], eax
		mov	eax, 1
		mov	[esp+198h+var_194], eax
		mov	[esp+198h+var_198], offset aButWithoutAnyW ; "but WITHOUT ANY WARRANTY;	without	even "...
		call	fwrite
		mov	[esp+198h+var_18C], ebx
		mov	eax, 3Eh
		mov	[esp+198h+var_194], esi
		mov	esi, 2Eh
		mov	[esp+198h+var_190], eax
		mov	[esp+198h+var_198], offset aMerchantabilit ; "MERCHANTABILITY or FITNESS FOR A PARTIC"...
		call	fwrite
		mov	[esp+198h+var_18C], ebx
		mov	ecx, 2Dh
		mov	edx, 1
		mov	[esp+198h+var_190], ecx
		mov	[esp+198h+var_194], edx
		mov	[esp+198h+var_198], offset aGnuGeneralPubl ; "GNU General Public License for more det"...
		call	fwrite
		mov	[esp+198h+var_194], ebx
		mov	[esp+198h+var_198], 0Ah
		call	fputc
		mov	[esp+198h+var_18C], ebx
		mov	eax, 42h
		mov	[esp+198h+var_190], eax
		mov	eax, 1
		mov	[esp+198h+var_194], eax
		mov	[esp+198h+var_198], offset aYouShouldHaveR ; "You should have received a copy of the "...
		call	fwrite
		mov	[esp+198h+var_18C], ebx
		mov	eax, 3Ch
		mov	[esp+198h+var_190], eax
		mov	eax, 1
		mov	[esp+198h+var_194], eax
		mov	[esp+198h+var_198], offset aAlongWithThisP ; "along with this program; if not, write "...
		call	fwrite
		mov	[esp+198h+var_18C], ebx
		mov	eax, 4Ch
		mov	[esp+198h+var_190], eax
		mov	eax, 1
		mov	[esp+198h+var_194], eax
		mov	[esp+198h+var_198], offset aFoundationInc_ ; "Foundation, Inc.,	59 Temple Place	- Sui"...
		call	fwrite
		mov	[esp+198h+var_194], ebx
		mov	[esp+198h+var_198], 0Ah
		call	fputc
		mov	[esp+198h+var_18C], ebx
		mov	ebx, 1
		mov	[esp+198h+var_190], esi
		mov	[esp+198h+var_194], ebx
		mov	[esp+198h+var_198], offset aSeeTheCopyingF ; "See the COPYING file for license inform"...
		call	fwrite

loc_40186A:				; CODE XREF: sub_401510+4F3j
		mov	[esp+198h+var_198], edi
		call	poptFreeContext
		mov	eax, ds:dword_404010
		mov	[esp+198h+var_198], eax
		call	free
		mov	eax, [ebp+var_16C]
		lea	esp, [ebp+var_C]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401890:				; CODE XREF: sub_401510+169j
		cmp	eax, 76h
		jnz	loc_401660
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	edx, ds:dword_404010
		call	sub_4014A0
		mov	[esp+198h+var_198], edi
		call	poptFreeContext
		mov	eax, ds:dword_404010
		mov	[esp+198h+var_198], eax
		call	free
		mov	eax, [ebp+var_16C]
		lea	esp, [ebp+var_C]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4018CF:				; CODE XREF: sub_401510+15Aj
		cmp	eax, 0FFFFFFFFh
		jl	loc_401A08
		mov	[esp+198h+var_198], edi
		call	poptGetArgs
		test	eax, eax
		mov	ebx, eax
		jnz	short loc_401943
		call	__getreent
		mov	edx, ds:dword_404010
		mov	ebx, offset aSNotEnoughArgu ; "%s: not enough arguments\n"
		mov	[esp+198h+var_194], ebx
		mov	[esp+198h+var_190], edx
		mov	eax, [eax+0Ch]
		mov	[esp+198h+var_198], eax
		call	fprintf

loc_401909:				; CODE XREF: sub_401510+163j
		call	__getreent
		mov	edx, [eax+0Ch]
		mov	eax, ds:dword_404010
		mov	[esp+198h+var_198], eax
		mov	eax, edi
		call	sub_4014F0

loc_401920:				; CODE XREF: sub_401510+54Bj
		mov	[esp+198h+var_198], edi
		call	poptFreeContext
		mov	eax, ds:dword_404010
		mov	[esp+198h+var_198], eax
		call	free
		mov	eax, [ebp+var_16C]
		lea	esp, [ebp+var_C]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401943:				; CODE XREF: sub_401510+3D4j
		call	sub_401050
		mov	ecx, [ebx]
		test	ecx, ecx
		jz	short loc_401970

loc_40194E:				; CODE XREF: sub_401510+45Ej
		mov	[esp+198h+var_198], ecx
		add	ebx, 4
		call	sub_4012D0
		mov	ecx, [ebx]
		test	ecx, ecx
		setnz	dl
		or	[ebp+var_16C], eax
		setz	al
		movzx	eax, al
		test	edx, eax
		jnz	short loc_40194E

loc_401970:				; CODE XREF: sub_401510+43Cj
		call	sub_401280
		mov	[esp+198h+var_198], edi
		call	poptFreeContext
		mov	eax, ds:dword_404010
		mov	[esp+198h+var_198], eax
		call	free
		mov	eax, [ebp+var_16C]
		lea	esp, [ebp+var_C]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401998:				; CODE XREF: sub_401510+172j
		call	__getreent
		mov	ebx, [eax+0Ch]
		xor	esi, esi
		mov	edx, ds:dword_404010
		mov	eax, ebx
		call	sub_4014A0
		mov	[esp+198h+var_190], esi
		mov	[esp+198h+var_194], ebx
		mov	[esp+198h+var_198], edi
		call	poptPrintHelp
		mov	[esp+198h+var_18C], ebx
		mov	ecx, 3Ch
		mov	edx, 1
		mov	[esp+198h+var_190], ecx
		mov	[esp+198h+var_194], edx
		mov	[esp+198h+var_198], offset aThisVersionWor ; "\nThis version works the same way	as Sys"...
		call	fwrite
		mov	[esp+198h+var_18C], ebx
		mov	eax, 2Bh
		mov	[esp+198h+var_190], eax
		mov	eax, 1
		mov	[esp+198h+var_194], eax
		mov	[esp+198h+var_198], offset aTheBannerTextI ; "The banner text is displayed horizontal"...
		call	fwrite
		jmp	loc_40186A
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A08:				; CODE XREF: sub_401510+3C2j
		mov	[esp+198h+var_198], eax
		call	poptStrerror
		mov	[esp+198h+var_198], edi
		mov	ecx, 1
		mov	esi, eax
		mov	[esp+198h+var_194], ecx
		call	poptBadOption
		mov	ebx, eax
		call	__getreent
		mov	[esp+198h+var_188], esi
		mov	esi, 2
		mov	[esp+198h+var_18C], ebx
		mov	edx, ds:dword_404010
		mov	[esp+198h+var_190], edx
		mov	edx, offset aSBadArgumentSS ; "%s: bad argument	%s: %s\n"
		mov	[esp+198h+var_194], edx
		mov	eax, [eax+0Ch]
		mov	[esp+198h+var_198], eax
		call	fprintf
		mov	[ebp+var_16C], esi
		jmp	loc_401920
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A60:				; CODE XREF: sub_401510+101j
		call	__getreent
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		mov	[esp+198h+var_190], edx
		mov	edx, offset aSMemoryAllocat ; "%s: memory allocation error\n"
		mov	[esp+198h+var_194], edx
		mov	eax, [eax+0Ch]
		mov	[esp+198h+var_198], eax
		call	fprintf
		mov	[esp+198h+var_198], 1
		call	exit
		nop
		nop
sub_401510	endp

; [00000006 BYTES: COLLAPSED FUNCTION GetStockObject. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION CreateCompatibleDC. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION SelectObject. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetTextMetricsA. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION CreateBitmap. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetObjectA. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION SetBkColor. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION SetTextColor. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION SetBkMode. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION DeleteObject. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION DeleteDC.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION Rectangle. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetDIBits. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION poptPrintHelp. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION poptPrintUsage. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION poptFreeContext. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION poptGetArgs. PRESS KEYPAD	"+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION poptStrerror. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION poptBadOption. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION poptGetNextOpt. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION poptSetOtherOptionHelp. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION poptGetContext. PRESS KEYPAD "+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401BF0	proc near		; CODE XREF: sub_401510+14p
		push	ecx
		mov	ecx, esp
		add	ecx, 8

loc_401BF6:				; CODE XREF: sub_401BF0+1Bj
		cmp	eax, 1000h
		jb	short loc_401C0D
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		jmp	short loc_401BF6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C0D:				; CODE XREF: sub_401BF0+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		jmp	eax
sub_401BF0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401C20	proc near		; CODE XREF: start+3Ap

var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_C2		= dword	ptr -0C2h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		mov	[esp+18h+var_14], eax
		mov	[esp+18h+var_18], esi
		call	sub_401D40
		sub	esp, 8
		test	eax, eax
		jz	short loc_401C51
		mov	[esp+18h+var_18], 0

loc_401C4B:				; CODE XREF: sub_401C20+56j
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)

loc_401C51:				; CODE XREF: sub_401C20+22j
		sub	esp, 0C0h
		lea	ebx, [esp+0D8h+var_C2+1]
		and	ebx, 0FFFFFFF0h
		mov	dword ptr [ebx], 0
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	sub_401D40
		sub	esp, 8
		mov	[esp+0D8h+var_D8], ebx
		jmp	short loc_401C4B
sub_401C20	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fputc. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memcpy. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fwrite. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION exit. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fprintf. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strdup. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getreent. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION putc. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strlen. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS KEYPAD "+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401D40	proc near		; CODE XREF: sub_401C20+18p
					; sub_401C20+4Bp

var_18		= dword	ptr -18h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h	; lpModuleName
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_0]
		test	ebx, ebx
		jz	loc_401E2A
		mov	dword ptr [ebx+4], 0A8h
		xor	eax, eax
		mov	ecx, 96h
		mov	dword ptr [ebx+8], 3EDh
		mov	dword ptr [ebx+0Ch], 13h
		mov	[ebx+80h], eax
		mov	[ebx+84h], ecx
		mov	dword ptr [ebx+2Ch], offset dword_401FB0
		mov	dword ptr [ebx+30h], offset dword_401FB8
		mov	dword ptr [ebx+14h], offset unk_404114
		mov	eax, ds:_impure_ptr
		mov	[ebx+10h], eax

loc_401D9B:				; CODE XREF: sub_401D40+14Bj
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+0]
		mov	[ebx+28h], esi
		mov	dword ptr [ebx+48h], offset sub_401F50
		mov	dword ptr [ebx+4Ch], offset sub_401F40
		mov	dword ptr [ebx+50h], offset sub_401F30
		mov	dword ptr [ebx+54h], offset sub_401F20
		mov	dword ptr [ebx+24h], offset unk_404110
		mov	[ebx], eax
		mov	dword ptr [ebx+18h], offset malloc
		mov	dword ptr [ebx+1Ch], offset free
		mov	dword ptr [ebx+20h], offset loc_401F10
		mov	dword ptr [ebx+44h], offset loc_401F00
		mov	[esp+18h+var_18], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	dword ptr [ebx+34h], offset dword_402000
		mov	dword ptr [ebx+38h], offset unk_4020F0
		mov	dword ptr [ebx+3Ch], offset dword_404000
		mov	dword ptr [ebx+40h], 404140h
		call	sub_401ED0
		mov	eax, 1

loc_401E21:				; CODE XREF: sub_401D40+FDj
		lea	esp, [ebp+var_8]
		pop	ebx
		pop	esi
		pop	ebp
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E2A:				; CODE XREF: sub_401D40+10j
		mov	[esp+18h+var_18], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_401E21
		mov	dword ptr [edx+4], 0A8h
		mov	ebx, edx
		mov	eax, 96h
		mov	dword ptr [edx+8], 3EDh
		mov	dword ptr [edx+0Ch], 13h
		xor	edx, edx
		mov	[ebx+80h], edx
		mov	edx, [ebx+0A4h]
		mov	[ebx+84h], eax
		mov	dword ptr [ebx+2Ch], offset dword_401FB0
		mov	dword ptr [ebx+30h], offset dword_401FB8
		mov	dword ptr [ebx+14h], offset unk_404114
		mov	eax, ds:_impure_ptr
		mov	[eax], edx
		jmp	loc_401D9B
sub_401D40	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401EA0	proc near		; CODE XREF: sub_401ED0+1Fp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ebx, [ebp+arg_4]
		jmp	short loc_401EBC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401EB0:				; CODE XREF: sub_401EA0+1Ej
		mov	edx, [ecx+4]
		mov	eax, [ecx]
		add	ecx, 8
		add	edx, esi
		add	[edx], eax

loc_401EBC:				; CODE XREF: sub_401EA0+Ej
		cmp	ecx, ebx
		jb	short loc_401EB0
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_401EA0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401ED0	proc near		; CODE XREF: sub_401D40+D7p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	edx, 400000h
		mov	ebp, esp
		mov	eax, offset unk_403500
		sub	esp, 0Ch
		mov	[esp+0Ch+var_4], edx
		mov	[esp+0Ch+var_8], eax
		mov	[esp+0Ch+var_C], offset	unk_403500
		call	sub_401EA0
		leave
		retn
sub_401ED0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401F00:				; DATA XREF: sub_401D40+A2o
		jmp	ds:calloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401F10:				; DATA XREF: sub_401D40+9Bo
		jmp	ds:realloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401F20	proc near		; DATA XREF: sub_401D40+7Do
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401F20	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401F30	proc near		; DATA XREF: sub_401D40+76o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401F30	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401F40	proc near		; DATA XREF: sub_401D40+6Fo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401F40	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401F50	proc near		; DATA XREF: sub_401D40+68o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401F50	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetDC. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION ReleaseDC. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION DrawTextA. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
dword_401FB0	dd 0FFFFFFFFh, 0	; DATA XREF: sub_401D40+3Eo
					; sub_401D40+12Fo
dword_401FB8	dd 0FFFFFFFFh, 11h dup(0) ; DATA XREF: sub_401D40+45o
					; sub_401D40+136o
_text		ends

; Section 2. (virtual address 00002000)
; Virtual size			: 000000F0 (	240.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001400
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 402000h
dword_402000	dd 50h			; DATA XREF: sub_401050+A4r
					; sub_401050+202r ...
dword_402004	dd 403000h		; DATA XREF: sub_4012D0+175r
off_402008	dd offset aChar		; DATA XREF: sub_401510+2Eo
					; "char"
		db  63h	; c
		db    0	;
		db    0	;
		db    0	;
		db    1	;
		db    0	;
		db    0	;
		db    0	;
		db    4	;
		db  20h	;
		db  40h	; @
		db    0	;
		db  63h	; c
		db    0	;
		db    0	;
		db    0	;
		db  55h	; U
		db  30h	; 0
		db  40h	; @
		db    0	;
		db    0	;
		db  30h	; 0
		db  40h	; @
		db    0	;
		db  67h	; g
		db  30h	; 0
		db  40h	; @
		db    0	;
		db  77h	; w
		db    0	;
		db    0	;
		db    0	;
		db    2	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  20h	;
		db  40h	; @
		db    0	;
		db  77h	; w
		db    0	;
		db    0	;
		db    0	;
		db  6Dh	; m
		db  30h	; 0
		db  40h	; @
		db    0	;
		db  88h	; 
		db  30h	; 0
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
off_40205C	dd offset aHelp		; DATA XREF: sub_401510+56o
					; "help"
		db  3Fh	; ?
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  3Fh	; ?
		db    0	;
		db    0	;
		db    0	;
		db  90h	; 
		db  30h	; 0
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db 0A7h	; §
		db  30h	; 0
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  75h	; u
		db    0	;
		db    0	;
		db    0	;
		db 0ADh	; ­
		db  30h	; 0
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db 0C9h	; É
		db  30h	; 0
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  76h	; v
		db    0	;
		db    0	;
		db    0	;
		db 0D1h	; Ñ
		db  30h	; 0
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db 0EDh	; í
		db  30h	; 0
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  6Ch	; l
		db    0	;
		db    0	;
		db    0	;
		db 0F5h	; õ
		db  30h	; 0
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_4020F0	db    0	;		; DATA XREF: sub_401D40+C2o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_data		ends

; Section 3. (virtual address 00003000)
; Virtual size			: 00000500 (   1280.)
; Section size in file		: 00000600 (   1536.)
; Offset to raw	data for section: 00001600
; Flags	40000040: Data Readable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 403000h
		db  58h	; X
		db    0	;
unk_403002	db  31h	; 1		; DATA XREF: sub_4014A0+Do
		db  2Eh	; .
		db  30h	; 0
		db    0	;
aSVersionS	db '%s version %s',0Ah,0 ; DATA XREF: sub_4014A0+16o
		align 4
aPrintsAStringE	db '  Prints a string enlarged as a banner on the screen.',0Ah
					; DATA XREF: sub_4014A0+3Do
		db 0Ah,0
aChar		db 'char',0             ; DATA XREF: .data:00402008o
aUseCharacterX	db 'use character <X>',0
aWidth		db 'width',0
aSetDisplayWidt	db 'set display width to <80> ',0
a80		db '80',0
aHelp		db 'help',0             ; DATA XREF: .data:0040205Co
aShowThisHelpMe	db 'Show this help message',0
aUsage		db 'usage',0
aDisplayBriefUs	db 'Display brief usage message',0
aVersion	db 'version',0
aDisplayVersion	db 'Display version information',0
aLicense	db 'license',0
aDisplayLicensi	db 'Display licensing information',0
aGeneralOptions	db 'General options',0  ; DATA XREF: sub_401510+91o
aHelpOptions	db 'Help options',0     ; DATA XREF: sub_401510+C9o
aAStringToPrint	db 'A string to print...',0 ; DATA XREF: sub_401510+133o
		align 4
aThisProgramIsF	db 'This program is free software; you can redistribute it and/o'
					; DATA XREF: sub_401510+1ADo
		db 'r',0Ah,0
		align 4
aModifyItUnderT	db 'modify it under the terms of the GNU General Public License',0Ah
					; DATA XREF: sub_401510+1CFo
		db 0
		align 4
aAsPublishedByT	db 'as published by the Free Software Foundation; either version'
					; DATA XREF: sub_401510+1F1o
		db ' 2',0Ah,0
aOfTheLicenseOr	db 'of the License, or (at your option) any later version.',0Ah,0
					; DATA XREF: sub_401510+213o
aThisProgramIsD	db 'This program is distributed in the hope that it will be usef'
					; DATA XREF: sub_401510+245o
		db 'ul,',0Ah,0
		align 4
aButWithoutAnyW	db 'but WITHOUT ANY WARRANTY; without even the implied warranty '
					; DATA XREF: sub_401510+267o
		db 'of',0Ah,0
aMerchantabilit	db 'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See th'
					; DATA XREF: sub_401510+289o
		db 'e',0Ah,0
		align 4
aGnuGeneralPubl	db 'GNU General Public License for more details.',0Ah,0
					; DATA XREF: sub_401510+2ABo
		align 4
aYouShouldHaveR	db 'You should have received a copy of the GNU General Public Li'
					; DATA XREF: sub_401510+2DDo
		db 'cense',0Ah,0
		align 4
aAlongWithThisP	db 'along with this program; if not, write to the Free Software',0Ah
					; DATA XREF: sub_401510+2FFo
		db 0
		align 4
aFoundationInc_	db 'Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  0'
					; DATA XREF: sub_401510+321o
		db '2111-1307, USA.',0Ah,0
		align 4
aSeeTheCopyingF	db 'See the COPYING file for license information.',0Ah,0
					; DATA XREF: sub_401510+34Eo
aSNotEnoughArgu	db '%s: not enough arguments',0Ah,0 ; DATA XREF: sub_401510+3E1o
		align 4
aThisVersionWor	db 0Ah			; DATA XREF: sub_401510+4C5o
		db 'This version works the same way as System V',27h,'S banner d'
		db 'oes:',0Ah,0
		align 4
aTheBannerTextI	db 'The banner text is displayed horizontally.',0Ah,0
					; DATA XREF: sub_401510+4E7o
aSBadArgumentSS	db '%s: bad argument %s: %s',0Ah,0 ; DATA XREF: sub_401510+531o
aSMemoryAllocat	db '%s: memory allocation error',0Ah,0 ; DATA XREF: sub_401510+55Eo
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_403500	db    0	;		; DATA XREF: sub_401ED0+8o
					; sub_401ED0+18o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_rdata		ends

; Section 4. (virtual address 00004000)
; Virtual size			: 00000140 (	320.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 404000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_404000	dd ?			; DATA XREF: start+9r sub_401D40+C9o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404010	dd ?			; DATA XREF: sub_401510+FAw
					; sub_401510+18Ar ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404020	dd ?			; DATA XREF: sub_401050+73o
					; sub_401050+92r ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404038	dd ?			; DATA XREF: sub_4012D0+1Dr
					; sub_4012D0+120r ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404060	dd ?			; DATA XREF: sub_401050+19w
					; sub_401050+57r
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404070	dd ?			; DATA XREF: sub_401050+B7w
					; sub_401050+152r ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404080	dd ?			; DATA XREF: sub_401050+168w
					; sub_401280+6r ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404090	dd ?			; DATA XREF: sub_401050+3Aw
					; sub_401050+63r ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_4040A0	dd ?			; DATA XREF: sub_401050+1FDw
					; sub_4012D0+64o
dword_4040A4	dd ?			; DATA XREF: sub_401050+207w
dword_4040A8	dd ?			; DATA XREF: sub_401050+20Dw
					; sub_4012D0+36r
dword_4040AC	dd ?			; DATA XREF: sub_401050+217w
					; sub_4012D0+2Br
unk_4040B0	db    ?	;		; DATA XREF: sub_401050+BFo
		db    ?	;
		db    ?	;
		db    ?	;
dword_4040B4	dd ?			; DATA XREF: sub_401050+101r
dword_4040B8	dd ?			; DATA XREF: sub_401050+DCr
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_4040D0	dd ?			; DATA XREF: sub_401050+9Bo
					; sub_401050+FCw ...
dword_4040D4	dd ?			; DATA XREF: sub_401050+112w
dword_4040D8	dd ?			; DATA XREF: sub_401050+ECw
					; sub_4012D0+BDr ...
word_4040DC	dw ?			; DATA XREF: sub_401050+11Dw
word_4040DE	dw ?			; DATA XREF: sub_401050+10Bw
dword_4040E0	dd ?			; DATA XREF: sub_401050+12Aw
dword_4040E4	dd ?			; DATA XREF: sub_401050+143w
					; sub_4012D0+112r
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_4040F0	dd ?			; DATA XREF: sub_401050+13Aw
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404100	dd ?			; DATA XREF: sub_401050+14Dw
					; sub_401280+3Cr ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_404110	db    ?	;		; DATA XREF: sub_401D40+84o
		db    ?	;
		db    ?	;
		db    ?	;
unk_404114	db    ?	;		; DATA XREF: sub_401D40+4Co
					; sub_401D40+13Do
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
_bss		ends

;
; Imports from cygwin1
;
; Section 5. (virtual address 00005000)
; Virtual size			: 0000059C (   1436.)
; Section size in file		: 00000600 (   1536.)
; Offset to raw	data for section: 00001C00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp___getreent:dword ; DATA XREF: __getreentr
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn _impure_ptr:dword	; DATA XREF: sub_401D40+53r
					; sub_401D40+144r
; void *__cdecl	calloc(size_t,size_t)
		extrn calloc:dword	; DATA XREF: .text:00401F00r
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_401C20+2Br
					; .text:00401E90r
; void __cdecl _imp_exit(int)
		extrn __imp_exit:dword	; DATA XREF: exitr
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
		extrn __imp_fputc:dword	; DATA XREF: fputcr
; void __cdecl _imp_free(void *)
		extrn __imp_free:dword	; DATA XREF: freer
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
; void *__cdecl	_imp_malloc(size_t)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; void *__cdecl	_imp_memcpy(void *,const void *,size_t)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
		extrn __imp_putc:dword	; DATA XREF: putcr
; void *__cdecl	realloc(void *,size_t)
		extrn realloc:dword	; DATA XREF: .text:00401F10r
; char *__cdecl	_imp_strdup(const char *)
		extrn __imp_strdup:dword ; DATA	XREF: strdupr
; size_t __cdecl _imp_strlen(const char	*)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr


;
; Imports from cygpopt-0
;
		extrn __imp_poptBadOption:dword	; DATA XREF: poptBadOptionr
		extrn __imp_poptFreeContext:dword ; DATA XREF: poptFreeContextr
		extrn __imp_poptGetArgs:dword ;	DATA XREF: poptGetArgsr
		extrn __imp_poptGetContext:dword ; DATA	XREF: poptGetContextr
		extrn __imp_poptGetNextOpt:dword ; DATA	XREF: poptGetNextOptr
		extrn __imp_poptPrintHelp:dword	; DATA XREF: poptPrintHelpr
		extrn __imp_poptPrintUsage:dword ; DATA	XREF: poptPrintUsager
		extrn __imp_poptSetOtherOptionHelp:dword
					; DATA XREF: poptSetOtherOptionHelpr
		extrn __imp_poptStrerror:dword ; DATA XREF: poptStrerrorr


;
; Imports from GDI32
;
; HBITMAP __stdcall __imp_CreateBitmap(int,int,UINT,UINT,const void *)
		extrn __imp_CreateBitmap:dword ; DATA XREF: CreateBitmapr
; HDC __stdcall	__imp_CreateCompatibleDC(HDC)
		extrn __imp_CreateCompatibleDC:dword ; DATA XREF: CreateCompatibleDCr
; BOOL __stdcall __imp_DeleteDC(HDC)
		extrn __imp_DeleteDC:dword ; DATA XREF:	DeleteDCr
; BOOL __stdcall __imp_DeleteObject(HGDIOBJ)
		extrn __imp_DeleteObject:dword ; DATA XREF: DeleteObjectr
; int __stdcall	__imp_GetDIBits(HDC,HBITMAP,UINT,UINT,LPVOID,LPBITMAPINFO,UINT)
		extrn __imp_GetDIBits:dword ; DATA XREF: GetDIBitsr
; int __stdcall	__imp_GetObjectA(HGDIOBJ,int,LPVOID)
		extrn __imp_GetObjectA:dword ; DATA XREF: GetObjectAr
; HGDIOBJ __stdcall __imp_GetStockObject(int)
		extrn __imp_GetStockObject:dword ; DATA	XREF: GetStockObjectr
; BOOL __stdcall __imp_GetTextMetricsA(HDC,LPTEXTMETRICA)
		extrn __imp_GetTextMetricsA:dword ; DATA XREF: GetTextMetricsAr
; BOOL __stdcall __imp_Rectangle(HDC,int,int,int,int)
		extrn __imp_Rectangle:dword ; DATA XREF: Rectangler
; HGDIOBJ __stdcall __imp_SelectObject(HDC,HGDIOBJ)
		extrn __imp_SelectObject:dword ; DATA XREF: SelectObjectr
; COLORREF __stdcall __imp_SetBkColor(HDC,COLORREF)
		extrn __imp_SetBkColor:dword ; DATA XREF: SetBkColorr
; int __stdcall	__imp_SetBkMode(HDC,int)
		extrn __imp_SetBkMode:dword ; DATA XREF: SetBkModer
; COLORREF __stdcall __imp_SetTextColor(HDC,COLORREF)
		extrn __imp_SetTextColor:dword ; DATA XREF: SetTextColorr


;
; Imports from KERNEL32
;
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr


;
; Imports from USER32
;
; int __stdcall	__imp_DrawTextA(HDC hDC,LPCSTR lpString,int nCount,LPRECT lpRect,UINT uFormat)
		extrn __imp_DrawTextA:dword ; DATA XREF: DrawTextAr
; HDC __stdcall	__imp_GetDC(HWND hWnd)
		extrn __imp_GetDC:dword	; DATA XREF: GetDCr
; int __stdcall	__imp_ReleaseDC(HWND hWnd,HDC hDC)
		extrn __imp_ReleaseDC:dword ; DATA XREF: ReleaseDCr



		end start
