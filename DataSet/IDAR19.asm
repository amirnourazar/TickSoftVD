

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\gifovly.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00001510 (   5392.)
; Section size in file		: 00001600 (   5632.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		and	esp, 0FFFFFFF0h
		mov	eax, ds:dword_405000
		test	eax, eax
		jz	short loc_401013
		int	3		; Trap to Debugger

loc_401013:				; CODE XREF: start+10j
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_401050
		call	sub_4021D0
		leave
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401050	proc near		; DATA XREF: start+33o

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	eax, 10h
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		and	esp, 0FFFFFFF0h
		call	sub_4021A0
		call	__main
		mov	[ebp+var_18], 0
		lea	eax, [ebp+var_10]
		mov	[esp+58h+var_44], eax
		lea	eax, [ebp+var_14]
		mov	[esp+58h+var_48], eax
		lea	eax, [ebp+var_18]
		mov	[esp+58h+var_4C], eax
		mov	eax, dword_403004
		mov	[ebp+var_14], 0
		mov	[ebp+var_10], 0
		mov	[esp+58h+var_50], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+58h+var_54], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+58h+var_58], eax
		call	sub_4019E0
		test	eax, eax
		jnz	loc_40127E
		mov	esi, [ebp+var_10]
		test	esi, esi
		jnz	loc_40124B
		mov	[esp+58h+var_58], 0
		call	DGifOpenFileHandle
		mov	[ebp+var_20], eax
		test	eax, eax
		jz	short loc_4010E2
		mov	[esp+58h+var_58], eax
		call	DGifSlurp
		test	eax, eax
		jnz	short loc_4010F3

loc_4010E2:				; CODE XREF: sub_401050+84j
					; sub_401050+B4j
		call	PrintGifError

loc_4010E7:				; CODE XREF: sub_401050+243j
		mov	[esp+58h+var_58], 1
		call	exit

loc_4010F3:				; CODE XREF: sub_401050+90j
		mov	[esp+58h+var_58], 1
		call	EGifOpenFileHandle
		mov	[ebp+var_24], eax
		test	eax, eax
		jz	short loc_4010E2
		mov	edx, [ebp+var_20]
		mov	ecx, [ebp+var_24]
		mov	eax, [edx]
		mov	[ecx], eax
		mov	eax, [edx+4]
		mov	[ecx+4], eax
		mov	eax, [edx+8]
		mov	[ecx+8], eax
		mov	eax, [edx+0Ch]
		mov	[ecx+0Ch], eax
		mov	eax, [edx+10h]
		mov	eax, [eax+8]
		mov	[esp+58h+var_54], eax
		mov	eax, [edx+10h]
		mov	eax, [eax]
		mov	[esp+58h+var_58], eax
		call	MakeMapObject
		mov	edx, [ebp+var_24]
		mov	ecx, [ebp+var_20]
		mov	[edx+10h], eax
		mov	eax, [ecx+30h]
		mov	[esp+58h+var_58], edx
		mov	[esp+58h+var_54], eax
		call	MakeSavedImage
		mov	[ebp+var_1C], 1
		mov	ecx, [ebp+var_20]
		mov	eax, [ebp+var_24]
		mov	edx, [ecx+14h]
		mov	eax, [eax+30h]
		cmp	edx, 1
		mov	[ebp+var_28], eax
		jle	loc_40121C
		mov	[ebp+var_34], 28h

loc_401177:				; CODE XREF: sub_401050+1C6j
		mov	[ebp+var_2C], 0
		mov	eax, [ebp+var_20]
		mov	ecx, [ebp+var_34]
		mov	ebx, [eax+30h]
		add	ecx, ebx
		mov	eax, [ecx+0Ch]
		mov	[ebp+var_30], ecx
		cmp	eax, 0
		jle	short loc_40120C
		mov	esi, [ecx+8]
		mov	esi, esi
		lea	edi, [edi+0]

loc_4011A0:				; CODE XREF: sub_401050+1B4j
		mov	edx, [ebp+var_30]
		mov	ebx, [ebp+var_2C]
		mov	ecx, [edx+4]
		add	ebx, ecx
		mov	ecx, [ebp+var_28]
		mov	edi, [ecx+8]
		imul	ebx, edi
		mov	edi, [ecx+18h]
		mov	ecx, [edx+18h]
		add	ebx, edi
		mov	edi, [edx]
		add	ebx, edi
		mov	edi, [ebp+var_2C]
		imul	edi, esi
		add	edi, ecx
		xor	ecx, ecx
		cmp	esi, 0
		jg	short loc_4011EB
		jmp	short loc_4011FE
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4011D1:				; CODE XREF: sub_401050+1A0j
		movzx	edx, byte ptr [edi+ecx]
		movzx	eax, dl
		cmp	eax, [ebp+var_14]
		jz	short loc_4011E6

loc_4011DD:				; CODE XREF: sub_401050+1A6j
		mov	[ebx+ecx], dl
		mov	eax, [ebp+var_30]
		mov	esi, [eax+8]

loc_4011E6:				; CODE XREF: sub_401050+18Bj
		inc	ecx
		cmp	esi, ecx
		jle	short loc_4011F8

loc_4011EB:				; CODE XREF: sub_401050+17Dj
		mov	eax, [ebp+var_18]
		test	eax, eax
		jnz	short loc_4011D1
		movzx	edx, byte ptr [edi+ecx]
		jmp	short loc_4011DD
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4011F8:				; CODE XREF: sub_401050+199j
		mov	edx, [ebp+var_30]
		mov	eax, [edx+0Ch]

loc_4011FE:				; CODE XREF: sub_401050+17Fj
		inc	[ebp+var_2C]
		cmp	eax, [ebp+var_2C]
		jg	short loc_4011A0
		mov	ecx, [ebp+var_20]
		mov	edx, [ecx+14h]

loc_40120C:				; CODE XREF: sub_401050+142j
		inc	[ebp+var_1C]
		add	[ebp+var_34], 28h
		cmp	edx, [ebp+var_1C]
		jg	loc_401177

loc_40121C:				; CODE XREF: sub_401050+11Aj
		mov	eax, [ebp+var_24]
		mov	[esp+58h+var_58], eax
		call	EGifSpew
		test	eax, eax
		jnz	short loc_40123A

loc_40122B:				; CODE XREF: sub_401050+1F9j
		call	PrintGifError

loc_401230:				; CODE XREF: sub_401050+1F7j
		lea	esp, [ebp+var_C]
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40123A:				; CODE XREF: sub_401050+1D9j
		mov	edx, [ebp+var_20]
		mov	[esp+58h+var_58], edx
		call	DGifCloseFile
		test	eax, eax
		jnz	short loc_401230
		jmp	short loc_40122B
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40124B:				; CODE XREF: sub_401050+6Dj
		call	__getreent
		mov	edx, dword_403000
		mov	[esp+58h+var_54], edx
		mov	eax, [eax+0Ch]
		mov	[esp+58h+var_58], eax
		call	fprintf
		mov	eax, dword_403004
		mov	[esp+58h+var_58], eax
		call	sub_401520
		mov	[esp+58h+var_58], 0
		call	exit

loc_40127E:				; CODE XREF: sub_401050+62j
		mov	[esp+58h+var_58], eax
		call	sub_401390
		mov	eax, dword_403004
		mov	[esp+58h+var_58], eax
		call	sub_401520
		jmp	loc_4010E7
sub_401050	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION DGifCloseFile. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EGifSpew.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION MakeSavedImage. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION MakeMapObject. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION PrintGifError. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION EGifOpenFileHandle. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION DGifSlurp. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION DGifOpenFileHandle. PRESS	KEYPAD "+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401320	proc near		; CODE XREF: sub_4019E0+130p
					; sub_4019E0+1FAp

arg_0		= dword	ptr  8

		push	ebp
		xor	ecx, ecx
		mov	ebp, esp
		push	edi
		mov	edi, edx
		cmp	ecx, edi
		push	esi
		mov	esi, [ebp+arg_0]
		push	ebx
		mov	ebx, eax
		mov	dword ptr [esi], 0
		jge	short loc_401362
		lea	esi, [esi+0]

loc_401340:				; CODE XREF: sub_401320+40j
		movzx	eax, byte ptr [ebx+ecx]
		cmp	al, 25h
		setz	dl
		cmp	al, 21h
		setz	al
		or	eax, edx
		test	al, 1
		jz	short loc_40135D
		cmp	byte ptr [ebx+ecx+1], 2Ah
		jz	short loc_401367
		inc	dword ptr [esi]

loc_40135D:				; CODE XREF: sub_401320+32j
		inc	ecx

loc_40135E:				; CODE XREF: sub_401320+4Bj
		cmp	ecx, edi
		jl	short loc_401340

loc_401362:				; CODE XREF: sub_401320+17j
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401367:				; CODE XREF: sub_401320+39j
		add	dword ptr [esi], 2
		inc	ecx
		jmp	short loc_40135E
sub_401320	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401370	proc near		; CODE XREF: sub_4019E0+167p
					; sub_4019E0+42Fp ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	ebx
		mov	ebx, eax
		jmp	short loc_401387
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_401380:				; CODE XREF: sub_401370+1Bj
		movzx	eax, byte ptr [edx]
		inc	edx
		mov	[ebx], al
		inc	ebx

loc_401387:				; CODE XREF: sub_401370+9j
		dec	ecx
		cmp	ecx, 0FFFFFFFFh
		jnz	short loc_401380
		pop	ebx
		pop	ebp
		retn
sub_401370	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401390	proc near		; CODE XREF: sub_401050+231p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_0]
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], offset aErrorInCommand ; "Error in command line parsing - "
		mov	[esp+18h+var_C], eax
		mov	eax, 20h
		mov	[esp+18h+var_10], eax
		mov	eax, 1
		mov	[esp+18h+var_14], eax
		call	fwrite
		cmp	ebx, 5		; switch 6 cases
		ja	short loc_401400 ; default
		jmp	ds:off_404138[ebx*4] ; switch jump

loc_4013D0:				; DATA XREF: .rdata:00404138o
		call	__getreent	; case 0x0
		mov	eax, [eax+0Ch]
		mov	ebx, 1
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], offset aUndefinedError ; "Undefined error"
		mov	[esp+18h+var_C], eax
		mov	eax, 0Fh
		mov	[esp+18h+var_10], eax
		call	fwrite
		lea	esi, [esi+0]

loc_401400:				; CODE XREF: sub_401390+37j
					; sub_401390+C3j ...
		call	__getreent	; default
		mov	edx, ds:dword_405020
		mov	[esp+18h+var_10], edx
		mov	edx, offset aS_	; " - '%s'.\n"
		mov	[esp+18h+var_14], edx
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], eax
		call	fprintf
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401429:				; CODE XREF: sub_401390+39j
					; DATA XREF: .rdata:00404138o
		call	__getreent	; case 0x5
		mov	eax, [eax+0Ch]
		mov	ebx, 0Fh
		mov	ecx, 1
		mov	[esp+18h+var_10], ebx
		mov	[esp+18h+var_14], ecx
		mov	[esp+18h+var_C], eax
		mov	[esp+18h+var_18], offset aFailToSatisfy	; "Fail	to satisfy"
		call	fwrite
		jmp	short loc_401400 ; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401455:				; CODE XREF: sub_401390+39j
					; DATA XREF: .rdata:00404138o
		call	__getreent	; case 0x1
		mov	eax, [eax+0Ch]
		mov	ecx, 11h
		mov	edx, 1
		mov	[esp+18h+var_10], ecx
		mov	[esp+18h+var_14], edx
		mov	[esp+18h+var_C], eax
		mov	[esp+18h+var_18], offset aNoneOptionFoun ; "None option	Found"
		call	fwrite
		jmp	loc_401400	; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401484:				; CODE XREF: sub_401390+39j
					; DATA XREF: .rdata:00404138o
		call	__getreent	; case 0x2
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], offset aUndefinedOptio ; "Undefined option Found"
		mov	[esp+18h+var_C], eax
		mov	eax, 16h
		mov	[esp+18h+var_10], eax
		mov	eax, 1
		mov	[esp+18h+var_14], eax
		call	fwrite
		jmp	loc_401400	; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4014B3:				; CODE XREF: sub_401390+39j
					; DATA XREF: .rdata:00404138o
		call	__getreent	; case 0x3
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], offset aEmptyInputFor? ; "Empty input	for '!*?' seq."
		mov	[esp+18h+var_C], eax
		mov	eax, 1Ah
		mov	[esp+18h+var_10], eax
		mov	eax, 1
		mov	[esp+18h+var_14], eax
		call	fwrite
		jmp	loc_401400	; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4014E2:				; CODE XREF: sub_401390+39j
					; DATA XREF: .rdata:00404138o
		call	__getreent	; case 0x4
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], offset aFailedOnReadin ; "Failed on reading number"
		mov	[esp+18h+var_C], eax
		mov	eax, 18h
		mov	[esp+18h+var_10], eax
		mov	eax, 1
		mov	[esp+18h+var_14], eax
		call	fwrite
		jmp	loc_401400	; default
sub_401390	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		jmp	short sub_401520
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401520	proc near		; CODE XREF: sub_401050+21Dp
					; sub_401050+23Ep ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		xor	esi, esi
		push	ebx
		sub	esp, 1Ch
		mov	edi, [ebp+arg_0]
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+28h+var_28], offset aUsage	; "Usage: "
		mov	[esp+28h+var_1C], eax
		mov	eax, 7
		mov	[esp+28h+var_20], eax
		mov	eax, 1
		mov	[esp+28h+var_24], eax
		call	fwrite
		cmp	byte ptr [edi],	20h
		jle	short loc_4015A7
		movzx	eax, byte ptr [edi+1]
		cmp	al, 25h
		setnz	dl
		cmp	al, 21h
		setnz	al
		movzx	eax, al
		test	edx, eax
		jz	short loc_4015A7

loc_401572:				; CODE XREF: sub_401520+85j
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+28h+var_24], eax
		movsx	eax, byte ptr [esi+edi]
		inc	esi
		mov	[esp+28h+var_28], eax
		call	fputc
		cmp	byte ptr [edi+esi], 20h
		jle	short loc_4015A7
		movzx	eax, byte ptr [edi+esi+1]
		cmp	al, 25h
		setnz	dl
		cmp	al, 21h
		setnz	al
		movzx	eax, al
		test	edx, eax
		jnz	short loc_401572

loc_4015A7:				; CODE XREF: sub_401520+3Bj
					; sub_401520+50j ...
		mov	[esp+28h+var_28], edi
		call	strlen
		cmp	eax, esi
		jg	short loc_4015C5
		jmp	loc_4016E7
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4015B8:				; CODE XREF: sub_401520+A9j
		mov	[esp+28h+var_28], edi
		call	strlen
		cmp	eax, esi
		jle	short loc_4015CB
		inc	esi

loc_4015C5:				; CODE XREF: sub_401520+91j
					; sub_401520+1C1j
		cmp	byte ptr [edi+esi], 20h
		jle	short loc_4015B8

loc_4015CB:				; CODE XREF: sub_401520+A2j
		movsx	eax, byte ptr [edi+esi+1]
		cmp	eax, 21h
		jz	loc_40176D
		cmp	eax, 25h
		jnz	loc_401912
		call	__getreent
		movsx	edx, byte ptr [esi+edi]
		mov	ebx, offset aC	; " [-%c"
		inc	esi
		mov	[esp+28h+var_24], ebx
		add	esi, 2
		mov	[esp+28h+var_20], edx
		mov	eax, [eax+0Ch]
		mov	[esp+28h+var_28], eax
		call	fprintf
		mov	[ebp+var_10], 1
		mov	esi, esi

loc_401610:				; CODE XREF: sub_401520+209j
					; sub_401520+228j
		movzx	ebx, byte ptr [edi+esi]
		cmp	bl, 25h
		setnz	al
		xor	edx, edx
		cmp	bl, 21h
		setnz	dl
		test	eax, edx
		jz	short loc_401692

loc_401626:				; CODE XREF: sub_401520+170j
		mov	[esp+28h+var_28], edi
		call	strlen
		cmp	eax, esi
		jle	short loc_401692
		cmp	bl, 20h
		jle	loc_4016BF
		mov	ecx, [ebp+var_10]
		test	ecx, ecx
		jz	loc_401707
		mov	eax, esi
		inc	esi
		cmp	byte ptr [eax+edi], 7Ch
		jz	loc_401750
		call	__getreent
		movsx	edx, byte ptr [edi+esi-1]
		mov	[esp+28h+var_20], edx
		mov	edx, offset aC_0 ; " %c"
		mov	[esp+28h+var_24], edx
		mov	eax, [eax+0Ch]
		mov	[esp+28h+var_28], eax
		call	fprintf

loc_401675:				; CODE XREF: sub_401520+248j
		mov	[ebp+var_10], 0
		movzx	ebx, byte ptr [edi+esi]
		cmp	bl, 25h
		setnz	al
		xor	edx, edx
		cmp	bl, 21h
		setnz	dl
		test	eax, edx
		jnz	short loc_401626

loc_401692:				; CODE XREF: sub_401520+104j
					; sub_401520+110j
		cmp	bl, 20h
		jle	short loc_4016BF
		mov	esi, esi
		lea	edi, [edi+0]

loc_4016A0:				; CODE XREF: sub_401520+19Dj
		mov	[esp+28h+var_28], edi
		call	strlen
		cmp	eax, esi
		jle	short loc_4016BF
		cmp	bl, 2Ah
		jz	loc_4018AA
		inc	esi
		movzx	ebx, byte ptr [esi+edi]

loc_4016BA:				; CODE XREF: sub_401520+3B9j
		cmp	bl, 20h
		jg	short loc_4016A0

loc_4016BF:				; CODE XREF: sub_401520+115j
					; sub_401520+175j ...
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+28h+var_28], 5Dh
		mov	[esp+28h+var_24], eax
		call	fputc
		mov	[esp+28h+var_28], edi
		call	strlen
		cmp	eax, esi
		jg	loc_4015C5

loc_4016E7:				; CODE XREF: sub_401520+93j
					; sub_401520+411j ...
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+28h+var_28], 0Ah
		mov	[esp+28h+var_24], eax
		call	fputc
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401707:				; CODE XREF: sub_401520+120j
		mov	eax, esi
		inc	esi
		cmp	byte ptr [eax+edi], 7Ch
		jz	short loc_401730
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+28h+var_24], eax
		movsx	eax, byte ptr [edi+esi-1]
		mov	[esp+28h+var_28], eax
		call	fputc
		jmp	loc_401610
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401730:				; CODE XREF: sub_401520+1EEj
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+28h+var_28], 20h
		mov	[esp+28h+var_24], eax
		call	fputc
		jmp	loc_401610
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401750:				; CODE XREF: sub_401520+12Dj
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+28h+var_28], 20h
		mov	[esp+28h+var_24], eax
		call	fputc
		jmp	loc_401675
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40176D:				; CODE XREF: sub_401520+B3j
		call	__getreent
		movsx	edx, byte ptr [esi+edi]
		mov	ebx, offset aC_1 ; " -%c"
		inc	esi
		mov	[esp+28h+var_24], ebx
		add	esi, 2
		mov	[esp+28h+var_20], edx
		mov	eax, [eax+0Ch]
		mov	[esp+28h+var_28], eax
		call	fprintf
		mov	[ebp+var_10], 1

loc_401799:				; CODE XREF: sub_401520+34Bj
					; sub_401520+368j
		movzx	ebx, byte ptr [edi+esi]
		cmp	bl, 25h
		setnz	al
		xor	edx, edx
		cmp	bl, 21h
		setnz	dl
		test	eax, edx
		jz	short loc_401820

loc_4017AF:				; CODE XREF: sub_401520+2F5j
		mov	[esp+28h+var_28], edi
		call	strlen
		cmp	eax, esi
		jle	short loc_401820
		cmp	bl, 20h
		jle	loc_4015A7
		mov	ecx, [ebp+var_10]
		test	ecx, ecx
		jz	short loc_401849
		mov	eax, esi
		inc	esi
		cmp	byte ptr [eax+edi], 7Ch
		jz	loc_40188D
		call	__getreent
		movsx	edx, byte ptr [edi+esi-1]
		mov	[esp+28h+var_20], edx
		mov	edx, offset aC_0 ; " %c"
		mov	[esp+28h+var_24], edx
		mov	eax, [eax+0Ch]
		mov	[esp+28h+var_28], eax
		call	fprintf

loc_4017FA:				; CODE XREF: sub_401520+385j
		mov	[ebp+var_10], 0
		movzx	ebx, byte ptr [edi+esi]
		cmp	bl, 25h
		setnz	al
		xor	edx, edx
		cmp	bl, 21h
		setnz	dl
		test	eax, edx
		jnz	short loc_4017AF
		mov	esi, esi
		lea	edi, [edi+0]

loc_401820:				; CODE XREF: sub_401520+28Dj
					; sub_401520+299j ...
		cmp	bl, 20h
		jle	loc_4015A7
		mov	[esp+28h+var_28], edi
		call	strlen
		cmp	eax, esi
		jle	loc_4015A7
		cmp	bl, 2Ah
		jz	loc_4018DE
		inc	esi
		movzx	ebx, byte ptr [esi+edi]
		jmp	short loc_401820
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401849:				; CODE XREF: sub_401520+2A9j
		mov	eax, esi
		inc	esi
		cmp	byte ptr [eax+edi], 7Ch
		jz	short loc_401870
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+28h+var_24], eax
		movsx	eax, byte ptr [edi+esi-1]
		mov	[esp+28h+var_28], eax
		call	fputc
		jmp	loc_401799
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401870:				; CODE XREF: sub_401520+330j
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+28h+var_28], 20h
		mov	[esp+28h+var_24], eax
		call	fputc
		jmp	loc_401799
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40188D:				; CODE XREF: sub_401520+2B2j
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+28h+var_28], 20h
		mov	[esp+28h+var_24], eax
		call	fputc
		jmp	loc_4017FA
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4018AA:				; CODE XREF: sub_401520+18Fj
		call	__getreent
		mov	eax, [eax+0Ch]
		inc	esi
		mov	[esp+28h+var_28], offset a___ ;	"..."
		mov	[esp+28h+var_1C], eax
		mov	eax, 3
		mov	[esp+28h+var_20], eax
		mov	eax, 1
		mov	[esp+28h+var_24], eax
		call	fwrite
		movzx	ebx, byte ptr [esi+edi]
		jmp	loc_4016BA
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4018DE:				; CODE XREF: sub_401520+31Cj
		call	__getreent
		mov	eax, [eax+0Ch]
		inc	esi
		mov	[esp+28h+var_28], offset a___ ;	"..."
		mov	[esp+28h+var_1C], eax
		mov	eax, 3
		mov	[esp+28h+var_20], eax
		mov	eax, 1
		mov	[esp+28h+var_24], eax
		call	fwrite
		movzx	ebx, byte ptr [esi+edi]
		jmp	loc_401820
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401912:				; CODE XREF: sub_401520+BCj
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+28h+var_28], 20h
		mov	[esp+28h+var_24], eax
		jmp	short loc_401961
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401927:				; CODE XREF: sub_401520+44Dj
		mov	[esp+28h+var_28], edi
		call	strlen
		cmp	eax, esi
		jle	loc_4016E7
		cmp	bl, 25h
		setnz	al
		xor	edx, edx
		cmp	bl, 21h
		setnz	dl
		test	eax, edx
		jz	loc_4016E7
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+28h+var_24], eax
		movsx	eax, byte ptr [esi+edi]
		inc	esi
		mov	[esp+28h+var_28], eax

loc_401961:				; CODE XREF: sub_401520+405j
		call	fputc
		movzx	ebx, byte ptr [edi+esi]
		cmp	bl, 20h
		jg	short loc_401927
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+28h+var_28], 0Ah
		mov	[esp+28h+var_24], eax
		call	fputc
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_401520	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401990	proc near		; CODE XREF: sub_4019E0+537p
					; sub_4019E0+56Bp ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[esp+18h+var_18], eax
		call	malloc
		test	eax, eax
		jz	short loc_4019A4
		leave
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019A4:				; CODE XREF: sub_401990+10j
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_18], offset aNotEnoughMemor ; "Not	enough memory, exit.\n"
		mov	[esp+18h+var_C], eax
		mov	eax, 19h
		mov	[esp+18h+var_10], eax
		mov	eax, 1
		mov	[esp+18h+var_14], eax
		call	fwrite
		mov	[esp+18h+var_18], 2
		call	exit
		lea	esi, [esi+0]
sub_401990	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4019E0	proc near		; CODE XREF: sub_401050+5Bp

var_768		= dword	ptr -768h
var_764		= dword	ptr -764h
var_760		= dword	ptr -760h
var_750		= dword	ptr -750h
var_74C		= dword	ptr -74Ch
var_748		= dword	ptr -748h
var_744		= dword	ptr -744h
var_740		= dword	ptr -740h
var_73C		= dword	ptr -73Ch
var_738		= dword	ptr -738h
var_5A8		= dword	ptr -5A8h
var_1AC		= dword	ptr -1ACh
var_1A8		= dword	ptr -1A8h
var_1A4		= dword	ptr -1A4h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		lea	edi, [ebp+var_5A8]
		push	esi
		xor	esi, esi
		push	ebx
		sub	esp, 75Ch
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_73C], esi
		mov	[esp+768h+var_768], edi
		mov	[esp+768h+var_764], eax
		call	strcpy
		lea	ecx, [ebp+arg_C]
		mov	edx, 1
		jmp	short loc_401A20
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401A20:				; CODE XREF: sub_4019E0+31j
					; sub_4019E0+52j
		mov	eax, ecx
		mov	eax, [eax]
		add	ecx, 4
		mov	[ebp+edx*4+var_1AC], eax
		inc	edx
		cmp	edx, 64h
		jle	short loc_401A20
		mov	ebx, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		dec	ebx
		mov	[ebp+arg_0], ebx
		add	esi, 4
		test	ebx, ebx
		mov	[ebp+arg_4], esi
		mov	eax, ebx
		js	short loc_401A65

loc_401A4A:				; CODE XREF: sub_4019E0+233j
		mov	ecx, esi
		lea	edx, [eax-1]
		jmp	short loc_401A60
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A51:				; CODE XREF: sub_4019E0+83j
		mov	eax, [ecx]
		add	ecx, 4
		cmp	byte ptr [eax],	2Dh
		jz	loc_401B51
		dec	edx

loc_401A60:				; CODE XREF: sub_4019E0+6Fj
		cmp	edx, 0FFFFFFFFh
		jnz	short loc_401A51

loc_401A65:				; CODE XREF: sub_4019E0+68j
					; sub_4019E0+22Aj
		mov	eax, ds:dword_405010
		test	eax, eax
		jz	loc_401C42

loc_401A72:				; CODE XREF: sub_4019E0+27Cj
		mov	edx, [ebp+arg_8]
		mov	[esp+768h+var_768], edx
		call	strlen
		lea	ebx, [eax-1]
		test	ebx, ebx
		jle	short loc_401A9B
		mov	eax, [ebp+arg_8]
		cmp	byte ptr [eax+ebx], 20h
		jle	short loc_401A9B

loc_401A8D:				; CODE XREF: sub_4019E0+B9j
		dec	ebx
		test	ebx, ebx
		jle	short loc_401A9B
		mov	edx, [ebp+arg_8]
		cmp	byte ptr [edx+ebx], 20h
		jg	short loc_401A8D

loc_401A9B:				; CODE XREF: sub_4019E0+A2j
					; sub_4019E0+ABj ...
		mov	edx, [ebp+arg_8]
		movzx	eax, byte ptr [edx+ebx+2]
		cmp	al, 25h
		setnz	dl
		cmp	al, 21h
		setnz	al
		movzx	eax, al
		test	edx, eax
		jnz	short loc_401B02

loc_401AB4:				; CODE XREF: sub_4019E0+16Cj
		xor	ebx, ebx
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401AC0:				; CODE XREF: sub_4019E0+F5j
					; sub_4019E0+FCj
		mov	[esp+768h+var_768], edi
		inc	ebx
		call	strlen
		cmp	ebx, eax
		jge	loc_401C61
		cmp	byte ptr [edi+ebx], 2Dh
		jnz	short loc_401AC0
		cmp	byte ptr [edi+ebx-1], 21h
		jnz	short loc_401AC0
		mov	edx, ds:dword_405010
		mov	ds:dword_405020, edx
		movzx	eax, byte ptr [edi+ebx-2]
		mov	[edx+1], al
		mov	eax, 5

loc_401AF7:				; CODE XREF: sub_4019E0+362j
					; sub_4019E0+798j ...
		add	esp, 75Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B02:				; CODE XREF: sub_4019E0+D2j
		lea	eax, [ebp+var_73C]
		mov	edx, ebx
		mov	[esp+768h+var_768], eax
		mov	eax, [ebp+arg_8]
		call	sub_401320
		mov	eax, [ebp+var_73C]
		mov	edx, [ebp+eax*4+var_1A8]
		mov	eax, [ebp+arg_0]
		mov	[edx], eax
		mov	edx, [ebp+var_73C]
		lea	eax, [edx+2]
		mov	[ebp+var_73C], eax
		mov	eax, [ebp+edx*4+var_1A4]
		lea	edx, [ebp+arg_4]
		mov	[esp+768h+var_768], 4
		call	sub_401370
		jmp	loc_401AB4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B51:				; CODE XREF: sub_4019E0+79j
		lea	eax, [esi+4]
		mov	esi, [esi]
		dec	ebx
		mov	[ebp+arg_4], eax
		xor	eax, eax
		mov	[ebp+arg_0], ebx
		mov	[ebp+var_744], esi
		cmp	byte ptr [esi+2], 2Dh
		setnz	al
		mov	[ebp+var_748], eax
		cmp	byte ptr [esi],	2Dh
		jnz	loc_40216D
		xor	ebx, ebx
		lea	esi, [ebx+2]
		mov	[esp+768h+var_768], edi
		call	strlen
		cmp	esi, eax
		jge	short loc_401BAB

loc_401B8C:				; CODE XREF: sub_4019E0+1C9j
		mov	edx, [ebp+var_744]
		movzx	eax, byte ptr [edx+1]
		cmp	[edi+ebx], al
		jz	short loc_401C18

loc_401B9B:				; CODE XREF: sub_4019E0+24Bj
		inc	ebx

loc_401B9C:				; CODE XREF: sub_4019E0+25Dj
		mov	[esp+768h+var_768], edi
		lea	esi, [ebx+2]
		call	strlen
		cmp	esi, eax
		jl	short loc_401B8C

loc_401BAB:				; CODE XREF: sub_4019E0+1AAj
					; sub_4019E0+256j
		mov	[esp+768h+var_768], edi
		call	strlen
		cmp	esi, eax
		jge	loc_40217D
		mov	byte ptr [edi+ebx+2], 20h
		lea	edx, [ebp+var_73C]
		mov	byte ptr [edi+ebx+1], 20h
		mov	byte ptr [edi+ebx], 20h
		mov	[esp+768h+var_768], edx
		mov	eax, [ebp+arg_8]
		mov	edx, ebx
		add	ebx, 3
		call	sub_401320
		mov	eax, [ebp+var_73C]
		mov	edx, [ebp+var_748]
		mov	eax, [ebp+eax*4+var_1A8]
		mov	[eax], edx
		inc	[ebp+var_73C]
		movzx	edx, byte ptr [edi+ebx]
		cmp	dl, 20h
		jg	short loc_401C6E

loc_401C03:				; CODE XREF: sub_4019E0+35Cj
		mov	ebx, [ebp+arg_0]
		test	ebx, ebx
		mov	eax, ebx
		js	loc_401A65
		mov	esi, [ebp+arg_4]
		jmp	loc_401A4A
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C18:				; CODE XREF: sub_4019E0+1B9j
		movzx	eax, byte ptr [edi+ebx+1]
		cmp	al, 25h
		setz	dl
		cmp	al, 21h
		setz	al
		or	eax, edx
		test	al, 1
		jz	loc_401B9B
		cmp	byte ptr [edi+ebx+2], 2Dh
		jz	loc_401BAB
		inc	ebx
		jmp	loc_401B9C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C42:				; CODE XREF: sub_4019E0+8Cj
		mov	[esp+768h+var_768], 3
		call	malloc
		mov	ds:dword_405010, eax
		mov	word ptr [eax],	3F2Dh
		mov	byte ptr [eax+2], 0
		jmp	loc_401A72
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C61:				; CODE XREF: sub_4019E0+EBj
		add	esp, 75Ch
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C6E:				; CODE XREF: sub_4019E0+221j
		cmp	dl, 25h
		setnz	al
		cmp	dl, 21h
		setnz	dl
		movzx	edx, dl
		jmp	short loc_401C91
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C7F:				; CODE XREF: sub_4019E0+2B3j
		inc	ebx
		movzx	eax, byte ptr [edi+ebx]
		cmp	al, 25h
		setnz	dl
		cmp	al, 21h
		setnz	al
		movzx	eax, al

loc_401C91:				; CODE XREF: sub_4019E0+29Dj
		test	eax, edx
		jnz	short loc_401C7F
		lea	esi, [edi+ebx]
		xor	ebx, ebx
		mov	[ebp+var_74C], ebx
		cmp	byte ptr [esi],	20h
		jle	loc_401D38

loc_401CA9:				; CODE XREF: sub_4019E0+352j
		mov	edx, [ebp+var_74C]
		movsx	eax, byte ptr [esi+edx+1]
		sub	eax, 2Ah	; switch 79 cases
		cmp	eax, 4Eh
		ja	short loc_401CFB ; default
		jmp	ds:off_4041A8[eax*4] ; switch jump

loc_401CC3:				; DATA XREF: .rdata:004041A8o
		mov	eax, [ebp+var_73C] ; case 0x64
		mov	ecx, offset aD	; "%d"
		mov	edx, [ebp+eax*4+var_1A8]
		inc	eax
		mov	[esp+768h+var_760], edx
		mov	[ebp+var_73C], eax

loc_401CE0:				; CODE XREF: sub_4019E0+3B8j
		mov	[esp+768h+var_764], ecx

loc_401CE4:				; CODE XREF: sub_4019E0+3DEj
					; sub_4019E0+404j ...
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		lea	ecx, [edx+4]
		mov	[esp+768h+var_768], eax
		mov	[ebp+arg_4], ecx
		call	sscanf
		test	eax, eax
		jnz	short loc_401D0B

loc_401CFB:				; CODE XREF: sub_4019E0+2DAj
					; sub_4019E0+2DCj
					; DATA XREF: ...
		mov	eax, [ebp+var_74C] ; default
		cmp	byte ptr [esi+eax], 21h
		jz	loc_402150

loc_401D0B:				; CODE XREF: sub_4019E0+319j
					; sub_4019E0+434j ...
		mov	edx, [ebp+var_74C]
		cmp	byte ptr [esi+edx+1], 2Ah
		jz	loc_4020A6
		dec	[ebp+arg_0]
		add	edx, 2
		mov	[ebp+var_74C], edx

loc_401D28:				; CODE XREF: sub_4019E0+6CDj
		mov	eax, [ebp+var_74C]
		cmp	byte ptr [esi+eax], 20h
		jg	loc_401CA9

loc_401D38:				; CODE XREF: sub_4019E0+2C3j
		xor	eax, eax

loc_401D3A:				; CODE XREF: sub_4019E0+76Aj
					; sub_4019E0+780j
		test	eax, eax
		jz	loc_401C03
		jmp	loc_401AF7
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D47:				; CODE XREF: sub_4019E0+2DCj
					; DATA XREF: .rdata:004041A8o
		mov	eax, [ebp+var_73C] ; case 0x66
		mov	ebx, offset aF	; "%f"
		mov	edx, [ebp+eax*4+var_1A8]
		inc	eax
		mov	[esp+768h+var_760], edx
		mov	[ebp+var_73C], eax
		mov	[esp+768h+var_764], ebx
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		lea	ecx, [edx+4]
		mov	[esp+768h+var_768], eax
		mov	[ebp+arg_4], ecx
		call	sscanf

loc_401D7B:				; CODE XREF: sub_4019E0+2DCj
					; DATA XREF: .rdata:004041A8o
		mov	eax, [ebp+var_73C] ; case 0x46
		mov	ecx, offset aLf	; "%lf"
		mov	edx, [ebp+eax*4+var_1A8]
		inc	eax
		mov	[esp+768h+var_760], edx
		mov	[ebp+var_73C], eax
		jmp	loc_401CE0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D9D:				; CODE XREF: sub_4019E0+2DCj
					; DATA XREF: .rdata:004041A8o
		mov	eax, [ebp+var_73C] ; case 0x78
		mov	edx, [ebp+eax*4+var_1A8]
		inc	eax
		mov	[esp+768h+var_760], edx
		mov	[ebp+var_73C], eax
		mov	eax, offset asc_40418F ; "%x"
		mov	[esp+768h+var_764], eax
		jmp	loc_401CE4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401DC3:				; CODE XREF: sub_4019E0+2DCj
					; DATA XREF: .rdata:004041A8o
		mov	eax, [ebp+var_73C] ; case 0x75
		mov	edx, [ebp+eax*4+var_1A8]
		inc	eax
		mov	[esp+768h+var_760], edx
		mov	edx, offset aU	; "%u"
		mov	[ebp+var_73C], eax
		mov	[esp+768h+var_764], edx
		jmp	loc_401CE4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401DE9:				; CODE XREF: sub_4019E0+2DCj
					; DATA XREF: .rdata:004041A8o
		mov	edx, [ebp+arg_4] ; case	0x73
		lea	ecx, [edx+4]
		mov	[ebp+arg_4], ecx
		mov	ecx, [ebp+var_73C]
		lea	eax, [ecx+1]
		mov	[ebp+var_73C], eax
		mov	eax, [ebp+ecx*4+var_1A8]
		mov	[esp+768h+var_768], 4
		call	sub_401370
		jmp	loc_401D0B
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E19:				; CODE XREF: sub_4019E0+2DCj
					; DATA XREF: .rdata:004041A8o
		mov	eax, [ebp+var_73C] ; case 0x6F
		mov	edx, [ebp+eax*4+var_1A8]
		inc	eax
		mov	[esp+768h+var_760], edx
		mov	[ebp+var_73C], eax
		mov	eax, offset aO	; "%o"
		mov	[esp+768h+var_764], eax
		jmp	loc_401CE4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E3F:				; CODE XREF: sub_4019E0+2DCj
					; DATA XREF: .rdata:004041A8o
		mov	eax, [ebp+var_73C] ; case 0x4F
		mov	edx, [ebp+eax*4+var_1A8]
		inc	eax
		mov	[esp+768h+var_760], edx
		mov	[ebp+var_73C], eax
		mov	eax, offset aLo	; "%lo"
		mov	[esp+768h+var_764], eax
		jmp	loc_401CE4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E65:				; CODE XREF: sub_4019E0+2DCj
					; DATA XREF: .rdata:004041A8o
		mov	eax, [ebp+var_73C] ; case 0x58
		mov	edx, [ebp+eax*4+var_1A8]
		inc	eax
		mov	[esp+768h+var_760], edx
		mov	[ebp+var_73C], eax
		mov	eax, offset aLx	; "%lx"
		mov	[esp+768h+var_764], eax
		jmp	loc_401CE4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E8B:				; CODE XREF: sub_4019E0+2DCj
					; DATA XREF: .rdata:004041A8o
		mov	eax, [ebp+var_73C] ; case 0x55
		mov	edx, [ebp+eax*4+var_1A8]
		inc	eax
		mov	[esp+768h+var_760], edx
		mov	[ebp+var_73C], eax
		mov	eax, offset aLu	; "%lu"
		mov	[esp+768h+var_764], eax
		jmp	loc_401CE4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401EB1:				; CODE XREF: sub_4019E0+2DCj
					; DATA XREF: .rdata:004041A8o
		mov	eax, [ebp+var_73C] ; case 0x44
		mov	edx, [ebp+eax*4+var_1A8]
		inc	eax
		mov	[esp+768h+var_760], edx
		mov	[ebp+var_73C], eax
		mov	eax, offset aLd	; "%ld"
		mov	[esp+768h+var_764], eax
		jmp	loc_401CE4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401ED7:				; CODE XREF: sub_4019E0+2DCj
					; DATA XREF: .rdata:004041A8o
		mov	eax, [ebp+var_74C] ; case 0x2A
		xor	ebx, ebx
		add	eax, esi
		mov	[ebp+var_750], eax

loc_401EE7:				; CODE XREF: sub_4019E0+530j
		mov	edx, [ebp+var_750]
		movsx	eax, byte ptr [edx+2]
		sub	eax, 44h	; switch 53 cases
		cmp	eax, 34h
		ja	short loc_401F00 ; default
		jmp	ds:off_4042E4[eax*4] ; switch jump

loc_401F00:				; CODE XREF: sub_4019E0+517j
					; DATA XREF: .rdata:004042E4o
		xor	eax, eax	; default

loc_401F02:				; CODE XREF: sub_4019E0+564j
		mov	edx, [ebp+arg_0]

loc_401F05:				; CODE XREF: sub_4019E0+6C1j
		dec	edx
		dec	eax
		jnz	loc_4020B2
		mov	[ebp+arg_0], edx
		jmp	short loc_401EE7
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F12:				; CODE XREF: sub_4019E0+519j
					; DATA XREF: .rdata:004042E4o
		mov	eax, 4		; case 0x78
		call	sub_401990
		mov	[ebp+ebx*4+var_738], eax
		inc	ebx
		mov	[esp+768h+var_760], eax
		mov	eax, offset asc_40418F ; "%x"

loc_401F2D:				; CODE XREF: sub_4019E0+581j
					; sub_4019E0+604j ...
		mov	[esp+768h+var_764], eax

loc_401F31:				; CODE XREF: sub_4019E0+5A2j
					; sub_4019E0+5C3j ...
		mov	edx, [ebp+arg_4]
		mov	eax, [edx]
		lea	ecx, [edx+4]
		mov	[esp+768h+var_768], eax
		mov	[ebp+arg_4], ecx
		call	sscanf
		jmp	short loc_401F02
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F46:				; CODE XREF: sub_4019E0+519j
					; DATA XREF: .rdata:004042E4o
		mov	eax, 4		; case 0x6F
		call	sub_401990
		mov	[ebp+ebx*4+var_738], eax
		inc	ebx
		mov	[esp+768h+var_760], eax
		mov	eax, offset aO	; "%o"
		jmp	short loc_401F2D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F63:				; CODE XREF: sub_4019E0+519j
					; DATA XREF: .rdata:004042E4o
		mov	eax, 4		; case 0x66
		call	sub_401990
		mov	[ebp+ebx*4+var_738], eax
		mov	edx, offset aF	; "%f"
		inc	ebx
		mov	[esp+768h+var_760], eax
		mov	[esp+768h+var_764], edx
		jmp	short loc_401F31
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F84:				; CODE XREF: sub_4019E0+519j
					; DATA XREF: .rdata:004042E4o
		mov	eax, 4		; case 0x64
		call	sub_401990
		mov	[ebp+ebx*4+var_738], eax
		mov	edx, offset aD	; "%d"
		inc	ebx
		mov	[esp+768h+var_760], eax
		mov	[esp+768h+var_764], edx
		jmp	short loc_401F31
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401FA5:				; CODE XREF: sub_4019E0+519j
					; DATA XREF: .rdata:004042E4o
		mov	eax, 4		; case 0x58
		call	sub_401990
		mov	[ebp+ebx*4+var_738], eax
		mov	ecx, offset aLx	; "%lx"
		inc	ebx
		mov	[esp+768h+var_760], eax
		mov	[esp+768h+var_764], ecx
		jmp	loc_401F31
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401FC9:				; CODE XREF: sub_4019E0+519j
					; DATA XREF: .rdata:004042E4o
		mov	eax, 4		; case 0x55
		call	sub_401990
		mov	[ebp+ebx*4+var_738], eax
		inc	ebx
		mov	[esp+768h+var_760], eax
		mov	eax, offset aLu	; "%lu"
		jmp	loc_401F2D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401FE9:				; CODE XREF: sub_4019E0+519j
					; DATA XREF: .rdata:004042E4o
		mov	eax, 4		; case 0x4F
		call	sub_401990
		mov	[ebp+ebx*4+var_738], eax
		inc	ebx
		mov	[esp+768h+var_760], eax
		mov	eax, offset aLo	; "%lo"
		jmp	loc_401F2D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402009:				; CODE XREF: sub_4019E0+519j
					; DATA XREF: .rdata:004042E4o
		mov	eax, 8		; case 0x46
		call	sub_401990
		mov	[ebp+ebx*4+var_738], eax
		inc	ebx
		mov	[esp+768h+var_760], eax
		mov	eax, offset aLf	; "%lf"
		jmp	loc_401F2D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402029:				; CODE XREF: sub_4019E0+519j
					; DATA XREF: .rdata:004042E4o
		mov	eax, 4		; case 0x44
		call	sub_401990
		mov	[ebp+ebx*4+var_738], eax
		inc	ebx
		mov	[esp+768h+var_760], eax
		mov	eax, offset aLd	; "%ld"
		jmp	loc_401F2D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402049:				; CODE XREF: sub_4019E0+519j
					; DATA XREF: .rdata:004042E4o
		mov	eax, 4		; case 0x75
		call	sub_401990
		mov	[ebp+ebx*4+var_738], eax
		inc	ebx
		mov	[esp+768h+var_760], eax
		mov	eax, offset aU	; "%u"
		jmp	loc_401F2D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402069:				; CODE XREF: sub_4019E0+519j
					; DATA XREF: .rdata:004042E4o
		mov	edx, [ebp+arg_0] ; case	0x73
		test	edx, edx
		jz	loc_402165
		mov	ecx, [ebp+arg_4]
		jmp	short loc_402091
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402079:				; CODE XREF: sub_4019E0+6B6j
		mov	eax, ecx
		mov	eax, [eax]
		add	ecx, 4
		mov	[ebp+ebx*4+var_738], eax
		inc	ebx
		dec	edx
		jz	short loc_402098
		mov	[ebp+arg_4], ecx
		mov	[ebp+arg_0], edx

loc_402091:				; CODE XREF: sub_4019E0+697j
		mov	eax, [ecx]
		cmp	byte ptr [eax],	2Dh
		jnz	short loc_402079

loc_402098:				; CODE XREF: sub_4019E0+6A9j
					; sub_4019E0+788j
		add	ecx, 4
		xor	eax, eax
		inc	ebx
		mov	[ebp+arg_4], ecx
		jmp	loc_401F05
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4020A6:				; CODE XREF: sub_4019E0+336j
		add	[ebp+var_74C], 3
		jmp	loc_401D28
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4020B2:				; CODE XREF: sub_4019E0+527j
		sub	[ebp+arg_4], 4
		inc	edx
		dec	ebx
		mov	[ebp+arg_0], edx
		lea	eax, ds:4[ebx*4]
		call	sub_401990
		mov	[ebp+var_740], eax
		mov	edx, eax
		xor	ecx, ecx
		jmp	short loc_4020E0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4020D3:				; CODE XREF: sub_4019E0+702j
		mov	eax, [ebp+ecx*4+var_738]
		inc	ecx
		mov	[edx], eax
		add	edx, 4

loc_4020E0:				; CODE XREF: sub_4019E0+6F1j
		cmp	ecx, ebx
		jl	short loc_4020D3
		mov	dword ptr [edx], 0
		mov	eax, [ebp+var_73C]
		mov	eax, [ebp+eax*4+var_1A8]
		mov	[eax], ebx
		mov	edx, [ebp+var_73C]
		lea	eax, [edx+2]
		mov	[ebp+var_73C], eax
		mov	eax, [ebp+edx*4+var_1A4]
		lea	edx, [ebp+var_740]
		mov	[esp+768h+var_768], 4
		call	sub_401370
		test	ebx, ebx
		jnz	loc_401D0B
		mov	eax, [ebp+var_74C]
		cmp	byte ptr [esi+eax], 21h
		jnz	loc_401D0B
		mov	edx, [ebp+var_744]
		mov	eax, 3
		mov	ds:dword_405020, edx
		jmp	loc_401D3A
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_402150:				; CODE XREF: sub_4019E0+325j
		mov	eax, [ebp+var_744]
		mov	ds:dword_405020, eax
		mov	eax, 4
		jmp	loc_401D3A
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402165:				; CODE XREF: sub_4019E0+68Ej
		mov	ecx, [ebp+arg_4]
		jmp	loc_402098
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40216D:				; CODE XREF: sub_4019E0+195j
		mov	ds:dword_405020, esi
		mov	eax, 1
		jmp	loc_401AF7
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40217D:				; CODE XREF: sub_4019E0+1D5j
		mov	eax, [ebp+var_744]
		mov	ds:dword_405020, eax
		mov	eax, 2
		jmp	loc_401AF7
sub_4019E0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_4021A0	proc near		; CODE XREF: sub_401050+11p
		push	ecx
		mov	ecx, esp
		add	ecx, 8

loc_4021A6:				; CODE XREF: sub_4021A0+1Bj
		cmp	eax, 1000h
		jb	short loc_4021BD
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		jmp	short loc_4021A6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4021BD:				; CODE XREF: sub_4021A0+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		jmp	eax
sub_4021A0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4021D0	proc near		; CODE XREF: start+3Ap

var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_C2		= dword	ptr -0C2h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		mov	[esp+18h+var_14], eax
		mov	[esp+18h+var_18], esi
		call	sub_4022D0
		sub	esp, 8
		test	eax, eax
		jz	short loc_402201
		mov	[esp+18h+var_18], 0

loc_4021FB:				; CODE XREF: sub_4021D0+56j
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)

loc_402201:				; CODE XREF: sub_4021D0+22j
		sub	esp, 0C0h
		lea	ebx, [esp+0D8h+var_C2+1]
		and	ebx, 0FFFFFFF0h
		mov	dword ptr [ebx], 0
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	sub_4022D0
		sub	esp, 8
		mov	[esp+0D8h+var_D8], ebx
		jmp	short loc_4021FB
sub_4021D0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getreent. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fprintf. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION exit. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fputc. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fwrite. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION sscanf. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strlen. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strcpy. PRESS KEYPAD "+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4022D0	proc near		; CODE XREF: sub_4021D0+18p
					; sub_4021D0+4Bp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		push	ebx
		sub	esp, 4		; lpModuleName
		mov	ebx, [ebp+arg_4]
		test	ebx, ebx
		jz	loc_4023D3

loc_4022E4:				; CODE XREF: sub_4022D0+11Fj
		mov	dword ptr [ebx+4], 0A8h
		xor	ecx, ecx
		mov	edx, 84h
		mov	dword ptr [ebx+8], 3EDh
		test	eax, eax
		mov	dword ptr [ebx+0Ch], 12h
		mov	[ebx+80h], ecx
		mov	[ebx+84h], edx
		mov	dword ptr [ebx+2Ch], offset dword_402500
		mov	dword ptr [ebx+30h], offset dword_402508
		mov	dword ptr [ebx+14h], offset unk_405034
		jnz	loc_4023C1
		mov	eax, ds:_impure_ptr
		mov	[ebx+10h], eax

loc_402331:				; CODE XREF: sub_4022D0+FEj
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [ebx+48h], offset sub_4024D0
		mov	dword ptr [ebx+4Ch], offset sub_4024C0
		mov	[ebx+28h], eax
		mov	eax, [ebp+0]
		mov	dword ptr [ebx+50h], offset sub_4024B0
		mov	dword ptr [ebx+54h], offset sub_4024A0
		mov	dword ptr [ebx+24h], offset unk_405030
		mov	[ebx], eax
		mov	dword ptr [ebx+18h], offset malloc
		mov	dword ptr [ebx+1Ch], offset loc_402490
		mov	dword ptr [ebx+20h], offset loc_402480
		mov	dword ptr [ebx+44h], offset loc_402470
		mov	[esp+8+var_8], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	dword ptr [ebx+34h], offset dword_403000
		mov	dword ptr [ebx+38h], offset unk_403010
		mov	dword ptr [ebx+3Ch], offset dword_405000
		mov	dword ptr [ebx+40h], 405060h
		call	sub_402440
		mov	eax, 1

loc_4023BA:				; CODE XREF: sub_4022D0+116j
		mov	ebx, [ebp+var_4]
		leave
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4023C1:				; CODE XREF: sub_4022D0+53j
		mov	edx, [ebx+0A4h]
		mov	eax, ds:_impure_ptr
		mov	[eax], edx
		jmp	loc_402331
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4023D3:				; CODE XREF: sub_4022D0+Ej
		mov	[esp+8+var_8], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_4023BA
		mov	ebx, edx
		mov	eax, 1
		jmp	loc_4022E4
sub_4022D0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402410	proc near		; CODE XREF: sub_402440+1Fp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ebx, [ebp+arg_4]
		jmp	short loc_40242C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402420:				; CODE XREF: sub_402410+1Ej
		mov	edx, [ecx+4]
		mov	eax, [ecx]
		add	ecx, 8
		add	edx, esi
		add	[edx], eax

loc_40242C:				; CODE XREF: sub_402410+Ej
		cmp	ecx, ebx
		jb	short loc_402420
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_402410	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402440	proc near		; CODE XREF: sub_4022D0+E0p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	edx, 400000h
		mov	ebp, esp
		mov	eax, offset unk_4043C0
		sub	esp, 0Ch
		mov	[esp+0Ch+var_4], edx
		mov	[esp+0Ch+var_8], eax
		mov	[esp+0Ch+var_C], offset	unk_4043C0
		call	sub_402410
		leave
		retn
sub_402440	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_402470:				; DATA XREF: sub_4022D0+ABo
		jmp	ds:calloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_402480:				; DATA XREF: sub_4022D0+A4o
		jmp	ds:realloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_402490:				; DATA XREF: sub_4022D0+9Do
		jmp	ds:free
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4024A0	proc near		; DATA XREF: sub_4022D0+86o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4024A0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4024B0	proc near		; DATA XREF: sub_4022D0+7Fo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4024B0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4024C0	proc near		; DATA XREF: sub_4022D0+72o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4024C0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4024D0	proc near		; DATA XREF: sub_4022D0+6Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4024D0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
dword_402500	dd 0FFFFFFFFh, 0	; DATA XREF: sub_4022D0+3Eo
dword_402508	dd 0FFFFFFFFh, 3Dh dup(0) ; DATA XREF: sub_4022D0+45o
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 00000010 (	 16.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001A00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 403000h
dword_403000	dd 404000h		; DATA XREF: sub_401050+200r
					; sub_4022D0+C4o
dword_403004	dd 404060h		; DATA XREF: sub_401050+37r
					; sub_401050+215r ...
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_403010	db    0	;		; DATA XREF: sub_4022D0+CBo
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_data		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 000003C0 (	960.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001C00
; Flags	40000040: Data Readable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 404000h
aGifovlyVersion	db 'gifovly Version 4.1, ',9,'Eric Raymond,',9,'Oct 23 2005,   1'
		db '5:11:47',0Ah
		db '(C) Copyright 1992 Eric Raymond.',0Ah,0
		align 4
aGifovlyTTransp	db 'gifovly t%-TransparentColor!d h%-',0
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
aErrorInCommand	db 'Error in command line parsing - ',0 ; DATA XREF: sub_401390+12o
aUndefinedError	db 'Undefined error',0  ; DATA XREF: sub_401390+51o
aS_		db ' - ',27h,'%s',27h,'.',0Ah,0 ; DATA XREF: sub_401390+7Fo
aFailToSatisfy	db 'Fail to satisfy',0  ; DATA XREF: sub_401390+B7o
aNoneOptionFoun	db 'None option Found',0 ; DATA XREF: sub_401390+E3o
aUndefinedOptio	db 'Undefined option Found',0 ; DATA XREF: sub_401390+FCo
aEmptyInputFor?	db 'Empty input for ',27h,'!*?',27h,' seq.',0 ; DATA XREF: sub_401390+12Bo
aFailedOnReadin	db 'Failed on reading number',0 ; DATA XREF: sub_401390+15Ao
off_404138	dd offset loc_4013D0	; DATA XREF: sub_401390+39r
		dd offset loc_401455	; jump table for switch	statement
		dd offset loc_401484
		dd offset loc_4014B3
		dd offset loc_4014E2
		dd offset loc_401429
aUsage		db 'Usage: ',0          ; DATA XREF: sub_401520+16o
aC		db ' [-%c',0            ; DATA XREF: sub_401520+CBo
aC_0		db ' %c',0              ; DATA XREF: sub_401520+141o
					; sub_401520+2C6o
aC_1		db ' -%c',0             ; DATA XREF: sub_401520+256o
a___		db '...',0              ; DATA XREF: sub_401520+393o
					; sub_401520+3C7o
aNotEnoughMemor	db 'Not enough memory, exit.',0Ah,0 ; DATA XREF: sub_401990+1Co
aD		db '%d',0               ; DATA XREF: sub_4019E0+2E9o
					; sub_4019E0+5B5o
aF		db '%f',0               ; DATA XREF: sub_4019E0+36Do
					; sub_4019E0+594o
aLf		db '%lf',0              ; DATA XREF: sub_4019E0+3A1o
					; sub_4019E0+63Fo
asc_40418F	db '%x',0               ; DATA XREF: sub_4019E0+3D5o
					; sub_4019E0+548o
aU		db '%u',0               ; DATA XREF: sub_4019E0+3F5o
					; sub_4019E0+67Fo
aO		db '%o',0               ; DATA XREF: sub_4019E0+451o
					; sub_4019E0+57Co
aLo		db '%lo',0              ; DATA XREF: sub_4019E0+477o
					; sub_4019E0+61Fo
aLx		db '%lx',0              ; DATA XREF: sub_4019E0+49Do
					; sub_4019E0+5D6o
aLu		db '%lu',0              ; DATA XREF: sub_4019E0+4C3o
					; sub_4019E0+5FFo
aLd		db '%ld',0              ; DATA XREF: sub_4019E0+4E9o
					; sub_4019E0+65Fo
off_4041A8	dd offset loc_401ED7, offset loc_401CFB, offset	loc_401CFB
					; DATA XREF: sub_4019E0+2DCr
		dd offset loc_401CFB, offset loc_401CFB, offset	loc_401CFB ; jump table	for switch statement
		dd offset loc_401CFB, offset loc_401CFB, offset	loc_401CFB
		dd offset loc_401CFB, offset loc_401CFB, offset	loc_401CFB
		dd offset loc_401CFB, offset loc_401CFB, offset	loc_401CFB
		dd offset loc_401CFB, offset loc_401CFB, offset	loc_401CFB
		dd offset loc_401CFB, offset loc_401CFB, offset	loc_401CFB
		dd offset loc_401CFB, offset loc_401CFB, offset	loc_401CFB
		dd offset loc_401CFB, offset loc_401CFB, offset	loc_401EB1
		dd offset loc_401CFB, offset loc_401D7B, offset	loc_401CFB
		dd offset loc_401CFB, offset loc_401CFB, offset	loc_401CFB
		dd offset loc_401CFB, offset loc_401CFB, offset	loc_401CFB
		dd offset loc_401CFB, offset loc_401E3F, offset	loc_401CFB
		dd offset loc_401CFB, offset loc_401CFB, offset	loc_401CFB
		dd offset loc_401CFB, offset loc_401E8B, offset	loc_401CFB
		dd offset loc_401CFB, offset loc_401E65, offset	loc_401CFB
		dd offset loc_401CFB, offset loc_401CFB, offset	loc_401CFB
		dd offset loc_401CFB, offset loc_401CFB, offset	loc_401CFB
		dd offset loc_401CFB, offset loc_401CFB, offset	loc_401CFB
		dd offset loc_401CFB, offset loc_401CC3, offset	loc_401CFB
		dd offset loc_401D47, offset loc_401CFB, offset	loc_401CFB
		dd offset loc_401CFB, offset loc_401CFB, offset	loc_401CFB
		dd offset loc_401CFB, offset loc_401CFB, offset	loc_401CFB
		dd offset loc_401E19, offset loc_401CFB, offset	loc_401CFB
		dd offset loc_401CFB, offset loc_401DE9, offset	loc_401CFB
		dd offset loc_401DC3, offset loc_401CFB, offset	loc_401CFB
		dd offset loc_401D9D
off_4042E4	dd offset loc_402029, offset loc_401F00, offset	loc_402009
					; DATA XREF: sub_4019E0+519r
		dd offset loc_401F00, offset loc_401F00, offset	loc_401F00 ; jump table	for switch statement
		dd offset loc_401F00, offset loc_401F00, offset	loc_401F00
		dd offset loc_401F00, offset loc_401F00, offset	loc_401FE9
		dd offset loc_401F00, offset loc_401F00, offset	loc_401F00
		dd offset loc_401F00, offset loc_401F00, offset	loc_401FC9
		dd offset loc_401F00, offset loc_401F00, offset	loc_401FA5
		dd offset loc_401F00, offset loc_401F00, offset	loc_401F00
		dd offset loc_401F00, offset loc_401F00, offset	loc_401F00
		dd offset loc_401F00, offset loc_401F00, offset	loc_401F00
		dd offset loc_401F00, offset loc_401F00, offset	loc_401F84
		dd offset loc_401F00, offset loc_401F63, offset	loc_401F00
		dd offset loc_401F00, offset loc_401F00, offset	loc_401F00
		dd offset loc_401F00, offset loc_401F00, offset	loc_401F00
		dd offset loc_401F00, offset loc_401F46, offset	loc_401F00
		dd offset loc_401F00, offset loc_401F00, offset	loc_402069
		dd offset loc_401F00, offset loc_402049, offset	loc_401F00
		dd offset loc_401F00, offset loc_401F12
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_4043C0	db    0	;		; DATA XREF: sub_402440+8o
					; sub_402440+18o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_rdata		ends

; Section 4. (virtual address 00005000)
; Virtual size			: 00000060 (	 96.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 405000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_405000	dd ?			; DATA XREF: start+9r sub_4022D0+D2o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_405010	dd ?			; DATA XREF: sub_4019E0+85r
					; sub_4019E0+FEr ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_405020	dd ?			; DATA XREF: sub_401390+75r
					; sub_4019E0+104w ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_405030	db    ?	;		; DATA XREF: sub_4022D0+8Do
		db    ?	;
		db    ?	;
		db    ?	;
unk_405034	db    ?	;		; DATA XREF: sub_4022D0+4Co
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
_bss		ends

;
; Imports from cygungif-4
;
; Section 5. (virtual address 00006000)
; Virtual size			: 0000034C (	844.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00002000
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp_DGifCloseFile:dword	; DATA XREF: DGifCloseFiler
		extrn __imp_DGifOpenFileHandle:dword ; DATA XREF: DGifOpenFileHandler
		extrn __imp_DGifSlurp:dword ; DATA XREF: DGifSlurpr
		extrn __imp_EGifOpenFileHandle:dword ; DATA XREF: EGifOpenFileHandler
		extrn __imp_EGifSpew:dword ; DATA XREF:	EGifSpewr
		extrn __imp_MakeMapObject:dword	; DATA XREF: MakeMapObjectr
		extrn __imp_MakeSavedImage:dword ; DATA	XREF: MakeSavedImager
		extrn __imp_PrintGifError:dword	; DATA XREF: PrintGifErrorr


;
; Imports from cygwin1
;
		extrn __imp___getreent:dword ; DATA XREF: __getreentr
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn _impure_ptr:dword	; DATA XREF: sub_4022D0+59r
					; sub_4022D0+F7r
; void *__cdecl	calloc(size_t,size_t)
		extrn calloc:dword	; DATA XREF: .text:00402470r
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_4021D0+2Br
					; .text:00402400r
; void __cdecl _imp_exit(int)
		extrn __imp_exit:dword	; DATA XREF: exitr
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
		extrn __imp_fputc:dword	; DATA XREF: fputcr
; void __cdecl free(void *)
		extrn free:dword	; DATA XREF: .text:00402490r
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
; void *__cdecl	_imp_malloc(size_t)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; void *__cdecl	realloc(void *,size_t)
		extrn realloc:dword	; DATA XREF: .text:00402480r
		extrn __imp_sscanf:dword ; DATA	XREF: sscanfr
; char *__cdecl	_imp_strcpy(char *,const char *)
		extrn __imp_strcpy:dword ; DATA	XREF: strcpyr
; size_t __cdecl _imp_strlen(const char	*)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr


;
; Imports from KERNEL32
;
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr



		end start
