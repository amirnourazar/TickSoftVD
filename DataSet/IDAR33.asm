

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\pamaddnoise.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00001148 (   4424.)
; Section size in file		: 00001200 (   4608.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		and	esp, 0FFFFFFF0h
		mov	eax, ds:dword_404000
		test	eax, eax
		jz	short loc_401013
		int	3		; Trap to Debugger

loc_401013:				; CODE XREF: start+10j
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_401050
		call	sub_401D60
		leave
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401050	proc near		; DATA XREF: start+33o

var_390		= qword	ptr -390h
var_388		= dword	ptr -388h
var_384		= dword	ptr -384h
var_380		= dword	ptr -380h
var_378		= qword	ptr -378h
var_368		= qword	ptr -368h
var_358		= qword	ptr -358h
var_350		= qword	ptr -350h
var_348		= dword	ptr -348h
var_344		= dword	ptr -344h
var_340		= dword	ptr -340h
var_33C		= dword	ptr -33Ch
var_338		= dword	ptr -338h
var_334		= dword	ptr -334h
var_330		= qword	ptr -330h
var_324		= dword	ptr -324h
var_320		= dword	ptr -320h
var_31C		= dword	ptr -31Ch
var_318		= dword	ptr -318h
var_314		= dword	ptr -314h
var_310		= dword	ptr -310h
var_30C		= dword	ptr -30Ch
var_308		= dword	ptr -308h
var_304		= dword	ptr -304h
var_300		= dword	ptr -300h
var_2FC		= dword	ptr -2FCh
var_2F8		= qword	ptr -2F8h
var_2F0		= dword	ptr -2F0h
var_2EC		= dword	ptr -2ECh
var_2E8		= dword	ptr -2E8h
var_2E4		= dword	ptr -2E4h
var_2E0		= word ptr -2E0h
var_2DE		= word ptr -2DEh
var_2DC		= dword	ptr -2DCh
var_2D8		= dword	ptr -2D8h
var_2D4		= dword	ptr -2D4h
var_2D0		= dword	ptr -2D0h
var_2CC		= dword	ptr -2CCh
var_2C8		= dword	ptr -2C8h
var_2B8		= dword	ptr -2B8h
var_2B4		= dword	ptr -2B4h
var_2B0		= dword	ptr -2B0h
var_2AC		= dword	ptr -2ACh
var_2A8		= dword	ptr -2A8h
var_298		= dword	ptr -298h
var_294		= dword	ptr -294h
var_290		= dword	ptr -290h
var_28C		= dword	ptr -28Ch
var_288		= dword	ptr -288h
var_278		= dword	ptr -278h
var_270		= dword	ptr -270h
var_148		= dword	ptr -148h
var_134		= dword	ptr -134h
var_130		= dword	ptr -130h
var_12C		= dword	ptr -12Ch
var_128		= dword	ptr -128h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	eax, 10h
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 37Ch
		mov	esi, [ebp+arg_4]
		and	esp, 0FFFFFFF0h
		call	sub_401D30
		call	__main
		fld	ds:flt_4033EC
		mov	eax, offset aGaussian ;	"gaussian"
		mov	ecx, offset aImpulse ; "impulse"
		fld	ds:flt_4033F0
		mov	[ebp+var_298], eax
		mov	edx, offset aLaplacian ; "laplacian"
		xor	eax, eax
		fld	ds:flt_4033F4
		fxch	st(2)
		mov	edi, offset aMultiplicative ; "multiplicative_gaussian"
		mov	ebx, offset aPoisson ; "poisson"
		fstp	[ebp+var_304]
		fstp	[ebp+var_308]
		fld	ds:flt_4033F8
		fld	ds:flt_4033FC
		fxch	st(2)
		fstp	[ebp+var_30C]
		fld	ds:flt_403400
		fxch	st(1)
		mov	[ebp+var_294], ecx
		mov	ecx, 1
		mov	[ebp+var_290], edx
		mov	edx, 2
		mov	[ebp+var_28C], edi
		mov	edi, 3
		mov	[ebp+var_288], ebx
		mov	ebx, 4
		mov	[ebp+var_2B8], eax
		mov	eax, 1
		mov	[ebp+var_2B4], ecx
		mov	ecx, 1
		mov	[ebp+var_2B0], edx
		mov	edx, 1
		mov	[ebp+var_2AC], edi
		mov	edi, 1
		mov	[ebp+var_2A8], ebx
		mov	ebx, 1
		mov	[ebp+var_2D8], eax
		lea	eax, [ebp+arg_0]
		mov	[ebp+var_2D4], ecx
		mov	[ebp+var_2D0], edx
		fstp	[ebp+var_310]
		fxch	st(1)
		fstp	[ebp+var_314]
		fstp	[ebp+var_318]
		mov	[ebp+var_2C8], ebx
		mov	ebx, 1
		mov	[esp+388h+var_388], eax
		mov	[ebp+var_2CC], edi
		mov	[esp+388h+var_384], esi
		call	pnm_init
		mov	[esp+388h+var_388], 0
		call	time
		mov	[ebp+var_300], eax
		call	getpid
		xor	[ebp+var_300], eax
		xor	ecx, ecx
		mov	edx, [ebp+arg_0]
		mov	[ebp+var_2FC], ecx
		cmp	ebx, edx
		jge	loc_40149A
		mov	eax, [esi+4]
		cmp	byte ptr [eax],	2Dh
		jz	loc_4012B7

loc_4011B3:				; CODE XREF: sub_401050+26Bj
					; sub_401050+2CBj
		cmp	ebx, edx
		jge	loc_40149A
		mov	esi, [esi+ebx*4]
		inc	ebx

loc_4011BF:				; CODE XREF: sub_401050+44Fj
		cmp	ebx, edx
		jz	short loc_4011CF
		mov	[esp+388h+var_388], offset aTypeNoise_type ; "[-type noise_type] [-lsigma x] [-mgsigm"...
		call	pm_usage

loc_4011CF:				; CODE XREF: sub_401050+171j
		mov	ebx, [ebp+var_300]
		lea	edi, [ebp+var_148]
		mov	[esp+388h+var_388], ebx
		call	srand
		mov	[esp+388h+var_388], esi
		mov	esi, 128h
		call	pm_openr
		mov	[esp+388h+var_388], eax
		mov	[esp+388h+var_380], esi
		lea	esi, [ebp+var_278]
		mov	[esp+388h+var_384], edi
		lea	edi, [ebp+var_148]
		call	pnm_readpaminit
		lea	ecx, [ebp+var_278]
		mov	edx, 12Ch
		lea	eax, [ebp+var_148]
		mov	[esp+388h+var_388], ecx
		mov	[esp+388h+var_380], edx
		mov	[esp+388h+var_384], eax
		call	memcpy
		call	__getreent
		mov	ebx, [eax+8]
		mov	[esp+388h+var_388], esi
		mov	[ebp+var_270], ebx
		xor	ebx, ebx
		call	pnm_writepaminit
		mov	[esp+388h+var_388], edi
		call	pnm_allocpamrow
		mov	[ebp+var_2E8], eax
		lea	edx, [ebp+var_148]
		mov	[esp+388h+var_388], edx
		call	pnm_allocpamrow
		mov	[ebp+var_2EC], eax
		mov	ecx, [ebp+var_128]
		xor	eax, eax
		push	eax
		mov	esi, [ebp+var_134]
		mov	[ebp+var_2F0], ebx
		push	ecx
		fild	[esp+390h+var_390]
		add	esp, 8
		test	esi, esi
		fstp	[ebp+var_2F8]
		jnz	loc_40143C

loc_401291:				; CODE XREF: sub_401050+3E6j
		mov	eax, [ebp+var_2EC]
		mov	[esp+388h+var_388], eax
		call	pm_freerow
		mov	ecx, [ebp+var_2E8]
		mov	[esp+388h+var_388], ecx
		call	pm_freerow
		lea	esp, [ebp+var_C]
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4012B7:				; CODE XREF: sub_401050+15Dj
					; sub_401050+2C9j
		cmp	byte ptr [eax+1], 0
		jz	loc_4011B3
		mov	[esp+388h+var_388], eax
		mov	edx, 3
		mov	edi, offset aLambda ; "-lambda"
		mov	[esp+388h+var_380], edx
		mov	[esp+388h+var_384], edi
		call	pm_keymatch
		test	eax, eax
		jz	loc_4014A4
		inc	ebx
		cmp	ebx, [ebp+arg_0]
		jge	loc_4014F2
		mov	eax, [esi+ebx*4]
		cmp	byte ptr [eax],	2Dh
		jz	loc_4019CF

loc_4012F9:				; CODE XREF: sub_401050+4BDj
		mov	[esp+388h+var_388], eax
		call	atof
		fstp	[ebp+var_304]

loc_401307:				; CODE XREF: sub_401050+49Dj
					; sub_401050+97Aj ...
		mov	edx, [ebp+arg_0]
		inc	ebx
		cmp	ebx, edx
		jge	loc_40149A
		mov	eax, [esi+ebx*4]
		cmp	byte ptr [eax],	2Dh
		jz	short loc_4012B7
		jmp	loc_4011B3
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401320:				; CODE XREF: sub_401050+443j
					; DATA XREF: .rdata:00403420o
		mov	ebx, [ebp+var_2E8]
		mov	ecx, [ebp+var_2EC]
		mov	edx, [ebp+var_128]
		mov	eax, [ebx+edi*4]
		mov	[ebp+var_334], edx
		mov	ebx, [eax+esi*4]
		mov	eax, [ecx+edi*4]
		lea	edx, [eax+esi*4]
		mov	[ebp+var_338], edx
		call	rand
		fld	ds:flt_4033F4
		and	eax, 7FFFh
		push	eax
		fild	dword ptr [esp+38Ch+var_390+4]
		add	esp, 4
		fdiv	ds:dbl_403000
		fcom	st(1)
		fnstsw	ax
		sahf
		ja	loc_4018F2
		fstp	st(1)
		fcom	ds:dbl_403008
		fnstsw	ax
		sahf
		ja	loc_401964
		fstp	st
		mov	ecx, ebx
		xor	ebx, ebx
		push	ebx
		push	ecx
		fild	[esp+390h+var_390]
		add	esp, 8
		fsub	[ebp+var_2F8]

loc_401397:				; CODE XREF: sub_401050+8C9j
					; sub_401050+90Fj ...
		fnstcw	[ebp+var_2DE]
		movzx	ebx, [ebp+var_2DE]
		or	bx, 0C00h
		mov	[ebp+var_2E0], bx
		fldcw	[ebp+var_2E0]
		fistp	[ebp+var_2E4]
		fldcw	[ebp+var_2DE]
		mov	ecx, [ebp+var_2E4]
		mov	eax, ecx
		not	eax
		sar	eax, 1Fh
		and	eax, ecx
		cmp	eax, [ebp+var_334]
		jbe	short loc_4013DF
		mov	eax, [ebp+var_334]

loc_4013DF:				; CODE XREF: sub_401050+387j
		mov	edx, [ebp+var_338]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_4013F0:				; CODE XREF: sub_401050+5F3j
					; sub_401050+6F5j ...
		mov	[edx], eax

loc_4013F2:				; CODE XREF: sub_401050+772j
					; sub_401050+8DEj ...
		mov	eax, [ebp+var_12C]

loc_4013F8:				; CODE XREF: sub_401050+437j
		inc	esi
		cmp	eax, esi
		ja	loc_401480
		mov	edx, [ebp+var_130]

loc_401407:				; CODE XREF: sub_401050+425j
		inc	edi
		cmp	edx, edi
		ja	short loc_401470

loc_40140C:				; CODE XREF: sub_401050+40Fj
		mov	edx, [ebp+var_2EC]
		lea	esi, [ebp+var_278]
		mov	[esp+388h+var_388], esi
		mov	[esp+388h+var_384], edx
		call	pnm_writepamrow
		inc	[ebp+var_2F0]
		mov	edi, [ebp+var_2F0]
		cmp	[ebp+var_134], edi
		jbe	loc_401291

loc_40143C:				; CODE XREF: sub_401050+23Bj
		mov	eax, [ebp+var_2E8]
		lea	ecx, [ebp+var_148]
		xor	edi, edi
		mov	[esp+388h+var_388], ecx
		mov	[esp+388h+var_384], eax
		call	pnm_readpamrow
		mov	edx, [ebp+var_130]
		cmp	edx, 0
		jbe	short loc_40140C
		mov	eax, [ebp+var_12C]
		mov	esi, esi
		lea	edi, [edi+0]

loc_401470:				; CODE XREF: sub_401050+3BAj
		xor	esi, esi
		cmp	eax, 0
		jbe	short loc_401407
		mov	esi, esi
		lea	edi, [edi+0]

loc_401480:				; CODE XREF: sub_401050+3ABj
		cmp	[ebp+var_2FC], 4
		ja	loc_4013F8
		mov	edx, [ebp+var_2FC]
		jmp	ds:off_403418[edx*4]
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40149A:				; CODE XREF: sub_401050+151j
					; sub_401050+165j ...
		mov	esi, offset asc_4030CB ; "-"
		jmp	loc_4011BF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4014A4:				; CODE XREF: sub_401050+28Dj
		mov	eax, offset aLsigma ; "-lsigma"
		mov	edi, 3
		mov	[esp+388h+var_380], edi
		mov	[esp+388h+var_384], eax
		mov	ecx, [esi+ebx*4]
		mov	[esp+388h+var_388], ecx
		call	pm_keymatch
		test	eax, eax
		jz	loc_401985
		inc	ebx
		cmp	ebx, [ebp+arg_0]
		jge	loc_4018D2
		mov	eax, [esi+ebx*4]
		cmp	byte ptr [eax],	2Dh
		jz	loc_4019E4

loc_4014DF:				; CODE XREF: sub_401050+89Dj
		mov	[esp+388h+var_388], eax
		call	atof
		fstp	[ebp+var_308]
		jmp	loc_401307
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4014F2:				; CODE XREF: sub_401050+297j
		mov	[esp+388h+var_388], offset aIncorrectNumbe ; "incorrect	number of arguments for	-lamb"...
		call	pm_message

loc_4014FE:				; CODE XREF: sub_401050+98Fj
		mov	[esp+388h+var_388], offset aTypeNoise_type ; "[-type noise_type] [-lsigma x] [-mgsigm"...
		call	pm_usage
		mov	eax, [esi+ebx*4]
		jmp	loc_4012F9
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401512:				; CODE XREF: sub_401050+443j
					; DATA XREF: .rdata:00403428o
		mov	ebx, [ebp+var_128]
		fld1
		mov	ecx, [ebp+var_2E8]
		mov	edx, [ebp+var_2EC]
		mov	[ebp+var_344], ebx
		mov	ebx, [ecx+edi*4]
		mov	eax, [edx+edi*4]
		xor	edx, edx
		lea	ecx, [eax+esi*4]
		mov	eax, [ebx+esi*4]
		push	edx
		xor	ebx, ebx
		mov	[ebp+var_348], ecx
		push	eax
		fild	[esp+390h+var_390]
		add	esp, 8
		fmul	[ebp+var_304]
		fldl2e
		fxch	st(1)
		fchs
		fmulp	st(1), st
		fld	st
		frndint
		fsub	st(1), st
		fxch	st(1)
		f2xm1
		faddp	st(2), st
		fld1
		fxch	st(2)
		fscale
		fstp	st(1)
		fxch	st(1)
		fstp	[ebp+var_358]
		fstp	[ebp+var_350]
		call	rand
		fld	[ebp+var_358]
		and	eax, 7FFFh
		fdiv	ds:dbl_403000
		push	eax
		fild	dword ptr [esp+38Ch+var_390+4]
		add	esp, 4
		jmp	short loc_4015C8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_4015A0:				; CODE XREF: sub_401050+58Fj
		fstp	[ebp+var_368]
		call	rand
		fld	[ebp+var_368]
		and	eax, 7FFFh
		inc	ebx
		push	eax
		fld1
		fdiv	ds:dbl_403000
		fild	dword ptr [esp+38Ch+var_390+4]
		add	esp, 4
		fmulp	st(1), st

loc_4015C8:				; CODE XREF: sub_401050+547j
		fmulp	st(1), st
		fstp	[ebp+var_2DC]
		fld	[ebp+var_2DC]
		fcom	[ebp+var_350]
		fnstsw	ax
		sahf
		ja	short loc_4015A0
		fstp	st
		fnstcw	[ebp+var_2DE]
		mov	eax, ebx
		xor	ebx, ebx
		push	ebx
		push	eax
		fild	[esp+390h+var_390]
		add	esp, 8
		fdiv	[ebp+var_304]
		movzx	ecx, [ebp+var_2DE]
		or	cx, 0C00h
		mov	[ebp+var_2E0], cx
		fldcw	[ebp+var_2E0]
		fistp	[ebp+var_2E4]
		fldcw	[ebp+var_2DE]
		mov	edx, [ebp+var_2E4]
		mov	eax, edx
		not	eax
		sar	eax, 1Fh
		and	eax, edx
		cmp	eax, [ebp+var_344]
		jbe	short loc_40163D
		mov	eax, [ebp+var_344]

loc_40163D:				; CODE XREF: sub_401050+5E5j
		mov	edx, [ebp+var_348]
		jmp	loc_4013F0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401648:				; CODE XREF: sub_401050+443j
					; DATA XREF: .rdata:00403424o
		mov	ebx, [ebp+var_2E8]
		mov	ecx, [ebp+var_2EC]
		mov	edx, [ebp+var_128]
		mov	eax, [ebx+edi*4]
		mov	[ebp+var_33C], edx
		mov	ebx, [eax+esi*4]
		mov	eax, [ecx+edi*4]
		lea	edx, [eax+esi*4]
		mov	[ebp+var_340], edx
		call	rand
		fld	[ebp+var_2F8]
		and	eax, 7FFFh
		push	eax
		fild	dword ptr [esp+38Ch+var_390+4]
		add	esp, 4
		fdiv	ds:dbl_403000
		fcom	ds:dbl_403008
		fnstsw	ax
		sahf
		jbe	loc_40191E
		fstp	st(1)
		fldln2
		fxch	st(1)
		fyl2x
		fmul	ds:flt_403404
		fsqrt

loc_4016AE:				; CODE XREF: sub_401050+8D0j
		fstp	[ebp+var_368]
		call	rand
		fld	[ebp+var_368]
		and	eax, 7FFFh
		mov	ecx, ebx
		push	eax
		xor	ebx, ebx
		fild	dword ptr [esp+38Ch+var_390+4]
		fdiv	ds:dbl_403000
		mov	dword ptr [esp+38Ch+var_390+4],	ebx
		push	ecx
		fnstcw	[ebp+var_2DE]
		movzx	eax, [ebp+var_2DE]
		or	ax, 0C00h
		mov	[ebp+var_2E0], ax
		fmul	ds:dbl_403408
		fcos
		fmulp	st(1), st
		fild	[esp+390h+var_390]
		add	esp, 8
		push	ebx
		push	ecx
		fild	[esp+390h+var_390]
		add	esp, 8
		fmul	[ebp+var_30C]
		fmulp	st(2), st
		faddp	st(1), st
		fldcw	[ebp+var_2E0]
		fistp	[ebp+var_2E4]
		fldcw	[ebp+var_2DE]
		mov	ecx, [ebp+var_2E4]
		mov	eax, ecx
		not	eax
		sar	eax, 1Fh
		and	eax, ecx
		cmp	eax, [ebp+var_33C]
		jbe	short loc_40173F
		mov	eax, [ebp+var_33C]

loc_40173F:				; CODE XREF: sub_401050+6E7j
		mov	edx, [ebp+var_340]
		jmp	loc_4013F0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40174A:				; CODE XREF: sub_401050+443j
					; DATA XREF: .rdata:0040341Co
		fld	ds:flt_4033F4
		fld1
		fxch	st(1)
		mov	edx, [ebp+var_2EC]
		fmul	[ebp+var_318]
		mov	ebx, [ebp+var_128]
		fld	st(1)
		fstp	[ebp+var_368]
		mov	ecx, [edx+edi*4]
		mov	[ebp+var_324], ebx
		fsub	st(1), st
		lea	ebx, [ecx+esi*4]
		fstp	[ebp+var_378]
		fstp	[ebp+var_330]
		call	rand
		fld	[ebp+var_368]
		and	eax, 7FFFh
		fdiv	ds:dbl_403000
		push	eax
		fild	dword ptr [esp+38Ch+var_390+4]
		add	esp, 4
		fld	[ebp+var_378]
		fxch	st(1)
		fmulp	st(2), st
		fcomp	st(1)
		fnstsw	ax
		sahf
		jbe	loc_401925
		fstp	st
		mov	dword ptr [ebx], 0
		jmp	loc_4013F2
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4017C7:				; CODE XREF: sub_401050+443j
					; DATA XREF: .rdata:00403418o
		mov	edx, [ebp+var_128]
		mov	ebx, [ebp+var_2E8]
		mov	eax, [ebp+var_2EC]
		mov	[ebp+var_31C], edx
		mov	ecx, [ebx+edi*4]
		mov	edx, [eax+edi*4]
		mov	ebx, [ecx+esi*4]
		lea	ecx, [edx+esi*4]
		mov	[ebp+var_320], ecx
		call	rand
		and	eax, 7FFFh
		push	eax
		fild	dword ptr [esp+38Ch+var_390+4]
		add	esp, 4
		fdiv	ds:dbl_403000
		fcom	ds:dbl_403410
		fnstsw	ax
		sahf
		jnz	short loc_401817
		fstp	st
		fld1

loc_401817:				; CODE XREF: sub_401050+7C1j
		fstp	[ebp+var_368]
		call	rand
		fld	[ebp+var_368]
		and	eax, 7FFFh
		mov	ecx, ebx
		push	eax
		fldln2
		fild	dword ptr [esp+38Ch+var_390+4]
		xor	ebx, ebx
		fnstcw	[ebp+var_2DE]
		fdiv	ds:dbl_403000
		fxch	st(2)
		mov	dword ptr [esp+38Ch+var_390+4],	ebx
		push	ecx
		movzx	eax, [ebp+var_2DE]
		or	ax, 0C00h
		mov	[ebp+var_2E0], ax
		fyl2x
		fxch	st(1)
		fmul	ds:dbl_403408
		fxch	st(1)
		fmul	ds:flt_403404
		fild	[esp+390h+var_390]
		add	esp, 8
		fld	st(2)
		fcos
		fxch	st(2)
		fsqrt
		fxch	st(3)
		fsin
		fxch	st(2)
		fmul	st, st(3)
		fxch	st(3)
		fmulp	st(2), st
		fld	st
		fsqrt
		fmul	[ebp+var_310]
		fxch	st(2)
		fmul	[ebp+var_314]
		fxch	st(2)
		fmulp	st(3), st
		faddp	st(2), st
		faddp	st(1), st
		fldcw	[ebp+var_2E0]
		fistp	[ebp+var_2E4]
		fldcw	[ebp+var_2DE]
		mov	eax, [ebp+var_2E4]
		cmp	eax, [ebp+var_31C]
		jbe	short loc_4018C7
		mov	eax, [ebp+var_31C]

loc_4018C7:				; CODE XREF: sub_401050+86Fj
		mov	edx, [ebp+var_320]
		jmp	loc_4013F0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4018D2:				; CODE XREF: sub_401050+47Dj
		mov	[esp+388h+var_388], offset aIncorrectNum_0 ; "incorrect	number of arguments for	-lsig"...
		call	pm_message

loc_4018DE:				; CODE XREF: sub_401050+9A4j
		mov	[esp+388h+var_388], offset aTypeNoise_type ; "[-type noise_type] [-lsigma x] [-mgsigm"...
		call	pm_usage
		mov	eax, [esi+ebx*4]
		jmp	loc_4014DF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4018F2:				; CODE XREF: sub_401050+31Cj
		fld1
		fsubrp	st(1), st
		fxch	st(1)
		fmul	ds:dbl_403008
		fcomp	st(1)
		fnstsw	ax
		sahf
		jb	short loc_401941
		fstp	st
		mov	ecx, ebx
		xor	ebx, ebx
		push	ebx
		push	ecx
		fild	[esp+390h+var_390]
		add	esp, 8
		fadd	[ebp+var_2F8]
		jmp	loc_401397
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40191E:				; CODE XREF: sub_401050+648j
		fstp	st
		jmp	loc_4016AE
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401925:				; CODE XREF: sub_401050+764j
		fcomp	[ebp+var_330]
		fnstsw	ax
		sahf
		jb	loc_4013F2
		mov	ecx, [ebp+var_324]
		mov	[ebx], ecx
		jmp	loc_4013F2
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401941:				; CODE XREF: sub_401050+8B3j
		fld	st
		xor	edx, edx
		faddp	st(1), st
		push	edx
		fldln2
		fxch	st(1)
		push	ebx
		fyl2x
		fild	[esp+390h+var_390]
		fxch	st(1)
		add	esp, 8
		fmul	[ebp+var_308]
		fsubp	st(1), st
		jmp	loc_401397
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401964:				; CODE XREF: sub_401050+32Dj
		fadd	st, st
		xor	edx, edx
		fldln2
		fxch	st(1)
		push	edx
		fyl2x
		push	ebx
		fild	[esp+390h+var_390]
		fxch	st(1)
		add	esp, 8
		fmul	[ebp+var_308]
		faddp	st(1), st
		jmp	loc_401397
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401985:				; CODE XREF: sub_401050+473j
		mov	eax, 2
		mov	ecx, offset aMgsigma ; "-mgsigma"
		mov	[esp+388h+var_380], eax
		mov	[esp+388h+var_384], ecx
		mov	edx, [esi+ebx*4]
		mov	[esp+388h+var_388], edx
		call	pm_keymatch
		test	eax, eax
		jz	short loc_4019F9
		inc	ebx
		cmp	ebx, [ebp+arg_0]
		jge	loc_401A67
		mov	eax, [esi+ebx*4]
		cmp	byte ptr [eax],	2Dh
		jz	loc_401A43

loc_4019BC:				; CODE XREF: sub_401050+A12j
		mov	[esp+388h+var_388], eax
		call	atof
		fstp	[ebp+var_30C]
		jmp	loc_401307
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019CF:				; CODE XREF: sub_401050+2A3j
		mov	[esp+388h+var_384], eax
		mov	[esp+388h+var_388], offset aInvalidArgumen ; "invalid argument to -lambda option: %s"
		call	pm_message
		jmp	loc_4014FE
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019E4:				; CODE XREF: sub_401050+489j
		mov	[esp+388h+var_384], eax
		mov	[esp+388h+var_388], offset aInvalidArgum_0 ; "invalid argument to -lsigma option: %s"
		call	pm_message
		jmp	loc_4018DE
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019F9:				; CODE XREF: sub_401050+954j
		mov	ecx, 3
		mov	edx, offset aSeed ; "-seed"
		mov	[esp+388h+var_380], ecx
		mov	[esp+388h+var_384], edx
		mov	edi, [esi+ebx*4]
		mov	[esp+388h+var_388], edi
		call	pm_keymatch
		test	eax, eax
		jz	short loc_401A75
		inc	ebx
		cmp	ebx, [ebp+arg_0]
		jge	loc_401ADF
		mov	eax, [esi+ebx*4]
		cmp	byte ptr [eax],	2Dh
		jz	loc_401ABB

loc_401A30:				; CODE XREF: sub_401050+A8Aj
		mov	[esp+388h+var_388], eax
		call	atoi
		mov	[ebp+var_300], eax
		jmp	loc_401307
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A43:				; CODE XREF: sub_401050+966j
		mov	[esp+388h+var_384], eax
		mov	[esp+388h+var_388], offset aInvalidArgum_1 ; "invalid argument to -mgsigma option: %s"...
		call	pm_message

loc_401A53:				; CODE XREF: sub_401050+A23j
		mov	[esp+388h+var_388], offset aTypeNoise_type ; "[-type noise_type] [-lsigma x] [-mgsigm"...
		call	pm_usage
		mov	eax, [esi+ebx*4]
		jmp	loc_4019BC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A67:				; CODE XREF: sub_401050+95Aj
		mov	[esp+388h+var_388], offset aIncorrectNum_1 ; "incorrect	number of arguments for	-mgsi"...
		call	pm_message
		jmp	short loc_401A53
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A75:				; CODE XREF: sub_401050+9C8j
		mov	edx, 7
		mov	edi, offset aSigma1 ; "-sigma1"
		mov	[esp+388h+var_380], edx
		mov	[esp+388h+var_384], edi
		mov	eax, [esi+ebx*4]
		mov	[esp+388h+var_388], eax
		call	pm_keymatch
		test	eax, eax
		jz	loc_401B1C

loc_401A9A:				; CODE XREF: sub_401050+AEBj
		inc	ebx
		cmp	ebx, [ebp+arg_0]
		jge	short loc_401B0E
		mov	eax, [esi+ebx*4]
		cmp	byte ptr [eax],	2Dh
		jz	short loc_401AED

loc_401AA8:				; CODE XREF: sub_401050+ABCj
		mov	[esp+388h+var_388], eax
		call	atof
		fstp	[ebp+var_310]
		jmp	loc_401307
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401ABB:				; CODE XREF: sub_401050+9DAj
		mov	[esp+388h+var_384], eax
		mov	[esp+388h+var_388], offset aInvalidArgum_2 ; "invalid argument to -seed	option:	%s"
		call	pm_message

loc_401ACB:				; CODE XREF: sub_401050+A9Bj
		mov	[esp+388h+var_388], offset aTypeNoise_type ; "[-type noise_type] [-lsigma x] [-mgsigm"...
		call	pm_usage
		mov	eax, [esi+ebx*4]
		jmp	loc_401A30
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401ADF:				; CODE XREF: sub_401050+9CEj
		mov	[esp+388h+var_388], offset aIncorrectNum_2 ; "incorrect	number of arguments for	-seed"...
		call	pm_message
		jmp	short loc_401ACB
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401AED:				; CODE XREF: sub_401050+A56j
		mov	[esp+388h+var_384], eax
		mov	[esp+388h+var_388], offset aInvalidArgum_3 ; "invalid argument to -sigma1 option: %s"
		call	pm_message

loc_401AFD:				; CODE XREF: sub_401050+ACAj
		mov	[esp+388h+var_388], offset aTypeNoise_type ; "[-type noise_type] [-lsigma x] [-mgsigm"...
		call	pm_usage
		mov	eax, [esi+ebx*4]
		jmp	short loc_401AA8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B0E:				; CODE XREF: sub_401050+A4Ej
		mov	[esp+388h+var_388], offset aIncorrectNum_3 ; "incorrect	number of arguments for	-sigm"...
		call	pm_message
		jmp	short loc_401AFD
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B1C:				; CODE XREF: sub_401050+A44j
		mov	eax, offset aS1	; "-s1"
		mov	edi, 3
		mov	[esp+388h+var_380], edi
		mov	[esp+388h+var_384], eax
		mov	ecx, [esi+ebx*4]
		mov	[esp+388h+var_388], ecx
		call	pm_keymatch
		test	eax, eax
		jnz	loc_401A9A
		mov	eax, 7
		mov	ecx, offset aSigma2 ; "-sigma2"
		mov	[esp+388h+var_380], eax
		mov	[esp+388h+var_384], ecx
		mov	edx, [esi+ebx*4]
		mov	[esp+388h+var_388], edx
		call	pm_keymatch
		test	eax, eax
		jz	short loc_401B87

loc_401B62:				; CODE XREF: sub_401050+B56j
		inc	ebx
		cmp	ebx, [ebp+arg_0]
		jge	loc_401C12
		mov	eax, [esi+ebx*4]
		cmp	byte ptr [eax],	2Dh
		jz	short loc_401BEE

loc_401B74:				; CODE XREF: sub_401050+BBDj
		mov	[esp+388h+var_388], eax
		call	atof
		fstp	[ebp+var_314]
		jmp	loc_401307
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B87:				; CODE XREF: sub_401050+B10j
		mov	ecx, 3
		mov	edx, offset aS2	; "-s2"
		mov	[esp+388h+var_380], ecx
		mov	[esp+388h+var_384], edx
		mov	edi, [esi+ebx*4]
		mov	[esp+388h+var_388], edi
		call	pm_keymatch
		test	eax, eax
		jnz	short loc_401B62
		mov	edx, 3
		mov	edi, offset aTolerance ; "-tolerance"
		mov	[esp+388h+var_380], edx
		mov	[esp+388h+var_384], edi
		mov	eax, [esi+ebx*4]
		mov	[esp+388h+var_388], eax
		call	pm_keymatch
		test	eax, eax
		jz	loc_401C4F
		inc	ebx
		cmp	ebx, [ebp+arg_0]
		jge	short loc_401C41
		mov	eax, [esi+ebx*4]
		cmp	byte ptr [eax],	2Dh
		jz	short loc_401C20

loc_401BDB:				; CODE XREF: sub_401050+BEFj
		mov	[esp+388h+var_388], eax
		call	atof
		fstp	[ebp+var_318]
		jmp	loc_401307
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401BEE:				; CODE XREF: sub_401050+B22j
		mov	[esp+388h+var_384], eax
		mov	[esp+388h+var_388], offset aInvalidArgum_4 ; "invalid argument to -sigma2 option: %s"
		call	pm_message

loc_401BFE:				; CODE XREF: sub_401050+BCEj
		mov	[esp+388h+var_388], offset aTypeNoise_type ; "[-type noise_type] [-lsigma x] [-mgsigm"...
		call	pm_usage
		mov	eax, [esi+ebx*4]
		jmp	loc_401B74
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C12:				; CODE XREF: sub_401050+B16j
		mov	[esp+388h+var_388], offset aIncorrectNum_4 ; "incorrect	number of arguments for	-sigm"...
		call	pm_message
		jmp	short loc_401BFE
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C20:				; CODE XREF: sub_401050+B89j
		mov	[esp+388h+var_384], eax
		mov	[esp+388h+var_388], offset aInvalidArgum_5 ; "invalid argument to -tolerance option: "...
		call	pm_message

loc_401C30:				; CODE XREF: sub_401050+BFDj
		mov	[esp+388h+var_388], offset aTypeNoise_type ; "[-type noise_type] [-lsigma x] [-mgsigm"...
		call	pm_usage
		mov	eax, [esi+ebx*4]
		jmp	short loc_401BDB
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C41:				; CODE XREF: sub_401050+B81j
		mov	[esp+388h+var_388], offset aIncorrectNum_5 ; "incorrect	number of arguments for	-tole"...
		call	pm_message
		jmp	short loc_401C30
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C4F:				; CODE XREF: sub_401050+B77j
		mov	eax, offset aType ; "-type"
		mov	edi, 3
		mov	[esp+388h+var_380], edi
		mov	[esp+388h+var_384], eax
		mov	ecx, [esi+ebx*4]
		mov	[esp+388h+var_388], ecx
		call	pm_keymatch
		test	eax, eax
		jz	short loc_401CB1
		inc	ebx
		cmp	ebx, [ebp+arg_0]
		jge	loc_401D14
		mov	eax, [esi+ebx*4]
		cmp	byte ptr [eax],	2Dh
		jz	short loc_401CF3

loc_401C82:				; CODE XREF: sub_401050+CBFj
		xor	edi, edi

loc_401C84:				; CODE XREF: sub_401050+C5Fj
		cmp	edi, 4
		jg	short loc_401CC2
		mov	eax, [ebp+edi*4+var_2D8]
		mov	ecx, [ebp+edi*4+var_298]
		mov	[esp+388h+var_380], eax
		mov	[esp+388h+var_384], ecx
		mov	edx, [esi+ebx*4]
		mov	[esp+388h+var_388], edx
		call	pm_keymatch
		test	eax, eax
		jnz	short loc_401CE1
		inc	edi
		jmp	short loc_401C84
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401CB1:				; CODE XREF: sub_401050+C1Ej
		mov	[esp+388h+var_388], offset aTypeNoise_type ; "[-type noise_type] [-lsigma x] [-mgsigm"...
		call	pm_usage
		jmp	loc_401307
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401CC2:				; CODE XREF: sub_401050+C37j
		mov	edx, [esi+ebx*4]
		mov	[esp+388h+var_388], offset aInvalidArgum_6 ; "invalid argument to -type	option:	%s"
		mov	[esp+388h+var_384], edx
		call	pm_message
		mov	[esp+388h+var_388], offset aTypeNoise_type ; "[-type noise_type] [-lsigma x] [-mgsigm"...
		call	pm_usage

loc_401CE1:				; CODE XREF: sub_401050+C5Cj
		mov	edi, [ebp+edi*4+var_2B8]
		mov	[ebp+var_2FC], edi
		jmp	loc_401307
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401CF3:				; CODE XREF: sub_401050+C30j
		mov	[esp+388h+var_384], eax
		mov	[esp+388h+var_388], offset aInvalidArgum_6 ; "invalid argument to -type	option:	%s"
		call	pm_message

loc_401D03:				; CODE XREF: sub_401050+CD0j
		mov	[esp+388h+var_388], offset aTypeNoise_type ; "[-type noise_type] [-lsigma x] [-mgsigm"...
		call	pm_usage
		jmp	loc_401C82
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D14:				; CODE XREF: sub_401050+C24j
		mov	[esp+388h+var_388], offset aIncorrectNum_6 ; "incorrect	number of arguments for	-type"...
		call	pm_message
		jmp	short loc_401D03
sub_401050	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401D30	proc near		; CODE XREF: sub_401050+17p
		push	ecx
		mov	ecx, esp
		add	ecx, 8

loc_401D36:				; CODE XREF: sub_401D30+1Bj
		cmp	eax, 1000h
		jb	short loc_401D4D
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		jmp	short loc_401D36
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D4D:				; CODE XREF: sub_401D30+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		jmp	eax
sub_401D30	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401D60	proc near		; CODE XREF: start+3Ap

var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_C2		= dword	ptr -0C2h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		mov	[esp+18h+var_14], eax
		mov	[esp+18h+var_18], esi
		call	sub_401E50
		sub	esp, 8
		test	eax, eax
		jz	short loc_401D91
		mov	[esp+18h+var_18], 0

loc_401D8B:				; CODE XREF: sub_401D60+56j
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)

loc_401D91:				; CODE XREF: sub_401D60+22j
		sub	esp, 0C0h
		lea	ebx, [esp+0D8h+var_C2+1]
		and	ebx, 0FFFFFFF0h
		mov	dword ptr [ebx], 0
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	sub_401E50
		sub	esp, 8
		mov	[esp+0D8h+var_D8], ebx
		jmp	short loc_401D8B
sub_401D60	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memcpy. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getreent. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION srand. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION atoi. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION atof. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION getpid. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION time. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION rand. PRESS KEYPAD "+" TO	EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401E50	proc near		; CODE XREF: sub_401D60+18p
					; sub_401D60+4Bp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		push	ebx
		sub	esp, 4		; lpModuleName
		mov	ebx, [ebp+arg_4]
		test	ebx, ebx
		jz	loc_401F53

loc_401E64:				; CODE XREF: sub_401E50+11Fj
		mov	dword ptr [ebx+4], 0A8h
		xor	ecx, ecx
		mov	edx, 84h
		mov	dword ptr [ebx+8], 3EDh
		test	eax, eax
		mov	dword ptr [ebx+0Ch], 12h
		mov	[ebx+80h], ecx
		mov	[ebx+84h], edx
		mov	dword ptr [ebx+2Ch], offset dword_402138
		mov	dword ptr [ebx+30h], offset dword_402140
		mov	dword ptr [ebx+14h], offset unk_404014
		jnz	loc_401F41
		mov	eax, ds:_impure_ptr
		mov	[ebx+10h], eax

loc_401EB1:				; CODE XREF: sub_401E50+FEj
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [ebx+48h], offset sub_402060
		mov	dword ptr [ebx+4Ch], offset sub_402050
		mov	[ebx+28h], eax
		mov	eax, [ebp+0]
		mov	dword ptr [ebx+50h], offset sub_402040
		mov	dword ptr [ebx+54h], offset sub_402030
		mov	dword ptr [ebx+24h], offset unk_404010
		mov	[ebx], eax
		mov	dword ptr [ebx+18h], offset loc_402020
		mov	dword ptr [ebx+1Ch], offset loc_402010
		mov	dword ptr [ebx+20h], offset loc_402000
		mov	dword ptr [ebx+44h], offset loc_401FF0
		mov	[esp+8+var_8], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	dword ptr [ebx+34h], offset dbl_403000
		mov	dword ptr [ebx+38h], offset dbl_403000
		mov	dword ptr [ebx+3Ch], offset dword_404000
		mov	dword ptr [ebx+40h], 404040h
		call	sub_401FC0
		mov	eax, 1

loc_401F3A:				; CODE XREF: sub_401E50+116j
		mov	ebx, [ebp+var_4]
		leave
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F41:				; CODE XREF: sub_401E50+53j
		mov	edx, [ebx+0A4h]
		mov	eax, ds:_impure_ptr
		mov	[eax], edx
		jmp	loc_401EB1
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F53:				; CODE XREF: sub_401E50+Ej
		mov	[esp+8+var_8], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_401F3A
		mov	ebx, edx
		mov	eax, 1
		jmp	loc_401E64
sub_401E50	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401F90	proc near		; CODE XREF: sub_401FC0+1Fp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ebx, [ebp+arg_4]
		jmp	short loc_401FAC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401FA0:				; CODE XREF: sub_401F90+1Ej
		mov	edx, [ecx+4]
		mov	eax, [ecx]
		add	ecx, 8
		add	edx, esi
		add	[edx], eax

loc_401FAC:				; CODE XREF: sub_401F90+Ej
		cmp	ecx, ebx
		jb	short loc_401FA0
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_401F90	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401FC0	proc near		; CODE XREF: sub_401E50+E0p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	edx, 400000h
		mov	ebp, esp
		mov	eax, offset unk_403430
		sub	esp, 0Ch
		mov	[esp+0Ch+var_4], edx
		mov	[esp+0Ch+var_8], eax
		mov	[esp+0Ch+var_C], offset	unk_403430
		call	sub_401F90
		leave
		retn
sub_401FC0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401FF0:				; DATA XREF: sub_401E50+ABo
		jmp	ds:calloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_402000:				; DATA XREF: sub_401E50+A4o
		jmp	ds:realloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_402010:				; DATA XREF: sub_401E50+9Do
		jmp	ds:free
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_402020:				; DATA XREF: sub_401E50+96o
		jmp	ds:malloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402030	proc near		; DATA XREF: sub_401E50+86o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402030	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402040	proc near		; DATA XREF: sub_401E50+7Fo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402040	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402050	proc near		; DATA XREF: sub_401E50+72o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402050	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402060	proc near		; DATA XREF: sub_401E50+6Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402060	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_freerow. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_keymatch. PRESS KEYPAD	"+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_message. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_openr.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_usage.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_allocpamrow. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_init.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_readpaminit. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_readpamrow. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_writepaminit.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_writepamrow. PRESS KEYPAD "+"	TO EXPAND]
		align 4
dword_402138	dd 0FFFFFFFFh, 0	; DATA XREF: sub_401E50+3Eo
dword_402140	dd 0FFFFFFFFh, 2Fh dup(0) ; DATA XREF: sub_401E50+45o
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 00000430 (   1072.)
; Section size in file		: 00000600 (   1536.)
; Offset to raw	data for section: 00001600
; Flags	40000040: Data Readable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 403000h
dbl_403000	dq 3.2767e4		; DATA XREF: sub_401050+311r
					; sub_401050+53Ar ...
dbl_403008	dq 1.0e-5		; DATA XREF: sub_401050+324r
					; sub_401050+63Fr ...
aGaussian	db 'gaussian',0         ; DATA XREF: sub_401050+27o
aImpulse	db 'impulse',0          ; DATA XREF: sub_401050+2Co
aLaplacian	db 'laplacian',0        ; DATA XREF: sub_401050+3Do
aMultiplicative	db 'multiplicative_gaussian',0 ; DATA XREF: sub_401050+4Co
aPoisson	db 'poisson',0          ; DATA XREF: sub_401050+51o
		align 4
aTypeNoise_type	db '[-type noise_type] [-lsigma x] [-mgsigma x] [-sigma1 x] [-si'
					; DATA XREF: sub_401050+173o
					; sub_401050+4AEo ...
		db 'gma2 x] [-lambda x] [-seed n] [-tolerance ratio] [pgmfile]',0
aLambda		db '-lambda',0          ; DATA XREF: sub_401050+279o
asc_4030CB	db '-',0                ; DATA XREF: sub_401050+44Ao
aLsigma		db '-lsigma',0          ; DATA XREF: sub_401050+454o
		align 4
aIncorrectNumbe	db 'incorrect number of arguments for -lambda option',0
					; DATA XREF: sub_401050+4A2o
		align 4
aIncorrectNum_0	db 'incorrect number of arguments for -lsigma option',0
					; DATA XREF: sub_401050+882o
aMgsigma	db '-mgsigma',0         ; DATA XREF: sub_401050+93Ao
		align 4
aInvalidArgumen	db 'invalid argument to -lambda option: %s',0 ; DATA XREF: sub_401050+983o
		align 4
aInvalidArgum_0	db 'invalid argument to -lsigma option: %s',0 ; DATA XREF: sub_401050+998o
aSeed		db '-seed',0            ; DATA XREF: sub_401050+9AEo
		align 4
aInvalidArgum_1	db 'invalid argument to -mgsigma option: %s',0 ; DATA XREF: sub_401050+9F7o
aIncorrectNum_1	db 'incorrect number of arguments for -mgsigma option',0
					; DATA XREF: sub_401050+A17o
aSigma1		db '-sigma1',0          ; DATA XREF: sub_401050+A2Ao
		align 4
aInvalidArgum_2	db 'invalid argument to -seed option: %s',0 ; DATA XREF: sub_401050+A6Fo
		align 4
aIncorrectNum_2	db 'incorrect number of arguments for -seed option',0
					; DATA XREF: sub_401050+A8Fo
		align 4
aInvalidArgum_3	db 'invalid argument to -sigma1 option: %s',0 ; DATA XREF: sub_401050+AA1o
		align 4
aIncorrectNum_3	db 'incorrect number of arguments for -sigma1 option',0
					; DATA XREF: sub_401050+ABEo
aS1		db '-s1',0              ; DATA XREF: sub_401050+ACCo
aSigma2		db '-sigma2',0          ; DATA XREF: sub_401050+AF6o
aS2		db '-s2',0              ; DATA XREF: sub_401050+B3Co
aTolerance	db '-tolerance',0       ; DATA XREF: sub_401050+B5Do
aInvalidArgum_4	db 'invalid argument to -sigma2 option: %s',0 ; DATA XREF: sub_401050+BA2o
		align 4
aIncorrectNum_4	db 'incorrect number of arguments for -sigma2 option',0
					; DATA XREF: sub_401050+BC2o
		align 4
aInvalidArgum_5	db 'invalid argument to -tolerance option: %s',0
					; DATA XREF: sub_401050+BD4o
		align 4
aIncorrectNum_5	db 'incorrect number of arguments for -tolerance option',0
					; DATA XREF: sub_401050+BF1o
aType		db '-type',0            ; DATA XREF: sub_401050+BFFo
		align 4
aInvalidArgum_6	db 'invalid argument to -type option: %s',0 ; DATA XREF: sub_401050+C75o
					; sub_401050+CA7o
		align 4
aIncorrectNum_6	db 'incorrect number of arguments for -type option',0
					; DATA XREF: sub_401050+CC4o
		align 4
flt_4033EC	dd 5.0000001e-2		; DATA XREF: sub_401050+21r
flt_4033F0	dd 1.0e1		; DATA XREF: sub_401050+31r
flt_4033F4	dd 5.0e-1		; DATA XREF: sub_401050+44r
					; sub_401050+2FFr ...
flt_4033F8	dd 4.0			; DATA XREF: sub_401050+62r
flt_4033FC	dd 2.0e1		; DATA XREF: sub_401050+68r
flt_403400	dd 1.0e-1		; DATA XREF: sub_401050+76r
flt_403404	dd -2.0			; DATA XREF: sub_401050+656r
					; sub_401050+817r
dbl_403408	dq 6.283185307179586	; DATA XREF: sub_401050+69Er
					; sub_401050+80Fr
dbl_403410	dq 0.0			; DATA XREF: sub_401050+7B8r
off_403418	dd offset loc_4017C7	; DATA XREF: sub_401050+443r
		dd offset loc_40174A
		dd offset loc_401320
		dd offset loc_401648
		dd offset loc_401512
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_403430	db    0	;		; DATA XREF: sub_401FC0+8o
					; sub_401FC0+18o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_rdata		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 00000040 (	 64.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 404000h
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
dword_404000	dd ?			; DATA XREF: start+9r sub_401E50+D2o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_404010	db    ?	;		; DATA XREF: sub_401E50+8Do
		db    ?	;
		db    ?	;
		db    ?	;
unk_404014	db    ?	;		; DATA XREF: sub_401E50+4Co
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
_bss		ends

;
; Imports from cygwin1
;
; Section 4. (virtual address 00005000)
; Virtual size			: 00000394 (	916.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001C00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp___getreent:dword ; DATA XREF: __getreentr
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn _impure_ptr:dword	; DATA XREF: sub_401E50+59r
					; sub_401E50+F7r
; double __cdecl _imp_atof(const char *)
		extrn __imp_atof:dword	; DATA XREF: atofr
; int __cdecl _imp_atoi(const char *)
		extrn __imp_atoi:dword	; DATA XREF: atoir
; void *__cdecl	calloc(size_t,size_t)
		extrn calloc:dword	; DATA XREF: .text:00401FF0r
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_401D60+2Br
					; .text:00401F80r
; void __cdecl free(void *)
		extrn free:dword	; DATA XREF: .text:00402010r
		extrn __imp_getpid:dword ; DATA	XREF: getpidr
; void *__cdecl	malloc(size_t)
		extrn malloc:dword	; DATA XREF: .text:00402020r
; void *__cdecl	_imp_memcpy(void *,const void *,size_t)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; int _imp_rand(void)
		extrn __imp_rand:dword	; DATA XREF: randr
; void *__cdecl	realloc(void *,size_t)
		extrn realloc:dword	; DATA XREF: .text:00402000r
; void __cdecl _imp_srand(unsigned int)
		extrn __imp_srand:dword	; DATA XREF: srandr
; time_t __cdecl _imp_time(time_t *)
		extrn __imp_time:dword	; DATA XREF: timer


;
; Imports from KERNEL32
;
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr


;
; Imports from cygnetpbm-10
;
		extrn __imp_pm_freerow:dword ; DATA XREF: pm_freerowr
		extrn __imp_pm_keymatch:dword ;	DATA XREF: pm_keymatchr
		extrn __imp_pm_message:dword ; DATA XREF: pm_messager
		extrn __imp_pm_openr:dword ; DATA XREF:	pm_openrr
		extrn __imp_pm_usage:dword ; DATA XREF:	pm_usager
		extrn __imp_pnm_allocpamrow:dword ; DATA XREF: pnm_allocpamrowr
		extrn __imp_pnm_init:dword ; DATA XREF:	pnm_initr
		extrn __imp_pnm_readpaminit:dword ; DATA XREF: pnm_readpaminitr
		extrn __imp_pnm_readpamrow:dword ; DATA	XREF: pnm_readpamrowr
		extrn __imp_pnm_writepaminit:dword ; DATA XREF:	pnm_writepaminitr
		extrn __imp_pnm_writepamrow:dword ; DATA XREF: pnm_writepamrowr



		end start
