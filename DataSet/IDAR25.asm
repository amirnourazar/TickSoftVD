

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\mcookie.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00001230 (   4656.)
; Section size in file		: 00001400 (   5120.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		and	esp, 0FFFFFFF0h
		mov	eax, ds:dword_405000
		test	eax, eax
		jz	short loc_401013
		int	3		; Trap to Debugger

loc_401013:				; CODE XREF: start+10j
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_401050
		call	sub_401E30
		leave
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401050	proc near		; DATA XREF: start+33o

var_20B4	= dword	ptr -20B4h
var_20B0	= dword	ptr -20B0h
var_20AC	= dword	ptr -20ACh
var_20A4	= dword	ptr -20A4h
var_20A0	= dword	ptr -20A0h
var_209C	= dword	ptr -209Ch
var_2098	= dword	ptr -2098h
var_2090	= dword	ptr -2090h
var_2088	= dword	ptr -2088h
var_1088	= dword	ptr -1088h
var_88		= dword	ptr -88h
var_78		= dword	ptr -78h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	eax, 20BCh
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		call	sub_401E00
		mov	esi, [ebp+arg_0]
		and	esp, 0FFFFFFF0h
		mov	eax, 10h
		mov	ebx, [ebp+arg_4]
		call	sub_401E00
		call	__main
		xor	eax, eax
		mov	[ebp+var_20A0],	eax
		mov	eax, offset unk_404044
		mov	[esp+0Ch+var_8], eax
		mov	[esp+0Ch+var_C], 0
		call	setlocale
		mov	[esp+0Ch+var_C], offset	aCygutils ; "cygutils"
		mov	eax, offset aUsrShareLocale ; "/usr/share/locale"
		mov	[esp+0Ch+var_8], eax
		call	libintl_bindtextdomain
		mov	[esp+0Ch+var_C], offset	aCygutils ; "cygutils"
		call	libintl_textdomain
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_4010C0:				; CODE XREF: sub_401050+96j
					; sub_401050+39Fj
		mov	[esp+0Ch+var_8], ebx
		mov	edi, offset aVf	; "vf:"
		mov	[esp+0Ch+var_4], edi
		mov	[esp+0Ch+var_C], esi
		call	getopt
		cmp	eax, 0FFFFFFFFh
		jz	short loc_401108

loc_4010DA:				; CODE XREF: sub_401050+B6j
		cmp	eax, 66h
		jz	loc_4013E2
		cmp	eax, 76h
		jnz	short loc_4010C0
		inc	ds:dword_405010
		mov	edi, offset aVf	; "vf:"
		mov	[esp+0Ch+var_4], edi
		mov	[esp+0Ch+var_8], ebx
		mov	[esp+0Ch+var_C], esi
		call	getopt
		cmp	eax, 0FFFFFFFFh
		jnz	short loc_4010DA

loc_401108:				; CODE XREF: sub_401050+88j
		lea	eax, [ebp+var_78]
		mov	esi, 8
		lea	ebx, [ebp+var_2098]
		mov	[esp+0Ch+var_C], eax
		call	sub_401530
		mov	[esp+0Ch+var_C], ebx
		lea	eax, [ebp+var_2090]
		mov	[esp+0Ch+var_8], eax
		call	gettimeofday
		mov	[esp+0Ch+var_8], ebx
		lea	edx, [ebp+var_78]
		mov	ebx, 4
		mov	[esp+0Ch+var_C], edx
		mov	[esp+0Ch+var_4], esi
		call	sub_401C00
		call	getppid
		mov	[ebp+var_209C],	eax
		lea	ecx, [ebp+var_78]
		mov	[esp+0Ch+var_4], ebx
		lea	ebx, [ebp+var_209C]
		mov	[esp+0Ch+var_C], ecx
		mov	[esp+0Ch+var_8], ebx
		call	sub_401C00
		call	getpid
		mov	[ebp+var_209C],	eax
		mov	ecx, 4
		lea	eax, [ebp+var_78]
		mov	[esp+0Ch+var_4], ecx
		mov	[esp+0Ch+var_8], ebx
		mov	[esp+0Ch+var_C], eax
		call	sub_401C00
		mov	edx, [ebp+var_20A0]
		test	edx, edx
		jz	loc_401269
		mov	edx, [ebp+var_20A0]
		cmp	byte ptr [edx],	2Dh
		jnz	short loc_4011B2
		cmp	byte ptr [edx+1], 0
		jz	loc_4014D2

loc_4011B2:				; CODE XREF: sub_401050+156j
		xor	eax, eax
		mov	[esp+0Ch+var_8], eax
		mov	ecx, [ebp+var_20A0]
		mov	[esp+0Ch+var_C], ecx
		call	_open64

loc_4011C6:				; CODE XREF: sub_401050+492j
		mov	edi, eax
		xor	eax, eax
		lea	esi, [ebp+var_2088]
		mov	[ebp+var_20B0],	eax
		xor	eax, eax
		test	edi, edi
		mov	[ebp+var_20AC],	eax
		jns	short loc_401209
		jmp	loc_4014E7
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4011E7:				; CODE XREF: sub_401050+1D2j
		mov	[esp+0Ch+var_4], ebx
		lea	ecx, [ebp+var_78]
		mov	[esp+0Ch+var_8], esi
		mov	[esp+0Ch+var_C], ecx
		call	sub_401C00
		mov	eax, ebx
		cdq
		add	[ebp+var_20B0],	ebx
		adc	[ebp+var_20AC],	edx

loc_401209:				; CODE XREF: sub_401050+190j
		mov	[esp+0Ch+var_8], esi
		mov	eax, 1000h
		mov	[esp+0Ch+var_4], eax
		mov	[esp+0Ch+var_C], edi
		call	read
		test	eax, eax
		mov	ebx, eax
		jg	short loc_4011E7
		mov	byte ptr [ebp+var_2088], 0
		mov	eax, 1
		mov	[esp+0Ch+var_4], eax
		lea	eax, [ebp+var_78]
		mov	[esp+0Ch+var_C], eax
		mov	[esp+0Ch+var_8], esi
		call	sub_401C00
		mov	eax, ds:dword_405010
		test	eax, eax
		jnz	loc_401497

loc_401250:				; CODE XREF: sub_401050+47Dj
		mov	eax, [ebp+var_20A0]
		cmp	byte ptr [eax],	2Dh
		jnz	short loc_401261
		cmp	byte ptr [eax+1], 0
		jz	short loc_401269

loc_401261:				; CODE XREF: sub_401050+209j
		mov	[esp+0Ch+var_C], edi
		call	close

loc_401269:				; CODE XREF: sub_401050+147j
					; sub_401050+20Fj ...
		xor	edi, edi
		xor	esi, esi
		mov	[ebp+var_20B4],	edi
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401280:				; CODE XREF: sub_401050+2F6j
		mov	ebx, 4000h
		mov	[esp+0Ch+var_8], ebx
		mov	edx, [ebp+var_20B4]
		mov	eax, dword_403000[edx]
		mov	[esp+0Ch+var_C], eax
		call	_open64
		test	eax, eax
		mov	edi, eax
		js	loc_401453
		mov	ecx, [ebp+var_20B4]
		mov	edx, 1000h
		mov	eax, dword_403008[ecx]
		test	eax, eax
		jz	short loc_4012D0
		cmp	eax, 1000h
		jge	short loc_4012D0
		mov	edx, eax
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_4012D0:				; CODE XREF: sub_401050+26Aj
					; sub_401050+271j
		mov	[esp+0Ch+var_4], edx
		lea	eax, [ebp+var_1088]
		mov	[esp+0Ch+var_8], eax
		mov	[esp+0Ch+var_C], edi
		call	read
		mov	[ebp+var_20A4],	eax
		test	eax, eax
		jle	loc_4013F4
		mov	[esp+0Ch+var_4], eax
		lea	edx, [ebp+var_1088]
		lea	ecx, [ebp+var_78]
		mov	[esp+0Ch+var_8], edx
		mov	[esp+0Ch+var_C], ecx
		call	sub_401C00
		mov	[esp+0Ch+var_C], edi
		call	close
		mov	edx, ds:dword_405010
		test	edx, edx
		jnz	loc_401412

loc_401323:				; CODE XREF: sub_401050+3BCj
					; sub_401050+3FEj
		mov	ecx, [ebp+var_20B4]
		mov	eax, dword_403004[ecx]
		test	eax, eax
		jz	short loc_40133B
		cmp	eax, [ebp+var_20A4]
		jle	short loc_40134C

loc_40133B:				; CODE XREF: sub_401050+2E1j
					; sub_401050+40Aj ...
		add	[ebp+var_20B4],	0Ch
		inc	esi
		cmp	esi, 4
		jbe	loc_401280

loc_40134C:				; CODE XREF: sub_401050+2E9j
		lea	eax, [ebp+var_78]
		xor	esi, esi
		mov	[esp+0Ch+var_8], eax
		lea	eax, [ebp+var_88]
		mov	[esp+0Ch+var_C], eax
		call	sub_401D10
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401370:				; CODE XREF: sub_401050+33Cj
		movzx	eax, byte ptr [ebp+esi+var_88]
		inc	esi
		mov	[esp+0Ch+var_C], offset	a02x ; "%02x"
		mov	[esp+0Ch+var_8], eax
		call	printf
		cmp	esi, 0Fh
		jle	short loc_401370
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+0Ch+var_C], 0Ah
		mov	[esp+0Ch+var_8], eax
		call	putc
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+0Ch+var_C], eax
		call	fflush
		test	eax, eax
		js	loc_401518
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+0Ch+var_C], eax
		call	fclose
		xor	edx, edx
		test	eax, eax
		js	loc_401518
		lea	esp, [ebp+var_C]
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4013E2:				; CODE XREF: sub_401050+8Dj
		mov	eax, ds:optarg
		mov	eax, [eax]
		mov	[ebp+var_20A0],	eax
		jmp	loc_4010C0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4013F4:				; CODE XREF: sub_401050+29Ej
		xor	ecx, ecx
		mov	[ebp+var_20A4],	ecx
		mov	[esp+0Ch+var_C], edi
		call	close
		mov	edx, ds:dword_405010
		test	edx, edx
		jz	loc_401323

loc_401412:				; CODE XREF: sub_401050+2CDj
		mov	[esp+0Ch+var_C], offset	aGotDBytesFromS	; "Got %d bytes	from %s\n"
		call	libintl_gettext
		mov	ebx, eax
		call	__getreent
		mov	ecx, [ebp+var_20B4]
		mov	edx, dword_403000[ecx]
		mov	[esp+0Ch], edx
		mov	edx, [ebp+var_20A4]
		mov	[esp+0Ch+var_8], ebx
		mov	[esp+0Ch+var_4], edx
		mov	eax, [eax+0Ch]
		mov	[esp+0Ch+var_C], eax
		call	fprintf
		jmp	loc_401323
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401453:				; CODE XREF: sub_401050+251j
		mov	eax, ds:dword_405010
		test	eax, eax
		jz	loc_40133B
		mov	[esp+0Ch+var_C], offset	aCouldNotOpenS ; "Could	not open %s\n"
		call	libintl_gettext
		mov	ebx, eax
		call	__getreent
		mov	ecx, [ebp+var_20B4]
		mov	edx, dword_403000[ecx]
		mov	[esp+0Ch+var_8], ebx
		mov	[esp+0Ch+var_4], edx
		mov	eax, [eax+0Ch]
		mov	[esp+0Ch+var_C], eax
		call	fprintf
		jmp	loc_40133B
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401497:				; CODE XREF: sub_401050+1FAj
		mov	[esp+0Ch+var_C], offset	aGotDBytesFromS	; "Got %d bytes	from %s\n"
		call	libintl_gettext
		mov	ebx, eax
		call	__getreent
		mov	edx, [ebp+var_20A0]
		mov	[esp+0Ch], edx
		mov	ecx, [ebp+var_20B0]
		mov	[esp+0Ch+var_8], ebx
		mov	[esp+0Ch+var_4], ecx
		mov	eax, [eax+0Ch]
		mov	[esp+0Ch+var_C], eax
		call	fprintf
		jmp	loc_401250
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4014D2:				; CODE XREF: sub_401050+15Cj
		call	__getreent
		mov	eax, [eax+4]
		mov	[esp+0Ch+var_C], eax
		call	fileno
		jmp	loc_4011C6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4014E7:				; CODE XREF: sub_401050+192j
		mov	[esp+0Ch+var_C], offset	aCouldNotOpenS ; "Could	not open %s\n"
		call	libintl_gettext
		mov	ebx, eax
		call	__getreent
		mov	edx, [ebp+var_20A0]
		mov	[esp+0Ch+var_8], ebx
		mov	[esp+0Ch+var_4], edx
		mov	eax, [eax+0Ch]
		mov	[esp+0Ch+var_C], eax
		call	fprintf
		jmp	loc_401269
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401518:				; CODE XREF: sub_401050+368j
					; sub_401050+382j
		lea	esp, [ebp+var_C]
		mov	edx, 1
		mov	eax, edx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_401050	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401530	proc near		; CODE XREF: sub_401050+C9p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	dword ptr [eax], 67452301h
		mov	dword ptr [eax+4], 0EFCDAB89h
		mov	dword ptr [eax+8], 98BADCFEh
		mov	dword ptr [eax+0Ch], 10325476h
		mov	dword ptr [eax+10h], 0
		mov	dword ptr [eax+14h], 0
		pop	ebp
		retn
sub_401530	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		jmp	short sub_401570
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401570	proc near		; CODE XREF: .text:00401561j
					; sub_401C00+92p ...

var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 40h
		mov	eax, [ebp+arg_0]
		mov	edi, [ebp+arg_4]
		mov	ebx, [eax+8]
		mov	esi, [eax+0Ch]
		mov	ecx, [eax+4]
		mov	edx, ebx
		mov	eax, [edi]
		xor	edx, esi
		and	edx, ecx
		xor	edx, esi
		mov	[ebp+var_10], eax
		add	edx, eax
		mov	eax, [ebp+arg_0]
		add	edx, [eax]
		mov	eax, ecx
		xor	eax, ebx
		sub	edx, 28955B88h
		rol	edx, 7
		add	edx, ecx
		and	eax, edx
		xor	eax, ebx
		mov	[ebp+var_4C], eax
		mov	eax, [edi+4]
		mov	[ebp+var_14], eax
		mov	eax, [ebp+var_4C]
		add	eax, [ebp+var_14]
		lea	esi, [eax+esi-173848AAh]
		rol	esi, 0Ch
		mov	eax, edx
		add	esi, edx
		xor	eax, ecx
		and	eax, esi
		xor	eax, ecx
		mov	[ebp+var_4C], eax
		mov	eax, [edi+8]
		mov	[ebp+var_18], eax
		mov	eax, [ebp+var_4C]
		add	eax, [ebp+var_18]
		lea	ebx, [eax+ebx+242070DBh]
		rol	ebx, 11h
		mov	eax, esi
		add	ebx, esi
		xor	eax, edx
		and	eax, ebx
		xor	eax, edx
		mov	[ebp+var_4C], eax
		mov	eax, [edi+0Ch]
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_4C]
		add	eax, [ebp+var_1C]
		lea	ecx, [eax+ecx-3E423112h]
		rol	ecx, 16h
		mov	eax, ebx
		add	ecx, ebx
		xor	eax, esi
		and	eax, ecx
		xor	eax, esi
		mov	[ebp+var_4C], eax
		mov	eax, [edi+10h]
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_4C]
		add	eax, [ebp+var_20]
		lea	edx, [eax+edx-0A83F051h]
		rol	edx, 7
		mov	eax, ecx
		add	edx, ecx
		xor	eax, ebx
		and	eax, edx
		xor	eax, ebx
		mov	[ebp+var_4C], eax
		mov	eax, [edi+14h]
		mov	[ebp+var_24], eax
		mov	eax, [ebp+var_4C]
		add	eax, [ebp+var_24]
		lea	esi, [eax+esi+4787C62Ah]
		rol	esi, 0Ch
		mov	eax, edx
		add	esi, edx
		xor	eax, ecx
		and	eax, esi
		xor	eax, ecx
		mov	[ebp+var_4C], eax
		mov	eax, [edi+18h]
		mov	[ebp+var_28], eax
		mov	eax, [ebp+var_4C]
		add	eax, [ebp+var_28]
		lea	ebx, [eax+ebx-57CFB9EDh]
		rol	ebx, 11h
		mov	eax, esi
		add	ebx, esi
		xor	eax, edx
		and	eax, ebx
		xor	eax, edx
		mov	[ebp+var_4C], eax
		mov	eax, [edi+1Ch]
		mov	[ebp+var_2C], eax
		mov	eax, [ebp+var_4C]
		add	eax, [ebp+var_2C]
		lea	ecx, [eax+ecx-2B96AFFh]
		rol	ecx, 16h
		mov	eax, ebx
		add	ecx, ebx
		xor	eax, esi
		and	eax, ecx
		xor	eax, esi
		mov	[ebp+var_4C], eax
		mov	eax, [edi+20h]
		mov	[ebp+var_30], eax
		mov	eax, [ebp+var_4C]
		add	eax, [ebp+var_30]
		lea	edx, [eax+edx+698098D8h]
		rol	edx, 7
		mov	eax, ecx
		add	edx, ecx
		xor	eax, ebx
		and	eax, edx
		xor	eax, ebx
		mov	[ebp+var_4C], eax
		mov	eax, [edi+24h]
		mov	[ebp+var_34], eax
		mov	eax, [ebp+var_4C]
		add	eax, [ebp+var_34]
		lea	esi, [eax+esi-74BB0851h]
		rol	esi, 0Ch
		mov	eax, edx
		add	esi, edx
		xor	eax, ecx
		and	eax, esi
		xor	eax, ecx
		mov	[ebp+var_4C], eax
		mov	eax, [edi+28h]
		mov	[ebp+var_38], eax
		mov	eax, [ebp+var_4C]
		add	eax, [ebp+var_38]
		lea	ebx, [eax+ebx-0A44Fh]
		rol	ebx, 11h
		mov	eax, esi
		add	ebx, esi
		xor	eax, edx
		and	eax, ebx
		xor	eax, edx
		mov	[ebp+var_4C], eax
		mov	eax, [edi+2Ch]
		mov	[ebp+var_3C], eax
		mov	eax, [ebp+var_4C]
		add	eax, [ebp+var_3C]
		lea	ecx, [eax+ecx-76A32842h]
		rol	ecx, 16h
		mov	eax, ebx
		add	ecx, ebx
		xor	eax, esi
		and	eax, ecx
		xor	eax, esi
		mov	[ebp+var_4C], eax
		mov	eax, [edi+30h]
		mov	[ebp+var_40], eax
		mov	eax, [ebp+var_4C]
		add	eax, [ebp+var_40]
		lea	edx, [eax+edx+6B901122h]
		rol	edx, 7
		mov	eax, ecx
		add	edx, ecx
		xor	eax, ebx
		and	eax, edx
		xor	eax, ebx
		mov	[ebp+var_4C], eax
		mov	eax, [edi+34h]
		mov	[ebp+var_44], eax
		mov	eax, [ebp+var_4C]
		add	eax, [ebp+var_44]
		lea	esi, [eax+esi-2678E6Dh]
		rol	esi, 0Ch
		mov	eax, edx
		add	esi, edx
		xor	eax, ecx
		and	eax, esi
		xor	eax, ecx
		mov	[ebp+var_4C], eax
		mov	eax, [edi+38h]
		mov	edi, [edi+3Ch]
		mov	[ebp+var_48], eax
		mov	eax, [ebp+var_4C]
		add	eax, [ebp+var_48]
		lea	ebx, [eax+ebx-5986BC72h]
		rol	ebx, 11h
		mov	eax, esi
		add	ebx, esi
		xor	eax, edx
		and	eax, ebx
		xor	eax, edx
		add	eax, edi
		lea	ecx, [eax+ecx+49B40821h]
		rol	ecx, 16h
		add	ecx, ebx
		mov	eax, ecx
		xor	eax, ebx
		and	eax, esi
		xor	eax, ebx
		add	eax, [ebp+var_14]
		lea	edx, [eax+edx-9E1DA9Eh]
		rol	edx, 5
		add	edx, ecx
		mov	eax, edx
		xor	eax, ecx
		and	eax, ebx
		xor	eax, ecx
		add	eax, [ebp+var_28]
		lea	esi, [eax+esi-3FBF4CC0h]
		rol	esi, 9
		add	esi, edx
		mov	eax, esi
		xor	eax, edx
		and	eax, ecx
		xor	eax, edx
		add	eax, [ebp+var_3C]
		lea	ebx, [eax+ebx+265E5A51h]
		rol	ebx, 0Eh
		add	ebx, esi
		mov	eax, ebx
		xor	eax, esi
		and	eax, edx
		xor	eax, esi
		add	eax, [ebp+var_10]
		lea	ecx, [eax+ecx-16493856h]
		rol	ecx, 14h
		add	ecx, ebx
		mov	eax, ecx
		xor	eax, ebx
		and	eax, esi
		xor	eax, ebx
		add	eax, [ebp+var_24]
		lea	edx, [eax+edx-29D0EFA3h]
		rol	edx, 5
		add	edx, ecx
		mov	eax, edx
		xor	eax, ecx
		and	eax, ebx
		xor	eax, ecx
		add	eax, [ebp+var_38]
		lea	esi, [eax+esi+2441453h]
		rol	esi, 9
		add	esi, edx
		mov	eax, esi
		xor	eax, edx
		and	eax, ecx
		xor	eax, edx
		add	eax, edi
		lea	ebx, [eax+ebx-275E197Fh]
		rol	ebx, 0Eh
		add	ebx, esi
		mov	eax, ebx
		xor	eax, esi
		and	eax, edx
		xor	eax, esi
		add	eax, [ebp+var_20]
		lea	ecx, [eax+ecx-182C0438h]
		rol	ecx, 14h
		add	ecx, ebx
		mov	eax, ecx
		xor	eax, ebx
		and	eax, esi
		xor	eax, ebx
		add	eax, [ebp+var_34]
		lea	edx, [eax+edx+21E1CDE6h]
		rol	edx, 5
		add	edx, ecx
		mov	eax, edx
		xor	eax, ecx
		and	eax, ebx
		xor	eax, ecx
		add	eax, [ebp+var_48]
		lea	esi, [eax+esi-3CC8F82Ah]
		rol	esi, 9
		add	esi, edx
		mov	eax, esi
		xor	eax, edx
		and	eax, ecx
		xor	eax, edx
		add	eax, [ebp+var_1C]
		lea	ebx, [eax+ebx-0B2AF279h]
		rol	ebx, 0Eh
		add	ebx, esi
		mov	eax, ebx
		xor	eax, esi
		and	eax, edx
		xor	eax, esi
		add	eax, [ebp+var_30]
		lea	ecx, [eax+ecx+455A14EDh]
		rol	ecx, 14h
		add	ecx, ebx
		mov	eax, ecx
		xor	eax, ebx
		and	eax, esi
		xor	eax, ebx
		add	eax, [ebp+var_44]
		lea	edx, [eax+edx-561C16FBh]
		rol	edx, 5
		add	edx, ecx
		mov	eax, edx
		xor	eax, ecx
		and	eax, ebx
		xor	eax, ecx
		add	eax, [ebp+var_18]
		lea	esi, [eax+esi-3105C08h]
		rol	esi, 9
		add	esi, edx
		mov	eax, esi
		xor	eax, edx
		and	eax, ecx
		xor	eax, edx
		add	eax, [ebp+var_2C]
		lea	ebx, [eax+ebx+676F02D9h]
		rol	ebx, 0Eh
		add	ebx, esi
		mov	eax, ebx
		xor	eax, esi
		and	eax, edx
		xor	eax, esi
		add	eax, [ebp+var_40]
		lea	ecx, [eax+ecx-72D5B376h]
		rol	ecx, 14h
		add	ecx, ebx
		mov	eax, ecx
		xor	eax, ebx
		xor	eax, esi
		add	eax, [ebp+var_24]
		lea	edx, [eax+edx-5C6BEh]
		rol	edx, 4
		add	edx, ecx
		mov	eax, edx
		xor	eax, ecx
		xor	eax, ebx
		add	eax, [ebp+var_30]
		lea	esi, [eax+esi-788E097Fh]
		rol	esi, 0Bh
		add	esi, edx
		mov	eax, esi
		xor	eax, edx
		xor	eax, ecx
		add	eax, [ebp+var_3C]
		lea	ebx, [eax+ebx+6D9D6122h]
		rol	ebx, 10h
		add	ebx, esi
		mov	eax, ebx
		xor	eax, esi
		xor	eax, edx
		add	eax, [ebp+var_48]
		lea	ecx, [eax+ecx-21AC7F4h]
		rol	ecx, 17h
		add	ecx, ebx
		mov	eax, ecx
		xor	eax, ebx
		xor	eax, esi
		add	eax, [ebp+var_14]
		lea	edx, [eax+edx-5B4115BCh]
		rol	edx, 4
		add	edx, ecx
		mov	eax, edx
		xor	eax, ecx
		xor	eax, ebx
		add	eax, [ebp+var_20]
		lea	esi, [eax+esi+4BDECFA9h]
		rol	esi, 0Bh
		add	esi, edx
		mov	eax, esi
		xor	eax, edx
		xor	eax, ecx
		add	eax, [ebp+var_2C]
		lea	ebx, [eax+ebx-944B4A0h]
		rol	ebx, 10h
		add	ebx, esi
		mov	eax, ebx
		xor	eax, esi
		xor	eax, edx
		add	eax, [ebp+var_38]
		lea	ecx, [eax+ecx-41404390h]
		rol	ecx, 17h
		add	ecx, ebx
		mov	eax, ecx
		xor	eax, ebx
		xor	eax, esi
		add	eax, [ebp+var_44]
		lea	edx, [eax+edx+289B7EC6h]
		rol	edx, 4
		add	edx, ecx
		mov	eax, edx
		xor	eax, ecx
		xor	eax, ebx
		add	eax, [ebp+var_10]
		lea	esi, [eax+esi-155ED806h]
		rol	esi, 0Bh
		add	esi, edx
		mov	eax, esi
		xor	eax, edx
		xor	eax, ecx
		add	eax, [ebp+var_1C]
		lea	ebx, [eax+ebx-2B10CF7Bh]
		rol	ebx, 10h
		add	ebx, esi
		mov	eax, ebx
		xor	eax, esi
		xor	eax, edx
		add	eax, [ebp+var_28]
		lea	ecx, [eax+ecx+4881D05h]
		rol	ecx, 17h
		add	ecx, ebx
		mov	eax, ecx
		xor	eax, ebx
		xor	eax, esi
		add	eax, [ebp+var_34]
		lea	edx, [eax+edx-262B2FC7h]
		rol	edx, 4
		add	edx, ecx
		mov	eax, edx
		xor	eax, ecx
		xor	eax, ebx
		add	eax, [ebp+var_40]
		lea	esi, [eax+esi-1924661Bh]
		rol	esi, 0Bh
		add	esi, edx
		mov	eax, esi
		xor	eax, edx
		xor	eax, ecx
		add	eax, edi
		lea	ebx, [eax+ebx+1FA27CF8h]
		rol	ebx, 10h
		add	ebx, esi
		mov	eax, ebx
		xor	eax, esi
		xor	eax, edx
		add	eax, [ebp+var_18]
		lea	ecx, [eax+ecx-3B53A99Bh]
		rol	ecx, 17h
		mov	eax, esi
		add	ecx, ebx
		not	eax
		or	eax, ecx
		xor	eax, ebx
		add	eax, [ebp+var_10]
		lea	edx, [eax+edx-0BD6DDBCh]
		rol	edx, 6
		mov	eax, ebx
		add	edx, ecx
		not	eax
		or	eax, edx
		xor	eax, ecx
		add	eax, [ebp+var_2C]
		lea	esi, [eax+esi+432AFF97h]
		rol	esi, 0Ah
		mov	eax, ecx
		add	esi, edx
		not	eax
		or	eax, esi
		xor	eax, edx
		add	eax, [ebp+var_48]
		lea	ebx, [eax+ebx-546BDC59h]
		rol	ebx, 0Fh
		mov	eax, edx
		add	ebx, esi
		not	eax
		or	eax, ebx
		xor	eax, esi
		add	eax, [ebp+var_24]
		lea	ecx, [eax+ecx-36C5FC7h]
		rol	ecx, 15h
		mov	eax, esi
		add	ecx, ebx
		not	eax
		or	eax, ecx
		xor	eax, ebx
		add	eax, [ebp+var_40]
		lea	edx, [eax+edx+655B59C3h]
		rol	edx, 6
		mov	eax, ebx
		add	edx, ecx
		not	eax
		or	eax, edx
		xor	eax, ecx
		add	eax, [ebp+var_1C]
		lea	esi, [eax+esi-70F3336Eh]
		rol	esi, 0Ah
		mov	eax, ecx
		add	esi, edx
		not	eax
		or	eax, esi
		xor	eax, edx
		add	eax, [ebp+var_38]
		lea	ebx, [eax+ebx-100B83h]
		rol	ebx, 0Fh
		mov	eax, edx
		add	ebx, esi
		not	eax
		or	eax, ebx
		xor	eax, esi
		add	eax, [ebp+var_14]
		lea	ecx, [eax+ecx-7A7BA22Fh]
		rol	ecx, 15h
		mov	eax, esi
		add	ecx, ebx
		not	eax
		or	eax, ecx
		xor	eax, ebx
		add	eax, [ebp+var_30]
		lea	edx, [eax+edx+6FA87E4Fh]
		rol	edx, 6
		mov	eax, ebx
		add	edx, ecx
		not	eax
		or	eax, edx
		xor	eax, ecx
		add	eax, edi
		lea	esi, [eax+esi-1D31920h]
		mov	eax, ecx
		rol	esi, 0Ah
		add	esi, edx
		mov	edi, [ebp+var_28]
		not	eax
		or	eax, esi
		xor	eax, edx
		add	eax, edi
		lea	ebx, [eax+ebx-5CFEBCECh]
		mov	eax, edx
		rol	ebx, 0Fh
		add	ebx, esi
		mov	edi, [ebp+var_44]
		not	eax
		or	eax, ebx
		xor	eax, esi
		add	eax, edi
		lea	ecx, [eax+ecx+4E0811A1h]
		mov	eax, esi
		rol	ecx, 15h
		add	ecx, ebx
		mov	edi, [ebp+var_20]
		not	eax
		or	eax, ecx
		xor	eax, ebx
		add	eax, edi
		lea	edx, [eax+edx-8AC817Eh]
		mov	eax, ebx
		rol	edx, 6
		add	edx, ecx
		mov	edi, [ebp+var_3C]
		not	eax
		or	eax, edx
		xor	eax, ecx
		add	eax, edi
		lea	esi, [eax+esi-42C50DCBh]
		mov	eax, ecx
		rol	esi, 0Ah
		add	esi, edx
		mov	edi, [ebp+var_18]
		not	eax
		or	eax, esi
		xor	eax, edx
		add	eax, edi
		lea	ebx, [eax+ebx+2AD7D2BBh]
		mov	eax, edx
		rol	ebx, 0Fh
		add	ebx, esi
		mov	edi, [ebp+var_34]
		not	eax
		or	eax, ebx
		xor	eax, esi
		add	eax, edi
		lea	ecx, [eax+ecx-14792C6Fh]
		mov	eax, [ebp+arg_0]
		rol	ecx, 15h
		add	ecx, ebx
		add	[eax], edx
		add	[eax+4], ecx
		add	[eax+8], ebx
		add	[eax+0Ch], esi
		add	esp, 40h
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_401570	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401C00	proc near		; CODE XREF: sub_401050+F3p
					; sub_401050+117p ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	edi, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	ebx, [ebp+arg_8]
		mov	esi, [edi+10h]
		mov	[ebp+var_10], eax
		lea	eax, [esi+ebx*8]
		cmp	eax, esi
		mov	[edi+10h], eax
		jnb	loc_401D01
		mov	edx, [edi+14h]
		inc	edx

loc_401C2A:				; CODE XREF: sub_401C00+104j
		mov	eax, ebx
		shr	eax, 1Dh
		lea	eax, [edx+eax]
		mov	[edi+14h], eax
		mov	eax, esi
		shr	eax, 3
		mov	esi, eax
		lea	edx, [edi+18h]
		and	esi, 3Fh
		mov	[ebp+var_14], edx
		jz	short loc_401CA0
		mov	eax, 40h
		lea	edx, [edi+esi+18h]
		sub	eax, esi
		cmp	ebx, eax
		mov	esi, eax
		jnb	short loc_401C70
		mov	[ebp+arg_8], ebx
		mov	eax, [ebp+var_10]
		mov	[ebp+arg_0], edx
		mov	[ebp+arg_4], eax
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	memcpy
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C70:				; CODE XREF: sub_401C00+56j
		mov	[esp+28h+var_20], eax
		sub	ebx, esi
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_28], edx
		mov	[esp+28h+var_24], eax
		call	memcpy
		lea	edx, [edi+18h]
		mov	[ebp+var_14], edx
		mov	[esp+28h+var_24], edx
		mov	[esp+28h+var_28], edi
		call	sub_401570
		add	[ebp+var_10], esi
		lea	esi, [esi+0]

loc_401CA0:				; CODE XREF: sub_401C00+45j
		cmp	ebx, 3Fh
		jbe	short loc_401CE6
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401CB0:				; CODE XREF: sub_401C00+E4j
		mov	eax, 40h
		sub	ebx, 40h
		mov	[esp+28h+var_20], eax
		mov	eax, [ebp+var_10]
		mov	[esp+28h+var_24], eax
		mov	edx, [ebp+var_14]
		mov	[esp+28h+var_28], edx
		call	memcpy
		mov	eax, [ebp+var_14]
		mov	[esp+28h+var_28], edi
		mov	[esp+28h+var_24], eax
		call	sub_401570
		add	[ebp+var_10], 40h
		cmp	ebx, 3Fh
		ja	short loc_401CB0

loc_401CE6:				; CODE XREF: sub_401C00+A3j
		mov	[ebp+arg_8], ebx
		mov	edx, [ebp+var_10]
		mov	eax, [ebp+var_14]
		mov	[ebp+arg_4], edx
		mov	[ebp+arg_0], eax
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		jmp	memcpy
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D01:				; CODE XREF: sub_401C00+20j
		mov	edx, [edi+14h]
		jmp	loc_401C2A
sub_401C00	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401D10	proc near		; CODE XREF: sub_401050+30Ep

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_C], ebx
		mov	ebx, [ebp+arg_4]
		mov	[ebp+var_8], esi
		mov	[ebp+var_4], edi
		mov	edx, [ebx+10h]
		shr	edx, 3
		and	edx, 3Fh
		lea	eax, [ebx+edx]
		lea	ecx, [eax+19h]
		mov	byte ptr [eax+18h], 80h
		mov	eax, 3Fh
		sub	eax, edx
		cmp	eax, 7
		ja	short loc_401DB2
		mov	[esp+18h+var_18], ecx
		xor	esi, esi
		mov	[esp+18h+var_14], esi
		lea	esi, [ebx+18h]
		mov	edi, esi
		mov	[esp+18h+var_10], eax
		call	memset
		mov	[esp+18h+var_14], esi
		mov	[esp+18h+var_18], ebx
		call	sub_401570
		cld
		mov	ecx, 0Eh
		xor	eax, eax
		rep stosd

loc_401D6E:				; CODE XREF: sub_401D10+BAj
		mov	eax, [ebx+10h]
		mov	[ebx+50h], eax
		mov	eax, [ebx+14h]
		mov	[ebx+54h], eax
		mov	[esp+18h+var_14], esi
		mov	[esp+18h+var_18], ebx
		call	sub_401570
		mov	eax, [ebx]
		mov	edx, [ebp+arg_0]
		mov	[edx], eax
		mov	eax, [ebx+4]
		mov	[edx+4], eax
		mov	eax, [ebx+8]
		mov	[edx+8], eax
		mov	eax, [ebx+0Ch]
		mov	[edx+0Ch], eax
		mov	dword ptr [ebx], 0
		mov	ebx, [ebp+var_C]
		mov	esi, [ebp+var_8]
		mov	edi, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401DB2:				; CODE XREF: sub_401D10+2Fj
		mov	[esp+18h+var_18], ecx
		lea	eax, [eax-8]
		xor	edx, edx
		mov	[esp+18h+var_10], eax
		lea	esi, [ebx+18h]
		mov	[esp+18h+var_14], edx
		call	memset
		jmp	short loc_401D6E
sub_401D10	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8
; [00000006 BYTES: COLLAPSED FUNCTION libintl_bindtextdomain. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION libintl_textdomain. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION libintl_gettext. PRESS KEYPAD "+"	TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401E00	proc near		; CODE XREF: sub_401050+Bp
					; sub_401050+1Ep
		push	ecx
		mov	ecx, esp
		add	ecx, 8

loc_401E06:				; CODE XREF: sub_401E00+1Bj
		cmp	eax, 1000h
		jb	short loc_401E1D
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		jmp	short loc_401E06
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E1D:				; CODE XREF: sub_401E00+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		jmp	eax
sub_401E00	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401E30	proc near		; CODE XREF: start+3Ap

var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_C2		= dword	ptr -0C2h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		mov	[esp+18h+var_14], eax
		mov	[esp+18h+var_18], esi
		call	sub_401FB0
		sub	esp, 8
		test	eax, eax
		jz	short loc_401E61
		mov	[esp+18h+var_18], 0

loc_401E5B:				; CODE XREF: sub_401E30+56j
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)

loc_401E61:				; CODE XREF: sub_401E30+22j
		sub	esp, 0C0h
		lea	ebx, [esp+0D8h+var_C2+1]
		and	ebx, 0FFFFFFF0h
		mov	dword ptr [ebx], 0
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	sub_401FB0
		sub	esp, 8
		mov	[esp+0D8h+var_D8], ebx
		jmp	short loc_401E5B
sub_401E30	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fclose. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fflush. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION putc. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION printf. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION close. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fprintf. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _open64. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getreent. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fileno. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION getpid. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION getppid. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION gettimeofday. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION getopt. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION setlocale. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION read. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memset. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memcpy. PRESS KEYPAD "+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401FB0	proc near		; CODE XREF: sub_401E30+18p
					; sub_401E30+4Bp

var_18		= dword	ptr -18h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h	; lpModuleName
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_0]
		test	ebx, ebx
		jz	loc_40209A
		mov	dword ptr [ebx+4], 0A8h
		xor	eax, eax
		mov	ecx, 96h
		mov	dword ptr [ebx+8], 3EDh
		mov	dword ptr [ebx+0Ch], 13h
		mov	[ebx+80h], eax
		mov	[ebx+84h], ecx
		mov	dword ptr [ebx+2Ch], offset dword_402220
		mov	dword ptr [ebx+30h], offset dword_402228
		mov	dword ptr [ebx+14h], offset unk_405024
		mov	eax, ds:_impure_ptr
		mov	[ebx+10h], eax

loc_40200B:				; CODE XREF: sub_401FB0+14Bj
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+0]
		mov	[ebx+28h], esi
		mov	dword ptr [ebx+48h], offset sub_4021F0
		mov	dword ptr [ebx+4Ch], offset sub_4021E0
		mov	dword ptr [ebx+50h], offset sub_4021D0
		mov	dword ptr [ebx+54h], offset sub_4021C0
		mov	dword ptr [ebx+24h], offset unk_405020
		mov	[ebx], eax
		mov	dword ptr [ebx+18h], offset loc_4021B0
		mov	dword ptr [ebx+1Ch], offset loc_4021A0
		mov	dword ptr [ebx+20h], offset loc_402190
		mov	dword ptr [ebx+44h], offset loc_402180
		mov	[esp+18h+var_18], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	dword ptr [ebx+34h], offset dword_403000
		mov	dword ptr [ebx+38h], offset unk_403040
		mov	dword ptr [ebx+3Ch], offset dword_405000
		mov	dword ptr [ebx+40h], 405050h
		call	sub_402150
		mov	eax, 1

loc_402091:				; CODE XREF: sub_401FB0+FDj
		lea	esp, [ebp+var_8]
		pop	ebx
		pop	esi
		pop	ebp
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40209A:				; CODE XREF: sub_401FB0+10j
		mov	[esp+18h+var_18], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_402091
		mov	dword ptr [edx+4], 0A8h
		mov	ebx, edx
		mov	eax, 96h
		mov	dword ptr [edx+8], 3EDh
		mov	dword ptr [edx+0Ch], 13h
		xor	edx, edx
		mov	[ebx+80h], edx
		mov	edx, [ebx+0A4h]
		mov	[ebx+84h], eax
		mov	dword ptr [ebx+2Ch], offset dword_402220
		mov	dword ptr [ebx+30h], offset dword_402228
		mov	dword ptr [ebx+14h], offset unk_405024
		mov	eax, ds:_impure_ptr
		mov	[eax], edx
		jmp	loc_40200B
sub_401FB0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:__imp__open64
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402120	proc near		; CODE XREF: sub_402150+1Fp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ebx, [ebp+arg_4]
		jmp	short loc_40213C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402130:				; CODE XREF: sub_402120+1Ej
		mov	edx, [ecx+4]
		mov	eax, [ecx]
		add	ecx, 8
		add	edx, esi
		add	[edx], eax

loc_40213C:				; CODE XREF: sub_402120+Ej
		cmp	ecx, ebx
		jb	short loc_402130
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_402120	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402150	proc near		; CODE XREF: sub_401FB0+D7p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	edx, 400000h
		mov	ebp, esp
		mov	eax, offset unk_4040A0
		sub	esp, 0Ch
		mov	[esp+0Ch+var_4], edx
		mov	[esp+0Ch+var_8], eax
		mov	[esp+0Ch+var_C], offset	unk_4040A0
		call	sub_402120
		leave
		retn
sub_402150	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_402180:				; DATA XREF: sub_401FB0+A2o
		jmp	ds:calloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_402190:				; DATA XREF: sub_401FB0+9Bo
		jmp	ds:realloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_4021A0:				; DATA XREF: sub_401FB0+94o
		jmp	ds:free
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_4021B0:				; DATA XREF: sub_401FB0+8Do
		jmp	ds:malloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4021C0	proc near		; DATA XREF: sub_401FB0+7Do
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4021C0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4021D0	proc near		; DATA XREF: sub_401FB0+76o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4021D0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4021E0	proc near		; DATA XREF: sub_401FB0+6Fo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4021E0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4021F0	proc near		; DATA XREF: sub_401FB0+68o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4021F0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
dword_402220	dd 0FFFFFFFFh, 0	; DATA XREF: sub_401FB0+3Eo
					; sub_401FB0+12Fo
dword_402228	dd 0FFFFFFFFh, 75h dup(0) ; DATA XREF: sub_401FB0+45o
					; sub_401FB0+136o
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 00000040 (	 64.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001800
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 403000h
dword_403000	dd 404000h		; DATA XREF: sub_401050+23Fr
					; sub_401050+3DBr ...
dword_403004	dd 10h			; DATA XREF: sub_401050+2D9r
dword_403008	dd 10h			; DATA XREF: sub_401050+262r
		dd offset aProcInterrupts ; "/proc/interrupts"
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  1Dh	;
		db  40h	; @
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  2Ch	; ,
		db  40h	; @
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  37h	; 7
		db  40h	; @
		db  40h	; @
		db    0	;
		db  20h	;
		db    0	;
		db    0	;
		db    0	;
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_403040	db    0	;		; DATA XREF: sub_401FB0+C2o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_data		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 000000A0 (	160.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001A00
; Flags	40000040: Data Readable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 404000h
aDevRandom	db '/dev/random',0
aProcInterrupts	db '/proc/interrupts',0 ; DATA XREF: .data:0040300Co
aProcSlabinfo	db '/proc/slabinfo',0
aProcStat	db '/proc/stat',0
aDevUrandom	db '/dev/urandom',0
unk_404044	db    0	;		; DATA XREF: sub_401050+30o
aCygutils	db 'cygutils',0         ; DATA XREF: sub_401050+45o
					; sub_401050+5Ao
aUsrShareLocale	db '/usr/share/locale',0 ; DATA XREF: sub_401050+4Co
aVf		db 'vf:',0              ; DATA XREF: sub_401050+74o
					; sub_401050+9Eo
a02x		db '%02x',0             ; DATA XREF: sub_401050+329o
aGotDBytesFromS	db 'Got %d bytes from %s',0Ah,0 ; DATA XREF: sub_401050+3C2o
					; sub_401050+447o
aCouldNotOpenS	db 'Could not open %s',0Ah,0 ; DATA XREF: sub_401050+410o
					; sub_401050+497o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_4040A0	db    0	;		; DATA XREF: sub_402150+8o
					; sub_402150+18o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_rdata		ends

; Section 4. (virtual address 00005000)
; Virtual size			: 00000050 (	 80.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 405000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_405000	dd ?			; DATA XREF: start+9r sub_401FB0+C9o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_405010	dd ?			; DATA XREF: sub_401050+98w
					; sub_401050+1F3r ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_405020	db    ?	;		; DATA XREF: sub_401FB0+84o
		db    ?	;
		db    ?	;
		db    ?	;
unk_405024	db    ?	;		; DATA XREF: sub_401FB0+4Co
					; sub_401FB0+13Do
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
_bss		ends

;
; Imports from cygwin1
;
; Section 5. (virtual address 00006000)
; Virtual size			: 000003D4 (	980.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001C00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp___getreent:dword ; DATA XREF: __getreentr
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn _impure_ptr:dword	; DATA XREF: sub_401FB0+53r
					; sub_401FB0+144r
		extrn __imp__open64:dword ; DATA XREF: _open64r
					; .text:00402110r
; void *__cdecl	calloc(size_t,size_t)
		extrn calloc:dword	; DATA XREF: .text:00402180r
		extrn __imp_close:dword	; DATA XREF: closer
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_401E30+2Br
					; .text:00402100r
		extrn __imp_fclose:dword ; DATA	XREF: fcloser
		extrn __imp_fflush:dword ; DATA	XREF: fflushr
		extrn __imp_fileno:dword ; DATA	XREF: filenor
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
; void __cdecl free(void *)
		extrn free:dword	; DATA XREF: .text:004021A0r
		extrn __imp_getopt:dword ; DATA	XREF: getoptr
		extrn __imp_getpid:dword ; DATA	XREF: getpidr
		extrn __imp_getppid:dword ; DATA XREF: getppidr
		extrn __imp_gettimeofday:dword ; DATA XREF: gettimeofdayr
; void *__cdecl	malloc(size_t)
		extrn malloc:dword	; DATA XREF: .text:004021B0r
; void *__cdecl	_imp_memcpy(void *,const void *,size_t)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; void *__cdecl	_imp_memset(void *,int,size_t)
		extrn __imp_memset:dword ; DATA	XREF: memsetr
		extrn optarg:dword	; DATA XREF: sub_401050+392r
		extrn __imp_printf:dword ; DATA	XREF: printfr
		extrn __imp_putc:dword	; DATA XREF: putcr
		extrn __imp_read:dword	; DATA XREF: readr
; void *__cdecl	realloc(void *,size_t)
		extrn realloc:dword	; DATA XREF: .text:00402190r
		extrn __imp_setlocale:dword ; DATA XREF: setlocaler


;
; Imports from cygintl-3
;
		extrn __imp_libintl_bindtextdomain:dword
					; DATA XREF: libintl_bindtextdomainr
		extrn __imp_libintl_gettext:dword ; DATA XREF: libintl_gettextr
		extrn __imp_libintl_textdomain:dword ; DATA XREF: libintl_textdomainr


;
; Imports from KERNEL32
;
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr



		end start
