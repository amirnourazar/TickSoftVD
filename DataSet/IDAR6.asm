

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\db2_deadlock.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00001758 (   5976.)
; Section size in file		: 00001800 (   6144.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, dword_403000
		test	eax, eax
		jz	short loc_401010
		int	3		; Trap to Debugger

loc_401010:				; CODE XREF: start+Dj
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_401140
		call	sub_401AC0
		mov	esp, ebp
		pop	ebp
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
a@CopyrightC199	db '@(#) Copyright (c) 1996, 1997, 1998',0Ah
		db 9,'Sleepycat Software Inc.  All rights reserved.',0Ah,0
		align 10h
a@Db_deadlock_c	db '@(#)db_deadlock.c',9,'10.23 (Sleepycat) 10/4/98',0
aDb_deadlock	db 'db_deadlock',0
aAHLTVw		db 'a:h:L:t:vw',0       ; DATA XREF: sub_401140+1D0o
		dd 7 dup(90909090h)
		align 4
aAtLeastOneOfTA	db 'at least one of -t and -w must be specified',0
					; DATA XREF: sub_401140+208o
aRunningAt_24s	db 'Running at %.24s',0 ; DATA XREF: sub_401140+2ACo
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401140	proc near		; DATA XREF: start+30o

var_38		= dword	ptr -38h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 2Ch
		push	edi
		push	esi
		xor	edi, edi
		push	ebx
		xor	esi, esi
		mov	ebx, [ebp+arg_0]
		call	__main
		mov	[ebp+var_C], 1
		mov	[ebp+var_18], 0
		mov	[ebp+var_4], 0
		mov	[ebp+var_10], 0
		mov	[ebp+var_14], 0
		jmp	loc_40130D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401180:				; CODE XREF: sub_401140+1E5j
		add	eax, 0FFFFFFC1h	; switch 57 cases
		cmp	eax, 38h
		ja	loc_401308	; default
		jmp	ds:off_401194[eax*4] ; switch jump
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
off_401194	dd offset loc_401308, offset loc_401308, offset	loc_401308
					; DATA XREF: sub_401140+4Cr
		dd offset loc_401308, offset loc_401308, offset	loc_401308 ; jump table	for switch statement
		dd offset loc_401308, offset loc_401308, offset	loc_401308
		dd offset loc_401308, offset loc_401308, offset	loc_401308
		dd offset loc_401308, offset loc_4012C4, offset	loc_401308
		dd offset loc_401308, offset loc_401308, offset	loc_401308
		dd offset loc_401308, offset loc_401308, offset	loc_401308
		dd offset loc_401308, offset loc_401308, offset	loc_401308
		dd offset loc_401308, offset loc_401308, offset	loc_401308
		dd offset loc_401308, offset loc_401308, offset	loc_401308
		dd offset loc_401308, offset loc_401308, offset	loc_401308
		dd offset loc_401308, offset loc_401278, offset	loc_401308
		dd offset loc_401308, offset loc_401308, offset	loc_401308
		dd offset loc_401308, offset loc_401308, offset	loc_4012BC
		dd offset loc_401308, offset loc_401308, offset	loc_401308
		dd offset loc_401308, offset loc_401308, offset	loc_401308
		dd offset loc_401308, offset loc_401308, offset	loc_401308
		dd offset loc_401308, offset loc_401308, offset	loc_4012D0
		dd offset loc_401308, offset loc_4012F8, offset	loc_401300
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401278:				; CODE XREF: sub_401140+4Cj
					; DATA XREF: sub_401140+54o
		mov	eax, ds:dword_404004 ; case 0x61
		mov	al, [eax]
		cmp	al, 6Fh
		jz	short loc_40128C
		cmp	al, 79h
		jz	short loc_401298
		jmp	short loc_4012A4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_40128C:				; CODE XREF: sub_401140+141j
		mov	[ebp+var_C], 2
		jmp	short loc_4012A9
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401298:				; CODE XREF: sub_401140+145j
		mov	[ebp+var_C], 4
		jmp	short loc_4012A9
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4012A4:				; CODE XREF: sub_401140+147j
		call	sub_4016A8

loc_4012A9:				; CODE XREF: sub_401140+153j
					; sub_401140+15Fj
		mov	eax, ds:dword_404004
		cmp	byte ptr [eax+1], 0
		jz	short loc_40130D
		call	sub_4016A8
		jmp	short loc_40130D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4012BC:				; CODE XREF: sub_401140+4Cj
					; DATA XREF: sub_401140+54o
		mov	edi, ds:dword_404004 ; case 0x68
		jmp	short loc_40130D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4012C4:				; CODE XREF: sub_401140+4Cj
					; DATA XREF: sub_401140+54o
		mov	eax, ds:dword_404004 ; case 0x4C
		mov	[ebp+var_18], eax
		jmp	short loc_40130D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4012D0:				; CODE XREF: sub_401140+4Cj
					; DATA XREF: sub_401140+54o
		lea	eax, [ebp+var_4] ; case	0x74
		push	eax
		push	7FFFFFFFh
		push	1
		mov	eax, ds:dword_404004
		push	eax
		call	sub_4019E8
		imul	eax, [ebp+var_4], 0F4240h
		add	esp, 10h
		mov	[ebp+var_4], eax
		jmp	short loc_40130D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4012F8:				; CODE XREF: sub_401140+4Cj
					; DATA XREF: sub_401140+54o
		mov	esi, 1		; case 0x76
		jmp	short loc_40130D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401300:				; CODE XREF: sub_401140+4Cj
					; DATA XREF: sub_401140+54o
		or	byte ptr [ebp+var_10], 1 ; case	0x77
		jmp	short loc_40130D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401308:				; CODE XREF: sub_401140+46j
					; sub_401140+4Cj
					; DATA XREF: ...
		call	sub_4016A8	; default

loc_40130D:				; CODE XREF: sub_401140+38j
					; sub_401140+172j ...
		add	esp, 0FFFFFFFCh
		push	offset aAHLTVw	; "a:h:L:t:vw"
		mov	eax, [ebp+arg_4]
		push	eax
		push	ebx
		call	sub_402128
		add	esp, 10h
		cmp	eax, 0FFFFFFFFh
		jnz	loc_401180
		cmp	ebx, dword_40300C
		jz	short loc_401338
		call	sub_4016A8

loc_401338:				; CODE XREF: sub_401140+1F1j
		cmp	[ebp+var_4], 0
		jnz	short loc_401367
		mov	eax, [ebp+var_10]
		test	al, 1
		jnz	short loc_40135A
		add	esp, 0FFFFFFF4h
		push	offset aAtLeastOneOfTA ; "at least one of -t and -w must be speci"...
		call	sub_4018A4
		call	sub_4016A8
		add	esp, 10h

loc_40135A:				; CODE XREF: sub_401140+203j
		cmp	[ebp+var_4], 0
		jnz	short loc_401367
		mov	[ebp+var_4], 186A0h

loc_401367:				; CODE XREF: sub_401140+1FCj
					; sub_401140+21Ej
		call	sub_4015F4
		add	esp, 0FFFFFFF8h
		push	esi
		push	edi
		call	sub_4014C0
		mov	edi, eax
		add	esp, 10h
		cmp	[ebp+var_18], 0
		jz	short loc_4013C4
		add	esp, 0FFFFFFF8h
		push	1
		mov	eax, [ebp+var_18]
		push	eax
		call	sub_401560
		add	esp, 10h
		test	eax, eax
		jz	short loc_4013C4
		add	esp, 0FFFFFFF4h
		push	edi
		call	db_appexit
		mov	eax, 1
		jmp	loc_4014AB
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4013AC:				; CODE XREF: sub_401140+2DBj
		add	esp, 0FFFFFFF4h
		mov	[ebp+var_14], 1
		push	0
		call	sub_4018A4
		add	esp, 10h
		jmp	short loc_401437
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4013C4:				; CODE XREF: sub_401140+23Fj
					; sub_401140+254j
		cmp	ds:dword_404014, 0
		jnz	short loc_401437
		lea	esi, [ebp+var_8]

loc_4013D0:				; CODE XREF: sub_401140+2F5j
		cmp	dword ptr [edi+10h], 0
		jz	short loc_4013F9
		add	esp, 0FFFFFFF4h
		push	esi
		call	time
		add	esp, 0FFFFFFF8h
		add	esp, 0FFFFFFF4h
		push	esi
		call	ctime
		push	eax
		push	offset aRunningAt_24s ;	"Running at %.24s"
		call	sub_4018A4
		add	esp, 30h

loc_4013F9:				; CODE XREF: sub_401140+294j
		call	__errno
		mov	ebx, eax
		add	esp, 0FFFFFFFCh
		mov	eax, [ebp+var_C]
		push	eax
		mov	eax, [ebp+var_10]
		push	eax
		mov	eax, [edi+34h]
		push	eax
		call	lock_detect
		mov	[ebx], eax
		add	esp, 10h
		test	eax, eax
		jnz	short loc_4013AC
		add	esp, 0FFFFFFF8h
		mov	eax, [ebp+var_4]
		push	eax
		push	0
		call	__os_sleep
		add	esp, 10h
		cmp	ds:dword_404014, 0
		jz	short loc_4013D0

loc_401437:				; CODE XREF: sub_401140+280j
					; sub_401140+28Bj
		cmp	[ebp+var_18], 0
		jz	short loc_401459
		add	esp, 0FFFFFFF8h
		push	0
		mov	eax, [ebp+var_18]
		push	eax
		call	sub_401560
		add	esp, 10h
		test	eax, eax
		jz	short loc_401459
		mov	[ebp+var_14], 1

loc_401459:				; CODE XREF: sub_401140+2FBj
					; sub_401140+310j
		call	__errno
		add	esp, 0FFFFFFF4h
		mov	ebx, eax
		push	edi
		call	db_appexit
		mov	[ebx], eax
		add	esp, 10h
		test	eax, eax
		jz	short loc_401486
		add	esp, 0FFFFFFF4h
		mov	[ebp+var_14], 1
		push	0
		call	sub_401814
		add	esp, 10h

loc_401486:				; CODE XREF: sub_401140+330j
		mov	eax, ds:dword_404014
		test	eax, eax
		jz	short loc_4014A8
		add	esp, 0FFFFFFF8h
		push	0
		push	eax
		call	signal
		add	esp, 0FFFFFFF4h
		mov	eax, ds:dword_404014
		push	eax
		call	raise

loc_4014A8:				; CODE XREF: sub_401140+34Dj
		mov	eax, [ebp+var_14]

loc_4014AB:				; CODE XREF: sub_401140+264j
		lea	esp, [ebp-38h]
		pop	ebx
		pop	esi
		pop	edi
		mov	esp, ebp
		pop	ebp
		retn
sub_401140	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
aDb_appinit	db 'db_appinit',0       ; DATA XREF: sub_4014C0+74o

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4014C0	proc near		; CODE XREF: sub_401140+231p

var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		push	ebx
		add	esp, 0FFFFFFF8h
		push	1
		push	7Ch
		call	calloc
		mov	ebx, eax
		add	esp, 10h
		test	ebx, ebx
		jnz	short loc_4014F7
		call	__errno
		add	esp, 0FFFFFFF8h
		mov	dword ptr [eax], 0Ch
		push	0
		push	1
		call	near ptr loc_40170B+5
		add	esp, 10h

loc_4014F7:				; CODE XREF: sub_4014C0+1Bj
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		mov	[ebx+8], eax
		mov	eax, dword_403004
		mov	[ebx+0Ch], eax
		mov	eax, [ebp+arg_4]
		mov	[ebx+10h], eax
		call	__errno
		push	1010h
		mov	esi, eax
		push	ebx
		push	0
		mov	eax, [ebp+arg_0]
		push	eax
		call	db_appinit
		mov	[esi], eax
		add	esp, 10h
		test	eax, eax
		jz	short loc_401540
		add	esp, 0FFFFFFF8h
		push	offset aDb_appinit ; "db_appinit"
		push	1
		call	near ptr loc_40170B+5

loc_401540:				; CODE XREF: sub_4014C0+6Fj
		lea	esp, [ebp-18h]
		mov	eax, ebx
		pop	ebx
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_4014C0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40154B:				; DATA XREF: sub_401560+14o
		ja	short $+2

loc_40154D:				; DATA XREF: sub_401560+2Co
					; sub_401560+65o
		and	eax, 2E250073h
		xor	dh, [ebx+esi*2]
		cmp	ah, [eax]
		and	eax, 2520756Ch
		jnb	short $+2
		mov	esi, esi

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401560	proc near		; CODE XREF: sub_401140+24Ap
					; sub_401140+306p

var_28		= dword	ptr -28h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 20h
		push	esi
		push	ebx
		mov	ebx, [ebp+arg_0]
		cmp	[ebp+arg_4], 0
		jz	short loc_4015E0
		add	esp, 0FFFFFFF8h
		push	offset loc_40154B
		push	ebx
		call	fopen
		mov	esi, eax
		add	esp, 10h
		test	esi, esi
		jnz	short loc_4015A0
		add	esp, 0FFFFFFF8h
		push	ebx
		push	offset loc_40154D
		call	sub_401814
		mov	eax, 1
		jmp	short loc_4015EB
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4015A0:				; CODE XREF: sub_401560+26j
		add	esp, 0FFFFFFF4h
		lea	ebx, [ebp+var_4]
		push	ebx
		call	time
		add	esp, 0FFFFFFF4h
		add	esp, 0FFFFFFF4h
		push	ebx
		call	ctime
		push	eax
		call	getpid
		push	eax
		mov	eax, dword_403004
		push	eax
		push	(offset	loc_40154D+3)
		push	esi
		call	fprintf
		add	esp, 40h
		add	esp, 0FFFFFFF4h
		push	esi
		call	fclose
		jmp	short loc_4015E9
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4015E0:				; CODE XREF: sub_401560+Fj
		add	esp, 0FFFFFFF4h
		push	ebx
		call	remove

loc_4015E9:				; CODE XREF: sub_401560+7Cj
		xor	eax, eax

loc_4015EB:				; CODE XREF: sub_401560+3Bj
		lea	esp, [ebp-28h]
		pop	ebx
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_401560	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4015F4	proc near		; CODE XREF: sub_401140+227p
		push	ebp
		mov	ebp, esp
		sub	esp, 8
		add	esp, 0FFFFFFF8h
		push	offset sub_401630
		push	1
		call	signal
		add	esp, 0FFFFFFF8h
		push	offset sub_401630
		push	2
		call	signal
		add	esp, 20h
		add	esp, 0FFFFFFF8h
		push	offset sub_401630
		push	0Fh
		call	signal
		mov	esp, ebp
		pop	ebp
		retn
sub_4015F4	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401630	proc near		; DATA XREF: sub_4015F4+9o
					; sub_4015F4+18o ...

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	eax, [ebp+arg_0]
		mov	ds:dword_404014, eax
		test	eax, eax
		jnz	short loc_401649
		mov	ds:dword_404014, 2

loc_401649:				; CODE XREF: sub_401630+Dj
		mov	esp, ebp
		pop	ebp
		retn
sub_401630	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		dd 4 dup(90909090h)
		align 4
aUsageDb_deadlo	db 'usage: db_deadlock [-vw] [-a m | o | y] [-h home] [-L file] '
					; DATA XREF: sub_4016A8+Eo
		db '[-t sec]',0Ah,0
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4016A8	proc near		; CODE XREF: sub_401140+164p
					; sub_401140+174p ...
		push	ebp
		mov	eax, ds:dword_40400C
		mov	ebp, esp
		sub	esp, 8
		add	esp, 0FFFFFFF8h
		push	offset aUsageDb_deadlo ; "usage: db_deadlock [-vw] [-a m | o | y]"...
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 0FFFFFFF4h
		push	1
		call	exit
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		inc	eax
		sub	[ebx], ah
		sub	[ebp+72h], esp
		jb	short loc_401716
		arpl	[ecx], cx
		xor	[eax], esi
		db	2Eh
		xor	eax, 6C532820h
		db	65h, 65h
		jo	short near ptr loc_40176D+2
		arpl	[ecx+74h], sp
		sub	[eax], esp
		xor	[ecx], esi
		das
		xor	dh, [edi+ebp]
		cmp	[eax], edi
		add	ds:203A73h, ah

loc_401709:				; DATA XREF: .text:00401764o
					; sub_401814+4Fo
		cmp	ah, [eax]

loc_40170B:				; CODE XREF: sub_4014C0+2Fp
					; sub_4014C0+7Bp ...
		add	ds:55000A73h, ah
sub_4016A8	endp

		mov	ebp, esp
		sub	esp, 0Ch

loc_401716:				; CODE XREF: sub_4016A8+3Ej
		push	edi
		push	esi
		push	ebx
		mov	esi, [ebp+0Ch]
		lea	ebx, [ebp+10h]
		call	__errno
		mov	edi, [eax]
		add	esp, 0FFFFFFFCh
		mov	eax, dword_403004
		push	eax
		mov	eax, ds:dword_40400C
		push	401704h
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 10h
		test	esi, esi
		jz	short loc_401775
		add	esp, 0FFFFFFFCh
		mov	eax, ds:dword_40400C
		push	ebx
		push	esi
		mov	eax, [eax+0Ch]
		push	eax
		call	vfprintf
		mov	eax, ds:dword_40400C
		add	esp, 0FFFFFFF8h
		push	offset loc_401709
		mov	eax, [eax+0Ch]
		push	eax

loc_40176D:				; CODE XREF: sub_4016A8+4Aj
		call	fprintf
		add	esp, 20h

loc_401775:				; CODE XREF: .text:00401747j
		add	esp, 0FFFFFFFCh
		add	esp, 0FFFFFFF4h
		push	edi
		call	strerror
		push	eax
		mov	eax, ds:dword_40400C
		push	40170Ch
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 20h
		mov	eax, [ebp+8]
		add	esp, 0FFFFFFF4h
		push	eax
		call	exit

loc_4017A4:				; DATA XREF: sub_4017A8+4Fo
					; sub_4018A4+4Ao
		or	al, [eax]
		mov	esi, esi

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4017A8	proc near		; CODE XREF: sub_4019E8+73p
					; sub_4019E8+88p ...

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	eax, dword_403004
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		push	ebx
		add	esp, 0FFFFFFFCh
		mov	esi, [ebp+arg_4]
		push	eax
		lea	ebx, [ebp+arg_8]
		mov	eax, ds:dword_40400C
		push	401704h
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 10h
		test	esi, esi
		jz	short loc_4017EF
		add	esp, 0FFFFFFFCh
		mov	eax, ds:dword_40400C
		push	ebx
		push	esi
		mov	eax, [eax+0Ch]
		push	eax
		call	vfprintf
		add	esp, 10h

loc_4017EF:				; CODE XREF: sub_4017A8+2Fj
		mov	eax, ds:dword_40400C
		add	esp, 0FFFFFFF8h
		push	offset loc_4017A4
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 0FFFFFFF4h
		mov	eax, [ebp+arg_0]
		push	eax
		call	exit
		lea	esi, [esi+0]
sub_4017A8	endp


; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401814	proc near		; CODE XREF: sub_401140+33Ep
					; sub_401560+31p

var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 0Ch
		push	edi
		push	esi
		push	ebx
		mov	esi, [ebp+arg_0]
		lea	ebx, [ebp+arg_4]
		call	__errno
		mov	edi, [eax]
		add	esp, 0FFFFFFFCh
		mov	eax, dword_403004
		push	eax
		push	401704h
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 10h
		test	esi, esi
		jz	short loc_401879
		add	esp, 0FFFFFFFCh
		push	ebx
		push	esi
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	vfprintf
		add	esp, 0FFFFFFF8h
		push	offset loc_401709
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 20h

loc_401879:				; CODE XREF: sub_401814+37j
		add	esp, 0FFFFFFFCh
		add	esp, 0FFFFFFF4h
		push	edi
		call	strerror
		push	eax
		push	40170Ch
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		lea	esp, [ebp-18h]
		pop	ebx
		pop	esi
		pop	edi
		mov	esp, ebp
		pop	ebp
		retn
sub_401814	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4018A4	proc near		; CODE XREF: sub_401140+20Dp
					; sub_401140+278p ...

var_18		= dword	ptr -18h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 10h
		push	esi
		push	ebx
		add	esp, 0FFFFFFFCh
		mov	eax, dword_403004
		mov	esi, [ebp+arg_0]
		lea	ebx, [ebp+arg_4]
		push	eax
		push	401704h
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		add	esp, 10h
		test	esi, esi
		jz	short loc_4018EB
		add	esp, 0FFFFFFFCh
		push	ebx
		push	esi
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	vfprintf
		add	esp, 10h

loc_4018EB:				; CODE XREF: sub_4018A4+2Fj
		add	esp, 0FFFFFFF8h
		push	offset loc_4017A4
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		push	eax
		call	fprintf
		lea	esp, [ebp-18h]
		pop	ebx
		pop	esi
		mov	esp, ebp
		pop	ebp
		retn
sub_4018A4	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
aRrrrrrrrrrrrrr	db '@(#)getlong.c',9,'10.3 (Sleepycat) 4/1'
		db '0/98',0
aS_0		db '%s',0               ; DATA XREF: sub_4019E8+4Co
aSInvalidNumeri	db '%s: Invalid numeric argument',0 ; DATA XREF: sub_4019E8+6Co
		dd 6 dup(90909090h)
		align 4
aSLessThanMinim	db '%s: Less than minimum value (%ld)',0 ; DATA XREF: sub_4019E8+81o
		dd 7 dup(90909090h)
		align 4
aSGreaterThanMa	db '%s: Greater than maximum value (%ld)',0 ; DATA XREF: sub_4019E8+9Ao
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4019E8	proc near		; CODE XREF: sub_401140+1A1p

var_28		= dword	ptr -28h
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		sub	esp, 1Ch
		push	edi
		push	esi
		push	ebx
		mov	esi, [ebp+arg_0]
		mov	edi, [ebp+arg_4]
		call	__errno
		mov	dword ptr [eax], 0
		add	esp, 0FFFFFFFCh
		push	0Ah
		lea	eax, [ebp+var_4]
		push	eax
		push	esi
		call	strtol
		mov	ebx, eax
		add	esp, 10h
		cmp	ebx, 80000000h
		jz	short loc_401A26
		cmp	ebx, 7FFFFFFFh
		jnz	short loc_401A43

loc_401A26:				; CODE XREF: sub_4019E8+34j
		call	__errno
		cmp	dword ptr [eax], 22h
		jnz	short loc_401A43
		add	esp, 0FFFFFFFCh
		push	esi
		push	offset aS_0	; "%s"
		push	1
		call	near ptr loc_40170B+5
		add	esp, 10h

loc_401A43:				; CODE XREF: sub_4019E8+3Cj
					; sub_4019E8+46j
		cmp	byte ptr [esi],	0
		jz	short loc_401A50
		mov	eax, [ebp+var_4]
		cmp	byte ptr [eax],	0
		jz	short loc_401A63

loc_401A50:				; CODE XREF: sub_4019E8+5Ej
		add	esp, 0FFFFFFFCh
		push	esi
		push	offset aSInvalidNumeri ; "%s: Invalid numeric argument"
		push	1
		call	sub_4017A8
		add	esp, 10h

loc_401A63:				; CODE XREF: sub_4019E8+66j
		cmp	ebx, edi
		jge	short loc_401A78
		push	edi
		push	esi
		push	offset aSLessThanMinim ; "%s: Less than	minimum	value (%ld)"
		push	1
		call	sub_4017A8
		add	esp, 10h

loc_401A78:				; CODE XREF: sub_4019E8+7Dj
		cmp	ebx, [ebp+arg_8]
		jle	short loc_401A8E
		mov	eax, [ebp+arg_8]
		push	eax
		push	esi
		push	offset aSGreaterThanMa ; "%s: Greater than maximum value (%ld)"
		push	1
		call	sub_4017A8

loc_401A8E:				; CODE XREF: sub_4019E8+93j
		mov	eax, [ebp+arg_C]
		lea	esp, [ebp-28h]
		mov	[eax], ebx
		pop	ebx
		pop	esi
		pop	edi
		mov	esp, ebp
		pop	ebp
		retn
sub_4019E8	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION db_appinit. PRESS	KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __os_sleep. PRESS	KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION lock_detect. PRESS KEYPAD	"+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION db_appexit. PRESS	KEYPAD "+" TO EXPAND]
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401AC0	proc near		; CODE XREF: start+37p

var_C8		= dword	ptr -0C8h
var_C4		= dword	ptr -0C4h
var_C0		= dword	ptr -0C0h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		xor	ebx, ebx
		mov	[esp+18h+var_18], esi
		mov	[esp+18h+var_14], 0
		call	sub_402528
		sub	esp, 8
		test	eax, eax
		jnz	short loc_401B09
		sub	esp, 0B0h
		lea	ebx, [esp+0C8h+var_C0]
		mov	[esp+0C8h+var_C0], 0
		mov	[esp+0C8h+var_C8], esi
		mov	[esp+0C8h+var_C4], ebx
		call	sub_402528
		sub	esp, 8

loc_401B09:				; CODE XREF: sub_401AC0+26j
		mov	[esp+0C8h+var_C8], ebx
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
		nop
sub_401AC0	endp

; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 4
dword_401B28	dd 90909000h, 7	dup(90909090h) ; DATA XREF: sub_401DC8+67o
					; sub_401DC8+F1o ...
aOptionRequires	db 'option requires an argument -- %c',0 ; DATA XREF: sub_401DC8+210o
					; sub_401DC8+2A6o
		dd 7 dup(90909090h)
		align 4
aOptionRequir_0	db 'option requires an argument -- %s',0 ; DATA XREF: .text:0040240Ao
aAmbiguousOptio	db 'ambiguous option -- %.*s',0 ; DATA XREF: .text:004024EEo
		align 8
aOptionDoesnTTa	db 'option doesn',27h,'t take an argument -- %.*s',0
					; DATA XREF: .text:0040230Fo
aUnknownOptionC	db 'unknown option -- %c',0 ; DATA XREF: sub_401DC8+2FEo
aUnknownOptionS	db 'unknown option -- %s',0 ; DATA XREF: .text:0040249Ao
aS		db '%s: ',0             ; DATA XREF: sub_401C28+1Ao
aRrn		db '´&',0
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401C28	proc near		; CODE XREF: sub_401CA8+13p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_8], ebx
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_4]
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_14], offset aS ; "%s: "
		mov	[esp+18h+var_18], eax
		mov	eax, ds:__progname
		mov	eax, [eax]
		mov	[esp+18h+var_10], eax
		call	fprintf
		test	ebx, ebx
		jz	short loc_401C79
		mov	eax, ds:dword_40400C
		mov	eax, [eax+0Ch]
		mov	[esp+18h+var_10], esi
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_18], eax
		call	vfprintf

loc_401C79:				; CODE XREF: sub_401C28+37j
		mov	[ebp+arg_0], 0Ah
		mov	ebx, [ebp+var_8]
		mov	eax, ds:dword_40400C
		mov	esi, [ebp+var_4]
		mov	eax, [eax+0Ch]
		mov	[ebp+arg_4], eax
		mov	esp, ebp
		pop	ebp
		jmp	loc_4026D8
sub_401C28	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		dd 26B48D90h, 0, 27BC8Dh
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401CA8	proc near		; CODE XREF: sub_401DC8+21Bp
					; sub_401DC8+2B5p ...

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		mov	eax, [ebp+arg_0]
		lea	edx, [ebp+arg_4]
		mov	[esp+8+var_4], edx
		mov	[esp+8+var_8], eax
		call	sub_401C28
		mov	esp, ebp
		pop	ebp
		retn
sub_401CA8	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401CC8	proc near		; CODE XREF: sub_401D08+33p

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		mov	eax, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		cdq
		idiv	ebx
		test	edx, edx
		mov	ecx, edx
		jz	short loc_401CF5
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401CE8:				; CODE XREF: sub_401CC8+2Bj
		mov	eax, ebx
		mov	ebx, ecx
		cdq
		idiv	ecx
		test	edx, edx
		mov	ecx, edx
		jnz	short loc_401CE8

loc_401CF5:				; CODE XREF: sub_401CC8+11j
		mov	eax, ebx
		pop	ebx
		pop	ebp
		retn
sub_401CC8	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		lea	esi, [esi+0]
		lea	edi, [edi+0]

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401D08	proc near		; CODE XREF: sub_401DC8+94p
					; sub_402128+5Cp ...

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	ebx, [ebp+arg_0]
		mov	eax, [ebp+arg_4]
		mov	esi, [ebp+arg_8]
		mov	edx, [ebp+arg_4]
		sub	eax, ebx
		mov	edi, [ebp+arg_C]
		mov	[ebp+var_18], eax
		mov	eax, esi
		sub	esi, ebx
		sub	eax, edx
		mov	[ebp+var_1C], eax
		mov	eax, [ebp+var_18]
		mov	[esp+28h+var_28], eax
		mov	eax, [ebp+var_1C]
		mov	[esp+28h+var_24], eax
		call	sub_401CC8
		mov	[ebp+var_14], eax
		mov	eax, esi
		cdq
		idiv	[ebp+var_14]
		mov	[ebp+var_10], 0
		mov	[ebp+var_20], eax
		mov	eax, [ebp+var_14]
		cmp	[ebp+var_10], eax
		jge	short loc_401DAC
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401D68:				; CODE XREF: sub_401D08+A2j
		mov	esi, [ebp+arg_4]
		mov	eax, [ebp+var_10]
		mov	ebx, [ebp+var_20]
		add	esi, eax
		test	ebx, ebx
		mov	ecx, esi
		jle	short loc_401DA1
		mov	ebx, [ebp+var_20]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401D88:				; CODE XREF: sub_401D08+97j
		cmp	ecx, [ebp+arg_4]
		jl	short loc_401DB8
		mov	edx, [ebp+var_18]
		sub	ecx, edx

loc_401D92:				; CODE XREF: sub_401D08+B5j
		mov	edx, [edi+ecx*4]
		dec	ebx
		mov	eax, [edi+esi*4]
		mov	[edi+ecx*4], eax
		mov	[edi+esi*4], edx
		jnz	short loc_401D88

loc_401DA1:				; CODE XREF: sub_401D08+6Fj
		inc	[ebp+var_10]
		mov	eax, [ebp+var_14]
		cmp	[ebp+var_10], eax
		jl	short loc_401D68

loc_401DAC:				; CODE XREF: sub_401D08+51j
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_401DB8:				; CODE XREF: sub_401D08+83j
		mov	eax, [ebp+var_1C]
		add	ecx, eax
		jmp	short loc_401D92
sub_401D08	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		dd 0B48D9090h, 26h
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401DC8	proc near		; CODE XREF: sub_402128+1Dp
					; .text:004021D5p

var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_14		= dword	ptr -14h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		xor	ebx, ebx
		sub	esp, 1Ch
		mov	ds:dword_404004, ebx
		mov	ecx, dword_40300C
		mov	esi, [ebp+arg_0]
		mov	edi, [ebp+arg_8]
		test	ecx, ecx
		jnz	loc_402118
		mov	eax, ds:dword_404000
		test	eax, eax
		jnz	short loc_401E09
		mov	edx, 1
		mov	dword_40300C, edx

loc_401E01:				; CODE XREF: sub_401DC8+355j
		test	eax, eax
		jz	loc_402100

loc_401E09:				; CODE XREF: sub_401DC8+2Cj
		mov	eax, 0FFFFFFFFh
		mov	dword_40301C, eax
		mov	eax, 0FFFFFFFFh
		mov	dword_403018, eax

loc_401E1D:				; CODE XREF: sub_401DC8+346j
		mov	edx, dword_40300C
		xor	ebx, ebx
		mov	ds:dword_404000, ebx
		cmp	edx, esi
		jl	short loc_401EA9
		mov	ecx, offset dword_401B28
		mov	dword_403014, ecx
		mov	ecx, dword_40301C
		cmp	ecx, 0FFFFFFFFh
		jz	short loc_401E98
		mov	[esp+28h+var_20], edx
		mov	eax, dword_403018
		mov	[esp+28h+var_24], ecx
		mov	[esp+28h+var_28], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+28h+var_1C], eax
		call	sub_401D08
		mov	edx, dword_403018
		mov	eax, dword_40301C
		sub	eax, edx
		sub	dword_40300C, eax

loc_401E74:				; CODE XREF: sub_401DC8+D8j
					; sub_401DC8+DFj
		mov	eax, 0FFFFFFFFh
		mov	dword_40301C, eax
		mov	eax, 0FFFFFFFFh
		mov	dword_403018, eax

loc_401E88:				; CODE XREF: sub_401DC8+FBj
		mov	eax, 0FFFFFFFFh

loc_401E8D:				; CODE XREF: sub_401DC8+1AEj
					; sub_401DC8+23Bj ...
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401E98:				; CODE XREF: sub_401DC8+7Bj
		mov	eax, dword_403018
		cmp	eax, 0FFFFFFFFh
		jz	short loc_401E74
		mov	dword_40300C, eax
		jmp	short loc_401E74
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401EA9:				; CODE XREF: sub_401DC8+65j
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx+edx*4]
		mov	dword_403014, eax
		cmp	byte ptr [eax],	2Dh
		jz	short loc_401EC8

loc_401EB9:				; CODE XREF: sub_401DC8+104j
		mov	eax, offset dword_401B28
		mov	dword_403014, eax
		jmp	short loc_401E88
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401EC8:				; CODE XREF: sub_401DC8+EFj
		cmp	byte ptr [eax+1], 0
		jz	short loc_401EB9
		cmp	dword_403018, 0FFFFFFFFh
		jz	short loc_401EE4
		cmp	dword_40301C, 0FFFFFFFFh
		jz	loc_4020F5

loc_401EE4:				; CODE XREF: sub_401DC8+10Dj
					; sub_401DC8+333j
		mov	eax, dword_403014
		mov	edx, eax
		cmp	byte ptr [eax+1], 0
		jz	short loc_401F08
		inc	eax
		mov	dword_403014, eax
		cmp	byte ptr [edx+1], 2Dh
		jz	loc_4020F0
		lea	esi, [esi+0]

loc_401F08:				; CODE XREF: sub_401DC8+127j
					; sub_401DC8+340j
		movsx	ebx, byte ptr [eax]
		lea	ecx, [eax+1]
		mov	dword_403014, ecx
		cmp	ebx, 3Ah
		jz	loc_4020AD
		movzx	eax, byte ptr [edi]
		xor	edx, edx
		cmp	al, 2Dh
		jz	loc_4020E6
		cmp	al, 2Bh
		jz	loc_4020E6

loc_401F32:				; CODE XREF: sub_401DC8+323j
		lea	edx, [edx+edi]
		mov	eax, ebx
		mov	ah, al

loc_401F39:				; CODE XREF: sub_401DC8+17Aj
		mov	al, [edx]
		cmp	al, ah
		jz	short loc_401F46
		inc	edx
		test	al, al
		jnz	short loc_401F39
		xor	edx, edx

loc_401F46:				; CODE XREF: sub_401DC8+175j
		mov	eax, edx
		mov	[ebp+var_14], eax
		test	eax, eax
		jz	loc_4020AD
		cmp	ebx, 57h
		jz	loc_40202B

loc_401F5C:				; CODE XREF: sub_401DC8+267j
		mov	eax, [ebp+var_14]
		mov	edx, [ebp+var_14]
		inc	eax
		cmp	byte ptr [edx+1], 3Ah
		jz	short loc_401F7B
		cmp	byte ptr [ecx],	0
		jnz	short loc_401F74
		inc	dword_40300C

loc_401F74:				; CODE XREF: sub_401DC8+1A4j
					; sub_401DC8+1DEj
		mov	eax, ebx
		jmp	loc_401E8D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F7B:				; CODE XREF: sub_401DC8+19Fj
		xor	edx, edx
		mov	ds:dword_404004, edx
		cmp	byte ptr [ecx],	0
		jz	short loc_401FA8
		mov	ds:dword_404004, ecx

loc_401F8E:				; CODE XREF: sub_401DC8+1E4j
		mov	edx, dword_40300C

loc_401F94:				; CODE XREF: sub_401DC8+25Ej
		mov	ecx, offset dword_401B28
		inc	edx
		mov	dword_403014, ecx
		mov	dword_40300C, edx
		jmp	short loc_401F74
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401FA8:				; CODE XREF: sub_401DC8+1BEj
		cmp	byte ptr [eax+1], 3Ah
		jz	short loc_401F8E
		mov	edx, dword_40300C
		inc	edx
		cmp	edx, esi
		mov	dword_40300C, edx
		jl	short loc_40201B
		mov	esi, dword_403008
		mov	eax, offset dword_401B28
		mov	dword_403014, eax
		test	esi, esi
		jz	short loc_401FE8
		cmp	byte ptr [edi],	3Ah
		jz	short loc_401FE8
		mov	[esp+28h+var_28], offset aOptionRequires ; "option requires an argument	-- %c"
		mov	[esp+28h+var_24], ebx
		call	sub_401CA8

loc_401FE8:				; CODE XREF: sub_401DC8+209j
					; sub_401DC8+20Ej
		mov	dword_403010, ebx
		movzx	edx, byte ptr [edi]
		cmp	dl, 2Dh
		jz	short loc_402013
		cmp	dl, 2Bh

loc_401FF9:				; CODE XREF: sub_401DC8+2CBj
		jz	short loc_402013

loc_401FFB:				; CODE XREF: sub_401DC8+24Fj
		cmp	dl, 3Ah
		mov	eax, 3Fh
		jnz	loc_401E8D

loc_402009:				; CODE XREF: sub_401DC8+251j
		mov	eax, 3Ah
		jmp	loc_401E8D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402013:				; CODE XREF: sub_401DC8+22Cj
					; sub_401DC8+231j ...
		cmp	byte ptr [edi+1], 3Ah
		jnz	short loc_401FFB
		jmp	short loc_402009
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40201B:				; CODE XREF: sub_401DC8+1F5j
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx+edx*4]
		mov	ds:dword_404004, eax
		jmp	loc_401F94
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40202B:				; CODE XREF: sub_401DC8+18Ej
		cmp	byte ptr [eax+1], 3Bh
		jnz	loc_401F5C
		cmp	byte ptr [ecx],	0
		mov	eax, 0FFFFFFFEh
		jnz	loc_401E8D
		mov	edx, dword_40300C
		inc	edx
		cmp	edx, esi
		mov	dword_40300C, edx
		jl	short loc_402098
		mov	ecx, dword_403008
		mov	esi, offset dword_401B28
		mov	dword_403014, esi
		test	ecx, ecx
		jz	short loc_402082
		cmp	byte ptr [edi],	3Ah
		jz	short loc_402082
		mov	[esp+28h+var_28], offset aOptionRequires ; "option requires an argument	-- %c"
		mov	[esp+28h+var_24], 57h
		call	sub_401CA8

loc_402082:				; CODE XREF: sub_401DC8+29Fj
					; sub_401DC8+2A4j
		mov	dword_403010, ebx
		movzx	eax, byte ptr [edi]
		cmp	al, 2Dh
		mov	dl, al
		jz	short loc_402013
		cmp	al, 2Bh
		jmp	loc_401FF9
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402098:				; CODE XREF: sub_401DC8+28Aj
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx+edx*4]

loc_40209E:				; CODE XREF: sub_401DC8+32Bj
		mov	dword_403014, eax
		mov	eax, 0FFFFFFFEh
		jmp	loc_401E8D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4020AD:				; CODE XREF: sub_401DC8+14Fj
					; sub_401DC8+185j
		cmp	byte ptr [ecx],	0
		jnz	short loc_4020B8
		inc	dword_40300C

loc_4020B8:				; CODE XREF: sub_401DC8+2E8j
		mov	eax, dword_403008
		test	eax, eax
		jz	short loc_4020D6
		cmp	byte ptr [edi],	3Ah
		jz	short loc_4020D6
		mov	[esp+28h+var_28], offset aUnknownOptionC ; "unknown option -- %c"
		mov	[esp+28h+var_24], ebx
		call	sub_401CA8

loc_4020D6:				; CODE XREF: sub_401DC8+2F7j
					; sub_401DC8+2FCj
		mov	dword_403010, ebx
		mov	eax, 3Fh
		jmp	loc_401E8D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4020E6:				; CODE XREF: sub_401DC8+15Cj
					; sub_401DC8+164j
		mov	edx, 1
		jmp	loc_401F32
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4020F0:				; CODE XREF: sub_401DC8+133j
		lea	eax, [edx+2]
		jmp	short loc_40209E
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4020F5:				; CODE XREF: sub_401DC8+116j
		mov	dword_40301C, edx
		jmp	loc_401EE4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402100:				; CODE XREF: sub_401DC8+3Bj
		mov	eax, dword_403014
		cmp	byte ptr [eax],	0
		jnz	loc_401F08
		jmp	loc_401E1D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_402118:				; CODE XREF: sub_401DC8+1Fj
		mov	eax, ds:dword_404000
		jmp	loc_401E01
sub_401DC8	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402128	proc near		; CODE XREF: sub_401140+1DAp

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], ebx
		mov	eax, [ebp+arg_0]
		mov	ebx, [ebp+arg_4]
		mov	[esp+18h+var_18], eax
		mov	eax, [ebp+arg_8]
		mov	[esp+18h+var_14], ebx
		mov	[esp+18h+var_10], eax
		call	sub_401DC8
		cmp	eax, 0FFFFFFFEh
		jz	short loc_402158

loc_40214F:				; CODE XREF: sub_402128+8Dj
		mov	ebx, [ebp+var_4]
		mov	esp, ebp
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_402158:				; CODE XREF: sub_402128+25j
		mov	ecx, dword_40300C
		mov	edx, dword_40301C
		inc	ecx
		mov	dword_40300C, ecx
		cmp	edx, 0FFFFFFFFh
		jz	short loc_40219C
		mov	[esp+18h+var_14], edx
		mov	eax, dword_403018
		mov	[esp+18h+var_10], ecx
		mov	[esp+18h+var_C], ebx
		mov	[esp+18h+var_18], eax
		call	sub_401D08
		mov	edx, dword_403018
		mov	eax, dword_40301C
		sub	eax, edx
		sub	dword_40300C, eax

loc_40219C:				; CODE XREF: sub_402128+46j
		mov	eax, 0FFFFFFFFh
		mov	dword_40301C, eax
		mov	eax, 0FFFFFFFFh
		mov	dword_403018, eax
		mov	eax, 0FFFFFFFFh
		jmp	short loc_40214F
sub_402128	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1Ch
		mov	eax, [ebp+8]
		mov	edx, [ebp+10h]
		mov	[esp], eax
		mov	eax, [ebp+0Ch]
		mov	[esp+8], edx
		mov	[esp+4], eax
		call	sub_401DC8
		cmp	eax, 0FFFFFFFEh
		jz	short loc_4021E8

loc_4021DF:				; CODE XREF: .text:00402265j
					; .text:00402358j ...
		add	esp, 1Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4021E8:				; CODE XREF: .text:004021DDj
		mov	dword ptr [ebp-18h], 0FFFFFFFFh
		mov	ecx, dword_40300C
		mov	ebx, offset dword_401B28
		mov	edi, dword_403014
		mov	dword_403014, ebx
		inc	ecx
		mov	dword_40300C, ecx
		cmp	byte ptr [edi],	0
		jnz	short loc_40226A
		mov	edx, dword_40301C
		cmp	edx, 0FFFFFFFFh
		jz	short loc_40224C
		mov	[esp+8], ecx
		mov	eax, dword_403018
		mov	ecx, [ebp+0Ch]
		mov	[esp+4], edx
		mov	[esp], eax
		mov	[esp+0Ch], ecx
		call	sub_401D08
		mov	edx, dword_403018
		mov	eax, dword_40301C
		sub	eax, edx
		sub	dword_40300C, eax

loc_40224C:				; CODE XREF: .text:0040221Bj
		mov	eax, 0FFFFFFFFh
		mov	dword_40301C, eax
		mov	eax, 0FFFFFFFFh
		mov	dword_403018, eax
		mov	eax, 0FFFFFFFFh
		jmp	loc_4021DF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40226A:				; CODE XREF: .text:00402210j
		mov	ecx, 3Dh
		mov	eax, ecx
		mov	edx, edi
		mov	ah, al

loc_402275:				; CODE XREF: .text:0040227Ej
		mov	al, [edx]
		cmp	al, ah
		jz	short loc_402282
		inc	edx
		test	al, al
		jnz	short loc_402275
		xor	edx, edx

loc_402282:				; CODE XREF: .text:00402279j
		mov	eax, edx
		mov	[ebp-10h], eax
		test	eax, eax
		jz	loc_40250F
		inc	dword ptr [ebp-10h]
		sub	eax, edi
		mov	[ebp-14h], eax

loc_402297:				; CODE XREF: .text:0040251Aj
		mov	ecx, [ebp+14h]
		xor	esi, esi
		mov	eax, [ecx]
		test	eax, eax
		jz	short loc_4022D7
		xor	ebx, ebx
		lea	esi, [esi+0]

loc_4022A8:				; CODE XREF: .text:004022D5j
		mov	[esp], edi
		mov	edx, [ebp+14h]
		mov	ecx, [ebp-14h]
		mov	eax, [edx+ebx]
		mov	[esp+8], ecx
		mov	[esp+4], eax
		call	strncmp
		test	eax, eax
		jz	loc_4024BC

loc_4022C9:				; CODE XREF: .text:004024D8j
		mov	edx, [ebp+14h]
		add	ebx, 10h
		inc	esi
		mov	eax, [edx+ebx]
		test	eax, eax
		jnz	short loc_4022A8

loc_4022D7:				; CODE XREF: .text:004022A0j
					; .text:0040250Aj
		cmp	dword ptr [ebp-18h], 0FFFFFFFFh
		jz	loc_402488
		mov	eax, [ebp-18h]
		mov	ecx, [ebp+14h]
		shl	eax, 4
		mov	esi, [ecx+eax+4]
		test	esi, esi
		jnz	loc_40237C
		mov	ebx, [ebp-10h]
		test	ebx, ebx
		jz	short loc_40237C
		mov	ecx, dword_403008
		test	ecx, ecx
		jz	short loc_402326
		mov	eax, [ebp+10h]
		cmp	byte ptr [eax],	3Ah
		jz	short loc_402326
		mov	dword ptr [esp], offset	aOptionDoesnTTa	; "option doesn't take an argument -- %.*s"...
		mov	edx, [ebp-14h]
		mov	[esp+8], edi
		mov	[esp+4], edx
		call	sub_401CA8

loc_402326:				; CODE XREF: .text:00402305j
					; .text:0040230Dj
		mov	eax, [ebp-18h]
		mov	ecx, [ebp+14h]
		shl	eax, 4
		mov	edx, [ecx+eax+8]
		test	edx, edx
		jnz	short loc_402373
		mov	eax, [ecx+eax+0Ch]
		mov	dword_403010, eax

loc_402340:				; CODE XREF: .text:0040237Aj
		mov	edx, [ebp+10h]
		movzx	eax, byte ptr [edx]
		cmp	al, 2Dh
		mov	dl, al
		jz	short loc_402368
		cmp	al, 2Bh
		jz	short loc_402368

loc_402350:				; CODE XREF: .text:0040236Fj
					; .text:00402448j
		cmp	dl, 3Ah
		mov	eax, 3Fh
		jnz	loc_4021DF

loc_40235E:				; CODE XREF: .text:00402371j
		mov	eax, 3Ah
		jmp	loc_4021DF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402368:				; CODE XREF: .text:0040234Aj
					; .text:0040234Ej
		mov	ecx, [ebp+10h]
		cmp	byte ptr [ecx+1], 3Ah

loc_40236F:				; CODE XREF: .text:00402455j
		jnz	short loc_402350
		jmp	short loc_40235E
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402373:				; CODE XREF: .text:00402335j
		xor	eax, eax
		mov	dword_403010, eax
		jmp	short loc_402340
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40237C:				; CODE XREF: .text:004022F0j
					; .text:004022FBj
		mov	eax, [ebp-18h]
		mov	ecx, [ebp+14h]
		shl	eax, 4
		mov	edx, [ecx+eax+4]
		lea	eax, [edx-1]
		cmp	eax, 1
		ja	short loc_4023A4
		mov	eax, [ebp-10h]
		test	eax, eax
		jz	loc_402464
		mov	eax, [ebp-10h]
		mov	ds:dword_404004, eax

loc_4023A4:				; CODE XREF: .text:0040238Fj
					; .text:00402465j ...
		mov	eax, [ebp-18h]
		mov	edx, [ebp+14h]
		shl	eax, 4
		cmp	dword ptr [edx+eax+4], 1
		jz	short loc_4023EE

loc_4023B4:				; CODE XREF: .text:004023F6j
		mov	eax, [ebp-18h]
		mov	ecx, [ebp+14h]
		shl	eax, 4
		mov	edx, [ecx+eax+8]
		test	edx, edx
		jz	short loc_4023E5
		mov	eax, [ecx+eax+0Ch]
		mov	[edx], eax
		xor	eax, eax

loc_4023CD:				; CODE XREF: .text:004023ECj
		mov	ecx, [ebp+18h]
		test	ecx, ecx
		jz	loc_4021DF
		mov	edx, [ebp-18h]
		mov	ecx, [ebp+18h]
		mov	[ecx], edx
		jmp	loc_4021DF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4023E5:				; CODE XREF: .text:004023C3j
		mov	edx, [ebp+14h]
		mov	eax, [edx+eax+0Ch]
		jmp	short loc_4023CD
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4023EE:				; CODE XREF: .text:004023B2j
		mov	esi, ds:dword_404004
		test	esi, esi
		jnz	short loc_4023B4
		mov	ebx, dword_403008
		test	ebx, ebx
		jz	short loc_40241A
		mov	ecx, [ebp+10h]
		cmp	byte ptr [ecx],	3Ah
		jz	short loc_40241A
		mov	dword ptr [esp], offset	aOptionRequir_0	; "option requires an argument -- %s"
		mov	[esp+4], edi
		call	sub_401CA8

loc_40241A:				; CODE XREF: .text:00402400j
					; .text:00402408j
		mov	eax, [ebp-18h]
		mov	edx, [ebp+14h]
		shl	eax, 4
		mov	ecx, [edx+eax+8]
		test	ecx, ecx
		jnz	short loc_40245A
		mov	eax, [edx+eax+0Ch]
		mov	dword_403010, eax

loc_402434:				; CODE XREF: .text:00402462j
		dec	dword_40300C
		mov	ecx, [ebp+10h]
		movzx	edx, byte ptr [ecx]
		cmp	dl, 2Dh
		jz	short loc_40244E
		cmp	dl, 2Bh
		jnz	loc_402350

loc_40244E:				; CODE XREF: .text:00402443j
		mov	eax, [ebp+10h]
		cmp	byte ptr [eax+1], 3Ah
		jmp	loc_40236F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40245A:				; CODE XREF: .text:00402429j
		xor	edi, edi
		mov	dword_403010, edi
		jmp	short loc_402434
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402464:				; CODE XREF: .text:00402396j
		dec	edx
		jnz	loc_4023A4
		mov	eax, dword_40300C
		mov	ecx, [ebp+0Ch]
		mov	edx, [ecx+eax*4]
		inc	eax
		mov	dword_40300C, eax
		mov	ds:dword_404004, edx
		jmp	loc_4023A4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_402488:				; CODE XREF: .text:004022DBj
		mov	esi, dword_403008
		test	esi, esi
		jz	short loc_4024AA
		mov	edx, [ebp+10h]
		cmp	byte ptr [edx],	3Ah
		jz	short loc_4024AA
		mov	dword ptr [esp], offset	aUnknownOptionS	; "unknown option -- %s"
		mov	[esp+4], edi
		call	sub_401CA8

loc_4024AA:				; CODE XREF: .text:00402490j
					; .text:00402498j ...
		xor	ebx, ebx
		mov	eax, 3Fh
		mov	dword_403010, ebx
		jmp	loc_4021DF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4024BC:				; CODE XREF: .text:004022C3j
		mov	edx, [ebp+14h]
		mov	eax, [edx+ebx]
		mov	[esp], eax
		call	strlen
		cmp	eax, [ebp-14h]
		jz	short loc_402507
		cmp	dword ptr [ebp-18h], 0FFFFFFFFh
		jnz	short loc_4024DD
		mov	[ebp-18h], esi
		jmp	loc_4022C9
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4024DD:				; CODE XREF: .text:004024D3j
		mov	eax, dword_403008
		test	eax, eax
		jz	short loc_4024AA
		mov	ecx, [ebp+10h]
		cmp	byte ptr [ecx],	3Ah
		jz	short loc_4024AA
		mov	dword ptr [esp], offset	aAmbiguousOptio	; "ambiguous option -- %.*s"
		mov	eax, [ebp-14h]
		mov	[esp+8], edi
		mov	[esp+4], eax
		call	sub_401CA8
		jmp	short loc_4024AA
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402507:				; CODE XREF: .text:004024CDj
		mov	[ebp-18h], esi
		jmp	loc_4022D7
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40250F:				; CODE XREF: .text:00402289j
		mov	[esp], edi
		call	strlen
		mov	[ebp-14h], eax
		jmp	loc_402297
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		dd 2 dup(90909090h)
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402528	proc near		; CODE XREF: sub_401AC0+1Cp
					; sub_401AC0+41p

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		xor	eax, eax
		push	ebx
		sub	esp, 4		; lpModuleName
		mov	ebx, [ebp+arg_4]
		test	ebx, ebx
		jz	loc_402624

loc_40253C:				; CODE XREF: sub_402528+118j
		mov	dword ptr [ebx+4], 0A8h
		xor	ecx, ecx
		mov	edx, 35h
		mov	dword ptr [ebx+8], 3EBh
		test	eax, eax
		mov	dword ptr [ebx+0Ch], 0Bh
		mov	[ebx+80h], ecx
		mov	[ebx+84h], edx
		mov	dword ptr [ebx+2Ch], offset dword_402748
		mov	dword ptr [ebx+30h], offset dword_402750
		mov	dword ptr [ebx+14h], offset unk_404008
		jz	loc_402618
		mov	eax, [ebx+0A4h]
		mov	ds:dword_40400C, eax

loc_40258C:				; CODE XREF: sub_402528+F7j
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [ebx+24h], offset unk_404010
		mov	dword ptr [ebx+48h], offset sub_402728
		mov	dword ptr [ebx+4Ch], offset sub_402718
		mov	[ebx+28h], eax
		mov	dword ptr [ebx+50h], offset sub_402708
		mov	dword ptr [ebx+54h], offset sub_4026F8
		mov	eax, [ebp+0]
		mov	dword ptr [ebx+44h], offset calloc
		mov	dword ptr [ebx+18h], offset loc_4026F0
		mov	dword ptr [ebx+1Ch], offset loc_4026E8
		mov	[ebx], eax
		mov	dword ptr [ebx+20h], offset loc_4026E0
		mov	[esp+8+var_8], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	eax, 1
		mov	dword ptr [ebx+34h], offset dword_403000
		mov	dword ptr [ebx+38h], offset unk_403030
		mov	dword ptr [ebx+3Ch], offset dword_404000
		mov	dword ptr [ebx+40h], 404024h

loc_402610:				; CODE XREF: sub_402528+10Fj
		mov	ebx, [ebp+var_4]
		leave
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_402618:				; CODE XREF: sub_402528+53j
		mov	dword ptr [ebx+10h], offset dword_40400C
		jmp	loc_40258C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402624:				; CODE XREF: sub_402528+Ej
		mov	[esp+8+var_8], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_402610
		mov	ebx, edx
		mov	eax, 1
		jmp	loc_40253C
sub_402528	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION exit. PRESS KEYPAD "+" TO	EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION remove. PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fclose. PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION getpid. PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fprintf. PRESS KEYPAD "+"	TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION fopen. PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION calloc. PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION raise. PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION signal. PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION __errno. PRESS KEYPAD "+"	TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION ctime. PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION time. PRESS KEYPAD "+" TO	EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strerror.	PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION vfprintf.	PRESS KEYPAD "+" TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strtol. PRESS KEYPAD "+" TO EXPAND]
		align 4
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strncmp. PRESS KEYPAD "+"	TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION strlen. PRESS KEYPAD "+" TO EXPAND]
		align 4

loc_4026D8:				; CODE XREF: sub_401C28+6Cj
		jmp	ds:fputc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4026E0:				; DATA XREF: sub_402528+AEo
		jmp	ds:realloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4026E8:				; DATA XREF: sub_402528+A5o
		jmp	ds:free
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4026F0:				; DATA XREF: sub_402528+9Eo
		jmp	ds:malloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4026F8	proc near		; DATA XREF: sub_402528+8Do
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4026F8	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		dd 2 dup(90909090h)
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402708	proc near		; DATA XREF: sub_402528+86o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402708	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		dd 2 dup(90909090h)
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402718	proc near		; DATA XREF: sub_402528+7Co
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402718	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		dd 2 dup(90909090h)
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402728	proc near		; DATA XREF: sub_402528+75o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402728	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		dd 2 dup(90909090h)
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 4
dword_402748	dd 0FFFFFFFFh, 0	; DATA XREF: sub_402528+3Eo
dword_402750	dd 0FFFFFFFFh, 2Bh dup(0) ; DATA XREF: sub_402528+45o
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 00000030 (	 48.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001C00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 403000h
dword_403000	dd 0			; DATA XREF: start+6r sub_402528+CCo
dword_403004	dd 4010CCh		; DATA XREF: sub_4014C0+42r
					; sub_401560+5Fr ...
dword_403008	dd 1			; DATA XREF: sub_401DC8+1F7r
					; sub_401DC8+28Cr ...
dword_40300C	dd 1			; DATA XREF: sub_401140+1EBr
					; sub_401DC8+11r ...
dword_403010	dd 3Fh			; DATA XREF: sub_401DC8+220w
					; sub_401DC8+2BAw ...
dword_403014	dd 401B28h		; DATA XREF: sub_401DC8+6Cw
					; sub_401DC8+E7w ...
dword_403018	dd 0FFFFFFFFh		; DATA XREF: sub_401DC8+50w
					; sub_401DC8+81r ...
dword_40301C	dd 0FFFFFFFFh		; DATA XREF: sub_401DC8+46w
					; sub_401DC8+72r ...
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_403030	db    0	;		; DATA XREF: sub_402528+D3o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_data		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 00000024 (	 36.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 404000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_404000	dd ?			; DATA XREF: sub_401DC8+25r
					; sub_401DC8+5Dw ...
dword_404004	dd ?			; DATA XREF: sub_401140+138r
					; sub_401140+169r ...
unk_404008	db    ?	;		; DATA XREF: sub_402528+4Co
		db    ?	;
		db    ?	;
		db    ?	;
dword_40400C	dd ?			; DATA XREF: sub_4014C0+37r
					; sub_4016A8+1r ...
unk_404010	db    ?	;		; DATA XREF: sub_402528+6Eo
		db    ?	;
		db    ?	;
		db    ?	;
dword_404014	dd ?			; DATA XREF: sub_401140+284r
					; sub_401140+2EEr ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
_bss		ends

;
; Imports from cygdb2
;
; Section 4. (virtual address 00005000)
; Virtual size			: 00000390 (	912.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001E00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp___os_sleep:dword ; DATA XREF: __os_sleepr
		extrn __imp_db_appexit:dword ; DATA XREF: db_appexitr
		extrn __imp_db_appinit:dword ; DATA XREF: db_appinitr
		extrn __imp_lock_detect:dword ;	DATA XREF: lock_detectr


;
; Imports from cygwin1
;
		extrn __imp___errno:dword ; DATA XREF: __errnor
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn __progname:dword	; DATA XREF: sub_401C28+25r
; void *__cdecl	_imp_calloc(size_t,size_t)
		extrn __imp_calloc:dword ; DATA	XREF: callocr
; char *__cdecl	_imp_ctime(const time_t	*)
		extrn __imp_ctime:dword	; DATA XREF: ctimer
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_401AC0+4Cr
					; .text:004026C0r
; void __cdecl _imp_exit(int)
		extrn __imp_exit:dword	; DATA XREF: exitr
		extrn __imp_fclose:dword ; DATA	XREF: fcloser
		extrn __imp_fopen:dword	; DATA XREF: fopenr
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
		extrn fputc:dword	; DATA XREF: .text:004026D8r
; void __cdecl free(void *)
		extrn free:dword	; DATA XREF: .text:004026E8r
		extrn __imp_getpid:dword ; DATA	XREF: getpidr
; void *__cdecl	malloc(size_t)
		extrn malloc:dword	; DATA XREF: .text:004026F0r
		extrn __imp_raise:dword	; DATA XREF: raiser
; void *__cdecl	realloc(void *,size_t)
		extrn realloc:dword	; DATA XREF: .text:004026E0r
		extrn __imp_remove:dword ; DATA	XREF: remover
		extrn __imp_signal:dword ; DATA	XREF: signalr
; char *__cdecl	_imp_strerror(int)
		extrn __imp_strerror:dword ; DATA XREF:	strerrorr
; size_t __cdecl _imp_strlen(const char	*)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; int __cdecl _imp_strncmp(const char *,const char *,size_t)
		extrn __imp_strncmp:dword ; DATA XREF: strncmpr
; __int32 __cdecl _imp_strtol(const char *,char	**,int)
		extrn __imp_strtol:dword ; DATA	XREF: strtolr
; time_t __cdecl _imp_time(time_t *)
		extrn __imp_time:dword	; DATA XREF: timer
		extrn __imp_vfprintf:dword ; DATA XREF:	vfprintfr


;
; Imports from KERNEL32
;
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr



		end start
