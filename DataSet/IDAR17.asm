

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\getfacl.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00000A50 (   2640.)
; Section size in file		: 00000C00 (   3072.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		and	esp, 0FFFFFFF0h
		mov	eax, ds:dword_404000
		test	eax, eax
		jz	short loc_401013
		int	3		; Trap to Debugger

loc_401013:				; CODE XREF: start+10j
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_4011C0
		call	sub_401640
		leave
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401050	proc near		; CODE XREF: sub_4011C0+2F4p

arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		mov	edx, [ebp+arg_0]
		pop	ebp
		mov	ds:byte_404013,	0
		mov	eax, edx
		and	eax, 4
		cmp	eax, 1
		sbb	eax, eax
		and	al, 0BBh
		add	al, 72h
		mov	ds:byte_404010,	al
		mov	eax, edx
		and	eax, 2
		cmp	eax, 1
		sbb	eax, eax
		and	al, 0B6h
		and	edx, 1
		add	al, 77h
		cmp	edx, 1
		mov	ds:byte_404011,	al
		sbb	eax, eax
		and	al, 0B5h
		add	al, 78h
		mov	ds:byte_404012,	al
		mov	eax, offset byte_404010
		retn
sub_401050	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4010A0	proc near		; CODE XREF: sub_4011C0+3ADp
					; sub_4011C0+42Ep

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_0]
		mov	[esp+18h+var_18], ebx
		call	_getpwuid32
		test	eax, eax
		jz	short loc_4010D3
		mov	eax, [eax]
		mov	[esp+18h+var_18], offset unk_404020
		mov	[esp+18h+var_14], eax
		call	strcpy
		add	esp, 14h
		mov	eax, offset unk_404020
		pop	ebx
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4010D3:				; CODE XREF: sub_4010A0+14j
		mov	[esp+18h+var_10], ebx
		mov	eax, offset aLuUnknown ; "%lu <unknown>"
		mov	[esp+18h+var_14], eax
		mov	[esp+18h+var_18], offset unk_404020
		call	sprintf
		add	esp, 14h
		mov	eax, offset unk_404020
		pop	ebx
		pop	ebp
		retn
sub_4010A0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401100	proc near		; CODE XREF: sub_4011C0+3C8p
					; sub_4011C0+407p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, [ebp+arg_0]
		mov	[esp+18h+var_18], ebx
		call	_getgrgid32
		test	eax, eax
		jz	short loc_401133
		mov	eax, [eax]
		mov	[esp+18h+var_18], offset unk_404120
		mov	[esp+18h+var_14], eax
		call	strcpy
		add	esp, 14h
		mov	eax, offset unk_404120
		pop	ebx
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401133:				; CODE XREF: sub_401100+14j
		mov	[esp+18h+var_10], ebx
		mov	edx, offset aLuUnknown ; "%lu <unknown>"
		mov	[esp+18h+var_14], edx
		mov	[esp+18h+var_18], offset unk_404120
		call	sprintf
		add	esp, 14h
		mov	eax, offset unk_404120
		pop	ebx
		pop	ebp
		retn
sub_401100	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401160	proc near		; CODE XREF: sub_4011C0+AEp
					; sub_4011C0+148p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, eax
		mov	[esp+18h+var_18], ebx
		mov	eax, ds:dword_404220
		mov	[esp+18h+var_10], eax
		mov	eax, offset aUsageSAdnFileF ; "Usage: %s [-adn]	FILE [FILE2...]\nDispla"...
		mov	[esp+18h+var_14], eax
		call	fprintf
		call	__getreent
		mov	eax, [eax+8]
		cmp	eax, ebx
		jz	short loc_401195

loc_40118F:				; CODE XREF: sub_401160+57j
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401195:				; CODE XREF: sub_401160+2Dj
		mov	[esp+18h+var_C], eax
		mov	ebx, 2D0h
		mov	ecx, 1
		mov	[esp+18h+var_10], ebx
		mov	[esp+18h+var_14], ecx
		mov	[esp+18h+var_18], offset aForEachArgumen ; "For	each argument that is a	regular	fil"...
		call	fwrite
		jmp	short loc_40118F
sub_401160	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4011C0	proc near		; DATA XREF: start+33o

var_CA8		= dword	ptr -0CA8h
var_CA4		= dword	ptr -0CA4h
var_CA0		= dword	ptr -0CA0h
var_C9C		= dword	ptr -0C9Ch
var_C98		= dword	ptr -0C98h
var_C88		= dword	ptr -0C88h
var_C84		= dword	ptr -0C84h
var_C80		= dword	ptr -0C80h
var_C7C		= dword	ptr -0C7Ch
var_C78		= dword	ptr -0C78h
var_C74		= dword	ptr -0C74h
var_C70		= dword	ptr -0C70h
var_78		= dword	ptr -78h
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	eax, 10h
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0C9Ch
		mov	edi, [ebp+arg_4]
		and	esp, 0FFFFFFF0h
		call	sub_401610
		call	__main
		xor	eax, eax
		xor	edx, edx
		mov	[ebp+var_C80], eax
		xor	eax, eax
		mov	[ebp+var_C84], eax
		mov	eax, 1
		mov	[ebp+var_C88], eax
		mov	eax, 2Fh
		mov	[ebp+var_C7C], edx
		mov	[esp+0CA8h+var_CA4], eax
		mov	eax, [edi]
		mov	[esp+0CA8h+var_CA8], eax
		call	strrchr
		test	eax, eax
		jz	loc_401331

loc_40121F:				; CODE XREF: sub_4011C0+18Dj
		inc	eax

loc_401220:				; CODE XREF: sub_4011C0+195j
		mov	ds:dword_404220, eax

loc_401225:				; CODE XREF: sub_4011C0+13Bj
					; sub_4011C0+15Cj ...
		mov	[esp+0CA8h+var_CA4], edi
		xor	eax, eax
		mov	[esp+0CA8h+var_C98], eax
		mov	eax, offset off_402000
		mov	[esp+0CA8h+var_C9C], eax
		mov	eax, offset aAdhnv ; "adhnv"
		mov	[esp+0CA8h+var_CA0], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+0CA8h+var_CA8], eax
		call	getopt_long
		cmp	eax, 0FFFFFFFFh
		mov	ebx, eax
		jz	loc_401369
		lea	eax, [ebx-61h]	; switch 22 cases
		cmp	eax, 15h
		ja	short loc_401266 ; default
		jmp	ds:off_403660[eax*4] ; switch jump

loc_401266:				; CODE XREF: sub_4011C0+9Dj
					; sub_4011C0+1B7j
					; DATA XREF: ...
		call	__getreent	; default
		mov	eax, [eax+0Ch]
		call	sub_401160
		lea	esp, [ebp+var_C]
		mov	eax, 1
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401280:				; CODE XREF: sub_4011C0+9Fj
					; DATA XREF: .rdata:00403660o
		mov	edx, offset aRevision1_13 ; case 0x76
		mov	eax, 3Ah
		mov	ah, al

loc_40128C:				; CODE XREF: sub_4011C0+D5j
		mov	al, [edx]
		cmp	al, ah
		jz	short loc_401299
		inc	edx
		test	al, al
		jnz	short loc_40128C
		xor	edx, edx

loc_401299:				; CODE XREF: sub_4011C0+D0j
		mov	eax, edx
		test	eax, eax
		mov	ecx, eax
		jz	loc_40135A
		add	ecx, 2
		mov	eax, 20h
		mov	edx, ecx
		mov	ah, al

loc_4012B1:				; CODE XREF: sub_4011C0+FAj
		mov	al, [edx]
		cmp	al, ah
		jz	short loc_4012BE
		inc	edx
		test	al, al
		jnz	short loc_4012B1
		xor	edx, edx

loc_4012BE:				; CODE XREF: sub_4011C0+F5j
		mov	eax, edx
		sub	eax, ecx

loc_4012C2:				; CODE XREF: sub_4011C0+1A4j
		mov	[esp+0CA8h+var_CA0], ecx
		mov	edx, offset aJan202006 ; "Jan 20 2006"
		mov	[esp+0CA8h+var_C9C], edx
		mov	[esp+0CA8h+var_CA4], eax
		mov	[esp+0CA8h+var_CA8], offset aGetfaclCygwin_ ; "getfacl (cygwin)	%.*s\nACL Utility\nCopyr"...
		call	printf

loc_4012DF:				; CODE XREF: sub_4011C0+1C7j
		xor	eax, eax

loc_4012E1:				; CODE XREF: sub_4011C0+14Fj
		lea	esp, [ebp+var_C]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_4012F0:				; CODE XREF: sub_4011C0+9Fj
					; DATA XREF: .rdata:00403660o
		mov	ecx, 1		; case 0x6E
		mov	[ebp+var_C84], ecx
		jmp	loc_401225
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401300:				; CODE XREF: sub_4011C0+9Fj
					; DATA XREF: .rdata:00403660o
		call	__getreent	; case 0x68
		mov	eax, [eax+8]
		call	sub_401160
		xor	eax, eax
		jmp	short loc_4012E1
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401311:				; CODE XREF: sub_4011C0+9Fj
					; DATA XREF: .rdata:00403660o
		mov	ebx, 1		; case 0x64
		mov	[ebp+var_C80], ebx
		jmp	loc_401225
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401321:				; CODE XREF: sub_4011C0+9Fj
					; DATA XREF: .rdata:00403660o
		mov	esi, 1		; case 0x61
		mov	[ebp+var_C7C], esi
		jmp	loc_401225
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401331:				; CODE XREF: sub_4011C0+59j
		xor	eax, eax
		mov	ds:dword_404220, eax
		mov	eax, 5Ch
		mov	[esp+0CA8h+var_CA4], eax
		mov	eax, [edi]
		mov	[esp+0CA8h+var_CA8], eax
		call	strrchr
		test	eax, eax
		jnz	loc_40121F
		mov	eax, [edi]
		jmp	loc_401220
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40135A:				; CODE XREF: sub_4011C0+DFj
		mov	ecx, offset a?	; "?"
		mov	eax, 1
		jmp	loc_4012C2
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401369:				; CODE XREF: sub_4011C0+91j
		mov	ecx, ds:optind
		mov	eax, [ebp+arg_0]
		mov	edx, [ecx]
		dec	eax
		cmp	eax, edx
		jl	loc_401266	; default
		lea	eax, [edx+1]
		mov	ebx, edx
		mov	[ecx], eax

loc_401384:				; CODE XREF: sub_4011C0+2AEj
		cmp	ebx, [ebp+arg_0]
		jge	loc_4012DF
		lea	eax, [ebp+var_78]
		mov	[esp+0CA8h+var_CA4], eax
		mov	eax, [edi+ebx*4]
		mov	[esp+0CA8h+var_CA8], eax
		call	_stat64
		test	eax, eax
		jnz	loc_401558
		mov	eax, [ebp+var_C88]
		test	eax, eax
		jz	loc_40159D

loc_4013B5:				; CODE XREF: sub_4011C0+3F5j
		mov	eax, [edi+ebx*4]
		xor	esi, esi
		mov	[ebp+var_C88], esi
		mov	[esp+0CA8h+var_CA8], offset aFileS ; "#	file: %s\n"
		mov	[esp+0CA8h+var_CA4], eax
		call	printf
		mov	ecx, [ebp+var_C84]
		test	ecx, ecx
		jz	loc_401567
		mov	eax, [ebp+var_60]
		mov	[esp+0CA8h+var_CA8], offset aOwnerLu ; "# owner: %lu\n"
		mov	[esp+0CA8h+var_CA4], eax
		call	printf
		mov	eax, [ebp+var_5C]
		mov	[esp+0CA8h+var_CA8], offset aGroupLu ; "# group: %lu\n"
		mov	[esp+0CA8h+var_CA4], eax

loc_4013FF:				; CODE XREF: sub_4011C0+3D8j
		call	printf
		lea	eax, [ebp+var_C78]
		mov	edx, 100h
		mov	[esp+0CA8h+var_C9C], eax
		mov	eax, 1
		mov	[esp+0CA8h+var_CA0], edx
		mov	[esp+0CA8h+var_CA4], eax
		mov	eax, [edi+ebx*4]
		mov	[esp+0CA8h+var_CA8], eax
		call	_acl32
		test	eax, eax
		mov	ebx, eax
		js	loc_401558
		xor	esi, esi
		cmp	esi, ebx
		jge	short loc_401460
		nop
		lea	esi, [esi+0]

loc_401440:				; CODE XREF: sub_4011C0+29Ej
		lea	eax, [esi+esi*2]
		test	byte ptr [ebp+eax*4+var_C78+1],	10h
		jz	loc_401544
		mov	eax, [ebp+var_C7C]
		test	eax, eax
		jz	short loc_401473
		inc	esi

loc_40145C:				; CODE XREF: sub_4011C0+301j
					; sub_4011C0+393j
		cmp	esi, ebx
		jl	short loc_401440

loc_401460:				; CODE XREF: sub_4011C0+279j
					; sub_4011C0+3A2j
		mov	eax, ds:optind
		mov	ecx, [eax]
		lea	edx, [ecx+1]
		mov	[eax], edx
		mov	ebx, ecx
		jmp	loc_401384
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401473:				; CODE XREF: sub_4011C0+299j
		mov	[esp+0CA8h+var_CA8], offset aDefault ; "default:"
		call	printf

loc_40147F:				; CODE XREF: sub_4011C0+38Cj
		lea	eax, [esi+esi*2]
		mov	eax, [ebp+eax*4+var_C78]
		and	eax, 0FFFFEFFFh
		cmp	eax, 20h	; switch 33 cases
		ja	short loc_4014A6 ; default
		jmp	ds:off_4036B8[eax*4] ; switch jump

loc_40149A:				; DATA XREF: .rdata:004036B8o
		mov	[esp+0CA8h+var_CA8], offset aUser ; case 0x1
		call	printf

loc_4014A6:				; CODE XREF: sub_4011C0+2D1j
					; sub_4011C0+2D3j ...
		lea	eax, [esi+esi*2] ; default
		mov	eax, [ebp+eax*4+var_C70]
		inc	esi
		mov	[esp+0CA8h+var_CA8], eax
		call	sub_401050
		mov	[esp+0CA8h+var_CA8], eax
		call	puts
		jmp	short loc_40145C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4014C3:				; CODE XREF: sub_4011C0+2D3j
					; DATA XREF: .rdata:004036B8o
		mov	[esp+0CA8h+var_CA8], offset aOther ; case 0x20
		call	printf
		jmp	short loc_4014A6 ; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4014D1:				; CODE XREF: sub_4011C0+2D3j
					; DATA XREF: .rdata:004036B8o
		mov	[esp+0CA8h+var_CA8], offset aMask ; case 0x10
		call	printf
		jmp	short loc_4014A6 ; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4014DF:				; CODE XREF: sub_4011C0+2D3j
					; DATA XREF: .rdata:004036B8o
		mov	eax, [ebp+var_C84] ; case 0x8
		test	eax, eax
		jz	loc_4015BA
		lea	eax, [esi+esi*2]
		mov	eax, [ebp+eax*4+var_C74]
		mov	[esp+0CA8h+var_CA8], offset aGroupLu_0 ; "group:%lu:"
		mov	[esp+0CA8h+var_CA4], eax
		call	printf
		jmp	short loc_4014A6 ; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401509:				; CODE XREF: sub_4011C0+2D3j
					; DATA XREF: .rdata:004036B8o
		mov	[esp+0CA8h+var_CA8], offset aGroup ; case 0x4
		call	printf
		jmp	short loc_4014A6 ; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401517:				; CODE XREF: sub_4011C0+2D3j
					; DATA XREF: .rdata:004036B8o
		mov	eax, [ebp+var_C84] ; case 0x2
		test	eax, eax
		jz	loc_4015E1
		lea	eax, [esi+esi*2]
		mov	eax, [ebp+eax*4+var_C74]
		mov	[esp+0CA8h+var_CA8], offset aUserLu ; "user:%lu:"
		mov	[esp+0CA8h+var_CA4], eax
		call	printf
		jmp	loc_4014A6	; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401544:				; CODE XREF: sub_4011C0+28Bj
		mov	eax, [ebp+var_C80]
		test	eax, eax
		jz	loc_40147F
		inc	esi
		jmp	loc_40145C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401558:				; CODE XREF: sub_4011C0+1E1j
					; sub_4011C0+26Fj
		mov	eax, [edi]
		mov	[esp+0CA8h+var_CA8], eax
		call	perror
		jmp	loc_401460
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401567:				; CODE XREF: sub_4011C0+218j
		mov	eax, [ebp+var_60]
		mov	[esp+0CA8h+var_CA8], eax
		call	sub_4010A0
		mov	[esp+0CA8h+var_CA4], eax
		mov	[esp+0CA8h+var_CA8], offset aOwnerS ; "# owner:	%s\n"
		call	printf
		mov	eax, [ebp+var_5C]
		mov	[esp+0CA8h+var_CA8], eax
		call	sub_401100
		mov	[esp+0CA8h+var_CA4], eax
		mov	[esp+0CA8h+var_CA8], offset aGroupS ; "# group:	%s\n"
		jmp	loc_4013FF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40159D:				; CODE XREF: sub_4011C0+1EFj
		call	__getreent
		mov	eax, [eax+8]
		mov	[esp+0CA8h+var_CA8], 0Ah
		mov	[esp+0CA8h+var_CA4], eax
		call	putc
		jmp	loc_4013B5
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4015BA:				; CODE XREF: sub_4011C0+327j
		lea	eax, [esi+esi*2]
		mov	eax, [ebp+eax*4+var_C74]
		mov	[esp+0CA8h+var_CA8], eax
		call	sub_401100
		mov	[esp+0CA8h+var_CA4], eax
		mov	[esp+0CA8h+var_CA8], offset aGroupS_0 ;	"group:%s:"
		call	printf
		jmp	loc_4014A6	; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4015E1:				; CODE XREF: sub_4011C0+35Fj
		lea	eax, [esi+esi*2]
		mov	eax, [ebp+eax*4+var_C74]
		mov	[esp+0CA8h+var_CA8], eax
		call	sub_4010A0
		mov	[esp+0CA8h+var_CA4], eax
		mov	[esp+0CA8h+var_CA8], offset aUserS ; "user:%s:"
		call	printf
		jmp	loc_4014A6	; default
sub_4011C0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401610	proc near		; CODE XREF: sub_4011C0+17p
		push	ecx
		mov	ecx, esp
		add	ecx, 8

loc_401616:				; CODE XREF: sub_401610+1Bj
		cmp	eax, 1000h
		jb	short loc_40162D
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		jmp	short loc_401616
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40162D:				; CODE XREF: sub_401610+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		jmp	eax
sub_401610	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401640	proc near		; CODE XREF: start+3Ap

var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_C2		= dword	ptr -0C2h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		mov	[esp+18h+var_14], eax
		mov	[esp+18h+var_18], esi
		call	sub_4017A0
		sub	esp, 8
		test	eax, eax
		jz	short loc_401671
		mov	[esp+18h+var_18], 0

loc_40166B:				; CODE XREF: sub_401640+56j
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)

loc_401671:				; CODE XREF: sub_401640+22j
		sub	esp, 0C0h
		lea	ebx, [esp+0D8h+var_C2+1]
		and	ebx, 0FFFFFFF0h
		mov	dword ptr [ebx], 0
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	sub_4017A0
		sub	esp, 8
		mov	[esp+0D8h+var_D8], ebx
		jmp	short loc_40166B
sub_401640	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION puts. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fwrite. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _acl32. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION putc. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION perror. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _stat64. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION getopt_long. PRESS KEYPAD	"+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strrchr. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION printf. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getreent. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fprintf. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _getgrgid32. PRESS KEYPAD	"+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION sprintf. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strcpy. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _getpwuid32. PRESS KEYPAD	"+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4017A0	proc near		; CODE XREF: sub_401640+18p
					; sub_401640+4Bp

var_18		= dword	ptr -18h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h	; lpModuleName
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_0]
		test	ebx, ebx
		jz	loc_40188A
		mov	dword ptr [ebx+4], 0A8h
		xor	eax, eax
		mov	ecx, 96h
		mov	dword ptr [ebx+8], 3EDh
		mov	dword ptr [ebx+0Ch], 13h
		mov	[ebx+80h], eax
		mov	[ebx+84h], ecx
		mov	dword ptr [ebx+2Ch], offset dword_401A40
		mov	dword ptr [ebx+30h], offset dword_401A48
		mov	dword ptr [ebx+14h], offset unk_404234
		mov	eax, ds:_impure_ptr
		mov	[ebx+10h], eax

loc_4017FB:				; CODE XREF: sub_4017A0+14Bj
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+0]
		mov	[ebx+28h], esi
		mov	dword ptr [ebx+48h], offset sub_401A10
		mov	dword ptr [ebx+4Ch], offset sub_401A00
		mov	dword ptr [ebx+50h], offset sub_4019F0
		mov	dword ptr [ebx+54h], offset sub_4019E0
		mov	dword ptr [ebx+24h], offset unk_404230
		mov	[ebx], eax
		mov	dword ptr [ebx+18h], offset loc_4019D0
		mov	dword ptr [ebx+1Ch], offset loc_4019C0
		mov	dword ptr [ebx+20h], offset loc_4019B0
		mov	dword ptr [ebx+44h], offset loc_4019A0
		mov	[esp+18h+var_18], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	dword ptr [ebx+34h], offset off_402000
		mov	dword ptr [ebx+38h], offset unk_402060
		mov	dword ptr [ebx+3Ch], offset dword_404000
		mov	dword ptr [ebx+40h], 404260h
		call	sub_401970
		mov	eax, 1

loc_401881:				; CODE XREF: sub_4017A0+FDj
		lea	esp, [ebp+var_8]
		pop	ebx
		pop	esi
		pop	ebp
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40188A:				; CODE XREF: sub_4017A0+10j
		mov	[esp+18h+var_18], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_401881
		mov	dword ptr [edx+4], 0A8h
		mov	ebx, edx
		mov	eax, 96h
		mov	dword ptr [edx+8], 3EDh
		mov	dword ptr [edx+0Ch], 13h
		xor	edx, edx
		mov	[ebx+80h], edx
		mov	edx, [ebx+0A4h]
		mov	[ebx+84h], eax
		mov	dword ptr [ebx+2Ch], offset dword_401A40
		mov	dword ptr [ebx+30h], offset dword_401A48
		mov	dword ptr [ebx+14h], offset unk_404234
		mov	eax, ds:_impure_ptr
		mov	[eax], edx
		jmp	loc_4017FB
sub_4017A0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:__imp__acl32
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:__imp__stat64
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:__imp__getgrgid32
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:__imp__getpwuid32
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401940	proc near		; CODE XREF: sub_401970+1Fp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ebx, [ebp+arg_4]
		jmp	short loc_40195C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401950:				; CODE XREF: sub_401940+1Ej
		mov	edx, [ecx+4]
		mov	eax, [ecx]
		add	ecx, 8
		add	edx, esi
		add	[edx], eax

loc_40195C:				; CODE XREF: sub_401940+Ej
		cmp	ecx, ebx
		jb	short loc_401950
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_401940	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401970	proc near		; CODE XREF: sub_4017A0+D7p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	edx, 400000h
		mov	ebp, esp
		mov	eax, offset unk_403740
		sub	esp, 0Ch
		mov	[esp+0Ch+var_4], edx
		mov	[esp+0Ch+var_8], eax
		mov	[esp+0Ch+var_C], offset	unk_403740
		call	sub_401940
		leave
		retn
sub_401970	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_4019A0:				; DATA XREF: sub_4017A0+A2o
		jmp	ds:calloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_4019B0:				; DATA XREF: sub_4017A0+9Bo
		jmp	ds:realloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_4019C0:				; DATA XREF: sub_4017A0+94o
		jmp	ds:free
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_4019D0:				; DATA XREF: sub_4017A0+8Do
		jmp	ds:malloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4019E0	proc near		; DATA XREF: sub_4017A0+7Do
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4019E0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4019F0	proc near		; DATA XREF: sub_4017A0+76o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4019F0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401A00	proc near		; DATA XREF: sub_4017A0+6Fo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401A00	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401A10	proc near		; DATA XREF: sub_4017A0+68o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401A10	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
dword_401A40	dd 0FFFFFFFFh, 0	; DATA XREF: sub_4017A0+3Eo
					; sub_4017A0+12Fo
dword_401A48	dd 0FFFFFFFFh, 6Dh dup(0) ; DATA XREF: sub_4017A0+45o
					; sub_4017A0+136o
_text		ends

; Section 2. (virtual address 00002000)
; Virtual size			: 00000060 (	 96.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001000
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 402000h
off_402000	dd offset unk_403000	; DATA XREF: sub_4011C0+6Fo
					; sub_4017A0+BBo
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  61h	; a
		db    0	;
		db    0	;
		db    0	;
		db    4	;
		db  30h	; 0
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  64h	; d
		db    0	;
		db    0	;
		db    0	;
		db    8	;
		db  30h	; 0
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  68h	; h
		db    0	;
		db    0	;
		db    0	;
		db  0Dh	;
		db  30h	; 0
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  6Eh	; n
		db    0	;
		db    0	;
		db    0	;
		db  14h	;
		db  30h	; 0
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  76h	; v
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_402060	db    0	;		; DATA XREF: sub_4017A0+C2o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_data		ends

; Section 3. (virtual address 00003000)
; Virtual size			: 00000740 (   1856.)
; Section size in file		: 00000800 (   2048.)
; Offset to raw	data for section: 00001200
; Flags	40000040: Data Readable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 403000h
unk_403000	db  61h	; a		; DATA XREF: .data:00402000o
		db  6Ch	; l
		db  6Ch	; l
		db    0	;
		db  64h	; d
		db  69h	; i
		db  72h	; r
		db    0	;
		db  68h	; h
		db  65h	; e
		db  6Ch	; l
		db  70h	; p
		db    0	;
		db  6Eh	; n
		db  6Fh	; o
		db  6Eh	; n
		db  61h	; a
		db  6Dh	; m
		db  65h	; e
		db    0	;
		db  76h	; v
		db  65h	; e
		db  72h	; r
		db  73h	; s
		db  69h	; i
		db  6Fh	; o
		db  6Eh	; n
		db    0	;
aRevision1_13	db '$Revision: 1.13 $',0 ; DATA XREF: sub_4011C0+C0o
aLuUnknown	db '%lu <unknown>',0    ; DATA XREF: sub_4010A0+37o
					; sub_401100+37o
aUsageSAdnFileF	db 'Usage: %s [-adn] FILE [FILE2...]',0Ah ; DATA XREF: sub_401160+15o
		db 'Display file and directory access control lists (ACLs).',0Ah
		db 0Ah
		db '  -a, --all      display the filename, the owner, the group,'
		db ' and',0Ah
		db '                 the ACL of the file',0Ah
		db '  -d, --dir      display the filename, the owner, the group,'
		db ' and',0Ah
		db '                 the default ACL of the directory, if it exi'
		db 'sts',0Ah
		db '  -h, --help     output usage information and exit',0Ah
		db '  -n, --noname   display user and group IDs instead of names'
		db 0Ah
		db '  -v, --version  output version information and exit',0Ah
		db 0Ah
		db 'When multiple files are specified on the command line, a bla'
		db 'nk',0Ah
		db 'line separates the ACLs for each file.',0Ah,0
		align 4
aForEachArgumen	db 'For each argument that is a regular file, special file or',0Ah
					; DATA XREF: sub_401160+4Bo
		db 'directory, getfacl displays the owner, the group, and the AC'
		db 'L.',0Ah
		db 'For directories getfacl displays additionally the default AC'
		db 'L.',0Ah
		db 0Ah
		db 'With no options specified, getfacl displays the filename, th'
		db 'e',0Ah
		db 'owner, the group, and both the ACL and the default ACL, if i'
		db 't',0Ah
		db 'exists.',0Ah
		db 0Ah
		db 'The format for ACL output is as follows:',0Ah
		db '     # file: filename',0Ah
		db '     # owner: name or uid',0Ah
		db '     # group: name or uid',0Ah
		db '     user::perm',0Ah
		db '     user:name or uid:perm',0Ah
		db '     group::perm',0Ah
		db '     group:name or gid:perm',0Ah
		db '     mask:perm',0Ah
		db '     other:perm',0Ah
		db '     default:user::perm',0Ah
		db '     default:user:name or uid:perm',0Ah
		db '     default:group::perm',0Ah
		db '     default:group:name or gid:perm',0Ah
		db '     default:mask:perm',0Ah
		db '     default:other:perm',0Ah
		db 0Ah,0
aAdhnv		db 'adhnv',0            ; DATA XREF: sub_4011C0+78o
aJan202006	db 'Jan 20 2006',0      ; DATA XREF: sub_4011C0+106o
		align 4
aGetfaclCygwin_	db 'getfacl (cygwin) %.*s',0Ah ; DATA XREF: sub_4011C0+113o
		db 'ACL Utility',0Ah
		db 'Copyright (c) 2000, 2001, 2002 Red Hat, Inc.',0Ah
		db 'Compiled on %s',0Ah,0
a?		db '?',0                ; DATA XREF: sub_4011C0+19Ao
aFileS		db '# file: %s',0Ah,0   ; DATA XREF: sub_4011C0+200o
aOwnerLu	db '# owner: %lu',0Ah,0 ; DATA XREF: sub_4011C0+221o
aGroupLu	db '# group: %lu',0Ah,0 ; DATA XREF: sub_4011C0+234o
aDefault	db 'default:',0         ; DATA XREF: sub_4011C0+2B3o
aUser		db 'user::',0           ; DATA XREF: sub_4011C0+2DAo
aOther		db 'other:',0           ; DATA XREF: sub_4011C0+303o
aMask		db 'mask:',0            ; DATA XREF: sub_4011C0+311o
aGroupLu_0	db 'group:%lu:',0       ; DATA XREF: sub_4011C0+337o
aGroup		db 'group::',0          ; DATA XREF: sub_4011C0+349o
aUserLu		db 'user:%lu:',0        ; DATA XREF: sub_4011C0+36Fo
aOwnerS		db '# owner: %s',0Ah,0  ; DATA XREF: sub_4011C0+3B6o
aGroupS		db '# group: %s',0Ah,0  ; DATA XREF: sub_4011C0+3D1o
aGroupS_0	db 'group:%s:',0        ; DATA XREF: sub_4011C0+410o
aUserS		db 'user:%s:',0         ; DATA XREF: sub_4011C0+437o
off_403660	dd offset loc_401321	; DATA XREF: sub_4011C0+9Fr
		dd offset loc_401266	; jump table for switch	statement
		dd offset loc_401266
		dd offset loc_401311
		dd offset loc_401266
		dd offset loc_401266
		dd offset loc_401266
		dd offset loc_401300
		dd offset loc_401266
		dd offset loc_401266
		dd offset loc_401266
		dd offset loc_401266
		dd offset loc_401266
		dd offset loc_4012F0
		dd offset loc_401266
		dd offset loc_401266
		dd offset loc_401266
		dd offset loc_401266
		dd offset loc_401266
		dd offset loc_401266
		dd offset loc_401266
		dd offset loc_401280
off_4036B8	dd offset loc_4014A6	; DATA XREF: sub_4011C0+2D3r
		dd offset loc_40149A	; jump table for switch	statement
		dd offset loc_401517
		dd offset loc_4014A6
		dd offset loc_401509
		dd offset loc_4014A6
		dd offset loc_4014A6
		dd offset loc_4014A6
		dd offset loc_4014DF
		dd offset loc_4014A6
		dd offset loc_4014A6
		dd offset loc_4014A6
		dd offset loc_4014A6
		dd offset loc_4014A6
		dd offset loc_4014A6
		dd offset loc_4014A6
		dd offset loc_4014D1
		dd offset loc_4014A6
		dd offset loc_4014A6
		dd offset loc_4014A6
		dd offset loc_4014A6
		dd offset loc_4014A6
		dd offset loc_4014A6
		dd offset loc_4014A6
		dd offset loc_4014A6
		dd offset loc_4014A6
		dd offset loc_4014A6
		dd offset loc_4014A6
		dd offset loc_4014A6
		dd offset loc_4014A6
		dd offset loc_4014A6
		dd offset loc_4014A6
		dd offset loc_4014C3
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_403740	db    0	;		; DATA XREF: sub_401970+8o
					; sub_401970+18o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_rdata		ends

; Section 4. (virtual address 00004000)
; Virtual size			: 00000260 (	608.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 404000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_404000	dd ?			; DATA XREF: start+9r sub_4017A0+C9o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
byte_404010	db ?			; DATA XREF: sub_401050+1Cw
					; sub_401050+45o
byte_404011	db ?			; DATA XREF: sub_401050+35w
byte_404012	db ?			; DATA XREF: sub_401050+40w
byte_404013	db ?			; DATA XREF: sub_401050+7w
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_404020	db    ?	;		; DATA XREF: sub_4010A0+18o
					; sub_4010A0+2Bo ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_404120	db    ?	;		; DATA XREF: sub_401100+18o
					; sub_401100+2Bo ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404220	dd ?			; DATA XREF: sub_401160+Cr
					; sub_4011C0+60w ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_404230	db    ?	;		; DATA XREF: sub_4017A0+84o
		db    ?	;
		db    ?	;
		db    ?	;
unk_404234	db    ?	;		; DATA XREF: sub_4017A0+4Co
					; sub_4017A0+13Do
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
_bss		ends

;
; Imports from cygwin1
;
; Section 5. (virtual address 00005000)
; Virtual size			: 00000360 (	864.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001A00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp___getreent:dword ; DATA XREF: __getreentr
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn __imp__acl32:dword ; DATA	XREF: _acl32r .text:00401900r
		extrn __imp__getgrgid32:dword ;	DATA XREF: _getgrgid32r
					; .text:00401920r
		extrn __imp__getpwuid32:dword ;	DATA XREF: _getpwuid32r
					; .text:00401930r
		extrn _impure_ptr:dword	; DATA XREF: sub_4017A0+53r
					; sub_4017A0+144r
		extrn __imp__stat64:dword ; DATA XREF: _stat64r
					; .text:00401910r
; void *__cdecl	calloc(size_t,size_t)
		extrn calloc:dword	; DATA XREF: .text:004019A0r
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_401640+2Br
					; .text:004018F0r
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
; void __cdecl free(void *)
		extrn free:dword	; DATA XREF: .text:004019C0r
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
		extrn __imp_getopt_long:dword ;	DATA XREF: getopt_longr
; void *__cdecl	malloc(size_t)
		extrn malloc:dword	; DATA XREF: .text:004019D0r
		extrn optind:dword	; DATA XREF: sub_4011C0+1A9r
					; sub_4011C0+2A0r
; void __cdecl _imp_perror(const char *)
		extrn __imp_perror:dword ; DATA	XREF: perrorr
		extrn __imp_printf:dword ; DATA	XREF: printfr
		extrn __imp_putc:dword	; DATA XREF: putcr
		extrn __imp_puts:dword	; DATA XREF: putsr
; void *__cdecl	realloc(void *,size_t)
		extrn realloc:dword	; DATA XREF: .text:004019B0r
		extrn __imp_sprintf:dword ; DATA XREF: sprintfr
; char *__cdecl	_imp_strcpy(char *,const char *)
		extrn __imp_strcpy:dword ; DATA	XREF: strcpyr
; char *__cdecl	_imp_strrchr(const char	*,int)
		extrn __imp_strrchr:dword ; DATA XREF: strrchrr


;
; Imports from KERNEL32
;
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr



		end start
