

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\exim_dbmbuild.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00001140 (   4416.)
; Section size in file		: 00001200 (   4608.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?


unicode		macro page,string,zero
		irpc c,<string>
		db '&c', page
		endm
		ifnb <zero>
		dw zero
		endif
endm

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		and	esp, 0FFFFFFF0h
		mov	eax, ds:dword_405000
		test	eax, eax
		jz	short loc_401013
		int	3		; Trap to Debugger

loc_401013:				; CODE XREF: start+10j
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_4011A0
		call	sub_401D70
		leave
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401050	proc near		; CODE XREF: sub_4011A0+7E7p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		xor	edx, edx
		mov	ebp, esp
		sub	esp, 18h
		mov	eax, [ebp+arg_0]
		mov	[ebp+var_4], edi
		mov	edi, ds:_ctype_
		mov	[ebp+var_C], ebx
		mov	[ebp+var_8], esi
		mov	esi, [eax]
		inc	esi
		movzx	ebx, byte ptr [esi]
		movsx	eax, byte ptr [edi+ebx+1]
		shr	eax, 2
		cmp	ebx, 38h
		setnz	dl
		test	edx, eax
		jz	short loc_4010E0
		cmp	ebx, 39h
		jz	short loc_4010E0
		movzx	eax, byte ptr [esi+1]
		sub	ebx, 30h
		movzx	edx, al
		test	byte ptr [edi+edx+1], 4
		jz	loc_401180
		cmp	al, 38h
		jz	loc_401180
		cmp	al, 39h
		jz	loc_401180
		inc	esi
		lea	ebx, [edx+ebx*8-30h]
		movzx	eax, byte ptr [esi+1]
		movzx	edx, al
		test	byte ptr [edi+edx+1], 4
		jz	loc_401180
		cmp	al, 38h
		jz	loc_401180
		cmp	al, 39h
		jz	loc_401180
		inc	esi
		lea	ebx, [edx+ebx*8-30h]
		jmp	loc_401180
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4010E0:				; CODE XREF: sub_401050+30j
					; sub_401050+35j
		cmp	ebx, 72h
		jz	loc_401177
		jg	short loc_401100
		cmp	ebx, 6Eh
		jnz	loc_401180
		mov	ebx, 0Ah
		jmp	loc_401180
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401100:				; CODE XREF: sub_401050+99j
		cmp	ebx, 74h
		jz	loc_401194
		cmp	ebx, 78h
		jnz	short loc_401180
		movzx	eax, byte ptr [esi+1]
		xor	ebx, ebx
		movsx	edx, byte ptr [edi+eax+1]
		test	dl, 44h
		jz	short loc_401180
		inc	esi
		test	dl, 1
		jz	short loc_401127
		add	eax, 20h

loc_401127:				; CODE XREF: sub_401050+D2j
		mov	[esp+18h+var_14], eax
		mov	eax, dword_403000
		mov	[esp+18h+var_18], eax
		call	strchr
		mov	ebx, eax
		mov	eax, dword_403000
		sub	ebx, eax
		mov	[ebp+var_10], eax
		movzx	eax, byte ptr [esi+1]
		movsx	edx, byte ptr [edi+eax+1]
		test	dl, 44h
		jz	short loc_401180
		inc	esi
		test	dl, 1
		jz	short loc_40115B
		add	eax, 20h

loc_40115B:				; CODE XREF: sub_401050+106j
		mov	[esp+18h+var_14], eax
		mov	eax, [ebp+var_10]
		shl	ebx, 4
		mov	[esp+18h+var_18], eax
		call	strchr
		lea	ebx, [eax+ebx]
		mov	eax, [ebp+var_10]
		sub	ebx, eax
		jmp	short loc_401180
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401177:				; CODE XREF: sub_401050+93j
		mov	ebx, 0Dh
		lea	esi, [esi+0]

loc_401180:				; CODE XREF: sub_401050+46j
					; sub_401050+4Ej ...
		mov	eax, [ebp+arg_0]
		mov	[eax], esi
		mov	esi, [ebp+var_8]
		mov	eax, ebx
		mov	edi, [ebp+var_4]
		mov	ebx, [ebp+var_C]
		mov	esp, ebp
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401194:				; CODE XREF: sub_401050+B3j
		mov	ebx, 9
		jmp	short loc_401180
sub_401050	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4011A0	proc near		; DATA XREF: start+33o

var_398		= dword	ptr -398h
var_394		= dword	ptr -394h
var_390		= dword	ptr -390h
var_38C		= dword	ptr -38Ch
var_388		= dword	ptr -388h
var_384		= dword	ptr -384h
var_370		= dword	ptr -370h
var_36C		= dword	ptr -36Ch
var_368		= dword	ptr -368h
var_364		= dword	ptr -364h
var_360		= dword	ptr -360h
var_35C		= dword	ptr -35Ch
var_358		= dword	ptr -358h
var_354		= dword	ptr -354h
var_34C		= dword	ptr -34Ch
var_348		= dword	ptr -348h
var_344		= dword	ptr -344h
var_340		= dword	ptr -340h
var_33C		= dword	ptr -33Ch
var_338		= dword	ptr -338h
var_334		= dword	ptr -334h
var_330		= dword	ptr -330h
var_32C		= dword	ptr -32Ch
var_328		= dword	ptr -328h
var_324		= dword	ptr -324h
var_320		= dword	ptr -320h
var_31C		= dword	ptr -31Ch
var_318		= dword	ptr -318h
var_218		= dword	ptr -218h
var_214		= dword	ptr -214h
var_210		= dword	ptr -210h
var_20C		= word ptr -20Ch
var_20A		= byte ptr -20Ah
var_118		= dword	ptr -118h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 38Ch
		and	esp, 0FFFFFFF0h
		mov	[ebp+var_360], eax
		xor	eax, eax
		mov	[ebp+var_35C], eax
		mov	eax, 10h
		call	sub_401D40
		call	__main
		mov	[esp+398h+var_398], 186A0h
		mov	eax, 1
		mov	ecx, 1
		mov	[ebp+var_338], eax
		mov	eax, 1
		mov	edx, 1
		mov	[ebp+var_33C], eax
		mov	eax, 1
		xor	edi, edi
		mov	[ebp+var_340], eax
		xor	esi, esi
		xor	eax, eax
		mov	[ebp+var_330], ecx
		xor	ebx, ebx
		mov	[ebp+var_334], edx
		mov	[ebp+var_324], edi
		mov	[ebp+var_328], esi
		mov	[ebp+var_32C], ebx
		mov	[ebp+var_344], eax
		call	malloc
		mov	[ebp+var_368], eax
		mov	[esp+398h+var_398], 4E20h
		call	malloc
		mov	[ebp+var_36C], eax
		jmp	short loc_401261
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_401250:				; CODE XREF: sub_4011A0+E6j
		xor	eax, eax
		mov	[ebp+var_338], eax

loc_401258:				; CODE XREF: sub_4011A0+101j
					; sub_4011A0+11Fj ...
		inc	[ebp+var_330]
		dec	[ebp+arg_0]

loc_401261:				; CODE XREF: sub_4011A0+A9j
		cmp	[ebp+arg_0], 1
		jle	loc_401300
		cld
		mov	eax, [ebp+var_330]
		mov	ecx, 6
		mov	edx, [ebp+arg_4]
		mov	edi, offset aNolc ; "-nolc"
		mov	ebx, [edx+eax*4]
		mov	esi, ebx
		repe cmpsb
		jz	short loc_401250
		cld
		mov	edi, offset aNowarn ; "-nowarn"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		jnz	short loc_4012A3
		xor	eax, eax
		mov	[ebp+var_33C], eax
		jmp	short loc_401258
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4012A3:				; CODE XREF: sub_4011A0+F7j
		cld
		mov	edi, offset aLastdup ; "-lastdup"
		mov	ecx, 9
		mov	esi, ebx
		repe cmpsb
		jnz	short loc_4012C1
		mov	edi, 1
		mov	[ebp+var_344], edi
		jmp	short loc_401258
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4012C1:				; CODE XREF: sub_4011A0+112j
		cld
		mov	edi, offset aNoduperr ;	"-noduperr"
		mov	ecx, 0Ah
		mov	esi, ebx
		repe cmpsb
		jz	short loc_4012F0
		cld
		mov	edi, offset aNozero ; "-nozero"
		mov	ecx, 8
		mov	esi, ebx
		repe cmpsb
		jnz	short loc_401300
		xor	ebx, ebx
		mov	[ebp+var_334], ebx
		jmp	loc_401258
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4012F0:				; CODE XREF: sub_4011A0+130j
		xor	esi, esi
		mov	[ebp+var_340], esi
		jmp	loc_401258
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401300:				; CODE XREF: sub_4011A0+C5j
					; sub_4011A0+141j
		cmp	[ebp+arg_0], 3
		jnz	loc_401C38
		cld
		mov	ecx, [ebp+var_330]
		mov	edi, [ebp+arg_4]
		mov	ebx, [edi+ecx*4]
		mov	edi, offset asc_40403A ; "-"
		mov	ecx, 2
		mov	esi, ebx
		repe cmpsb
		jnz	loc_401414
		call	__getreent
		mov	eax, [eax+4]
		mov	[ebp+var_348], eax

loc_401339:				; CODE XREF: sub_4011A0+28Dj
		mov	edi, [ebp+var_330]
		mov	eax, [ebp+arg_4]
		mov	ebx, [eax+edi*4+4]
		mov	[esp+398h+var_394], ebx
		mov	eax, [eax+edi*4]
		mov	[esp+398h+var_398], eax
		call	strcmp
		test	eax, eax
		jz	loc_401C27
		mov	[esp+398h+var_394], ebx
		lea	ecx, [ebp+var_218]
		mov	edi, 6C697562h
		mov	[esp+398h+var_398], ecx
		lea	ebx, [ebp+var_218]
		call	strcpy
		mov	[esp+398h+var_398], ebx
		mov	esi, 65745F64h
		call	strlen
		mov	[ebp+eax+var_214], edi
		mov	edx, 6D62642Eh
		mov	ecx, 706Dh
		mov	[ebp+eax+var_218], edx
		xor	edx, edx
		mov	[ebp+eax+var_210], esi
		mov	[ebp+eax+var_20C], cx
		mov	[ebp+eax+var_20A], dl
		mov	[esp+398h+var_398], 0Ch
		call	malloc
		mov	[ebp+var_34C], eax
		test	eax, eax
		jnz	loc_401464

loc_4013D1:				; CODE XREF: sub_4011A0+917j
		call	__errno
		mov	eax, [eax]
		lea	ebx, [ebp+var_218]
		mov	[esp+398h+var_398], eax
		call	strerror
		mov	[esp+398h+var_390], eax
		mov	[esp+398h+var_394], ebx
		mov	[esp+398h+var_398], offset aExim_dbmbuildU ; "exim_dbmbuild: unable to create %s: %s\n"...
		call	printf
		mov	edi, [ebp+var_348]
		mov	[esp+398h+var_398], edi
		call	fclose

loc_401408:				; CODE XREF: sub_4011A0+2C2j
					; sub_4011A0+A93j ...
		mov	[esp+398h+var_398], 1
		call	exit

loc_401414:				; CODE XREF: sub_4011A0+185j
		mov	[esp+398h+var_398], ebx
		mov	ecx, offset aRb	; "rb"
		mov	[esp+398h+var_394], ecx
		call	_fopen64
		mov	[ebp+var_348], eax
		test	eax, eax
		jnz	loc_401339
		call	__errno
		mov	eax, [eax]
		mov	[esp+398h+var_398], eax
		call	strerror
		mov	[esp+398h+var_390], eax
		mov	edx, [ebp+var_330]
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx+edx*4]
		mov	[esp+398h+var_398], offset aExim_dbmbuil_0 ; "exim_dbmbuild: unable to open %s:	%s\n"
		mov	[esp+398h+var_394], eax
		call	printf
		jmp	short loc_401408
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401464:				; CODE XREF: sub_4011A0+22Bj
		mov	dword ptr [eax+4], 0
		xor	eax, eax
		xor	esi, esi
		mov	[esp+398h+var_388], eax
		mov	edi, 2
		mov	eax, 1A4h
		mov	[esp+398h+var_38C], eax
		mov	[esp+398h+var_390], edi
		mov	[esp+398h+var_394], esi
		mov	[esp+398h+var_398], ebx
		call	gdbm_open
		mov	ecx, [ebp+var_368]
		mov	edx, [ebp+var_34C]
		mov	[ebp+var_364], ecx
		xor	ecx, ecx
		test	eax, eax
		mov	[edx], eax
		mov	[ebp+var_320], ecx
		jz	loc_401AAF
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_4014C0:				; CODE XREF: sub_4011A0+379j
					; sub_4011A0+3B2j ...
		mov	ecx, [ebp+var_348]
		mov	eax, 4E20h
		mov	ebx, [ebp+var_36C]
		mov	[esp+398h+var_394], eax
		mov	[esp+398h+var_390], ecx
		mov	[esp+398h+var_398], ebx
		call	fgets
		test	eax, eax
		jz	loc_401993
		mov	eax, [ebp+var_36C]
		mov	[esp+398h+var_398], eax
		call	strlen
		mov	esi, [ebp+var_36C]
		add	esi, eax
		cmp	eax, 4E1Eh
		jle	short loc_401510
		cmp	byte ptr [esi-1], 0Ah
		jnz	loc_401AE5

loc_401510:				; CODE XREF: sub_4011A0+364j
		mov	edx, [ebp+var_36C]
		cmp	byte ptr [edx],	23h
		jz	short loc_4014C0
		cmp	esi, edx
		jbe	short loc_401544
		movzx	eax, byte ptr [esi-1]
		mov	edx, ds:_ctype_
		test	byte ptr [edx+eax+1], 8
		jz	short loc_401544

loc_401530:				; CODE XREF: sub_4011A0+3A2j
		dec	esi
		cmp	esi, [ebp+var_36C]
		jbe	short loc_401544
		movzx	eax, byte ptr [esi-1]
		test	byte ptr [edx+eax+1], 8
		jnz	short loc_401530

loc_401544:				; CODE XREF: sub_4011A0+37Dj
					; sub_4011A0+38Ej ...
		mov	byte ptr [esi],	0
		mov	ecx, [ebp+var_36C]
		movzx	eax, byte ptr [ecx]
		test	al, al
		jz	loc_4014C0
		mov	edi, ds:_ctype_
		movzx	eax, al
		test	byte ptr [edi+eax+1], 8
		jz	short loc_4015CD
		mov	eax, [ebp+var_320]
		mov	ebx, ecx
		test	eax, eax
		jz	loc_40177D
		nop
		lea	esi, [esi+0]

loc_401580:				; CODE XREF: sub_4011A0+3E9j
		inc	ebx
		movzx	eax, byte ptr [ebx]
		test	byte ptr [edi+eax+1], 8
		jnz	short loc_401580
		dec	ebx
		mov	byte ptr [ebx],	20h
		mov	eax, [ebp+var_364]
		mov	edx, [ebp+var_368]
		sub	eax, edx
		add	eax, esi
		sub	eax, ebx
		cmp	eax, 1869Eh
		jg	loc_401C12
		mov	[esp+398h+var_394], ebx
		mov	edi, [ebp+var_364]
		sub	esi, ebx
		mov	[esp+398h+var_398], edi
		add	edi, esi
		call	strcpy
		mov	[ebp+var_364], edi
		jmp	loc_4014C0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4015CD:				; CODE XREF: sub_4011A0+3C6j
		mov	eax, [ebp+var_320]
		lea	ebx, [ebp+var_118]
		mov	ecx, [ebp+var_36C]
		test	eax, eax
		mov	[ebp+var_31C], ecx
		jnz	loc_401792

loc_4015ED:				; CODE XREF: sub_4011A0+779j
		mov	[ebp+var_358], ebx
		mov	[ebp+var_370], ecx
		movzx	ebx, byte ptr [ecx]
		cmp	bl, 22h
		jz	loc_401889
		test	bl, bl
		setnz	al
		xor	edx, edx
		cmp	bl, 3Ah
		setnz	dl
		test	eax, edx
		jz	short loc_401658
		mov	edi, ds:_ctype_
		movzx	eax, bl
		test	byte ptr [edi+eax+1], 8
		jnz	short loc_401658
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401630:				; CODE XREF: sub_4011A0+4B6j
		mov	eax, ecx
		inc	ecx
		mov	[ebp+var_31C], ecx
		movzx	ebx, byte ptr [eax+1]
		test	bl, bl
		setnz	dl
		xor	eax, eax
		cmp	bl, 3Ah
		setnz	al
		test	edx, eax
		jz	short loc_401658
		movzx	eax, bl
		test	byte ptr [edi+eax+1], 8
		jz	short loc_401630

loc_401658:				; CODE XREF: sub_4011A0+474j
					; sub_4011A0+484j ...
		mov	eax, [ebp+var_370]
		mov	edi, [ebp+var_334]
		sub	ecx, eax
		add	ecx, edi
		mov	[ebp+var_354], ecx

loc_40166E:				; CODE XREF: sub_4011A0+756j
		cmp	[ebp+var_354], 100h
		jg	loc_401C01
		mov	ebx, [ebp+var_338]
		test	ebx, ebx
		jz	loc_401738
		mov	eax, [ebp+var_354]
		xor	edx, edx
		mov	ecx, [ebp+var_334]
		sub	eax, ecx
		cmp	eax, 0
		jle	loc_401AA4
		mov	edi, ds:_ctype_
		mov	ecx, eax
		lea	esi, [esi+0]

loc_4016B0:				; CODE XREF: sub_4011A0+52Ej
		mov	ebx, [ebp+var_370]
		movzx	eax, byte ptr [ebx+edx]
		test	byte ptr [edi+eax+1], 1
		jz	short loc_4016C4
		add	eax, 20h

loc_4016C4:				; CODE XREF: sub_4011A0+51Fj
		mov	byte ptr [ebp+edx+var_118], al
		inc	edx
		cmp	ecx, edx
		jg	short loc_4016B0

loc_4016D0:				; CODE XREF: sub_4011A0+5D8j
					; sub_4011A0+90Aj
		xor	eax, eax
		mov	byte ptr [ebp+edx+var_118], al
		mov	ecx, [ebp+var_31C]
		mov	eax, 1
		mov	[ebp+var_320], eax
		movzx	eax, byte ptr [ecx]
		test	byte ptr [edi+eax+1], 8
		jz	short loc_401716
		lea	edx, [ecx+1]
		mov	esi, esi
		lea	edi, [edi+0]

loc_401700:				; CODE XREF: sub_4011A0+574j
		mov	[ebp+var_31C], edx
		mov	ecx, edx
		lea	edx, [edx+1]
		movzx	eax, byte ptr [edx-1]
		test	byte ptr [edi+eax+1], 8
		jnz	short loc_401700

loc_401716:				; CODE XREF: sub_4011A0+552j
		cmp	byte ptr [ecx],	3Ah
		mov	edx, ecx
		jz	loc_401943

loc_401721:				; CODE XREF: sub_4011A0+7B3j
					; sub_4011A0+7D6j
		cmp	byte ptr [ecx],	0
		jnz	loc_40191E
		mov	edx, [ebp+var_368]
		mov	byte ptr [edx],	0
		jmp	loc_4014C0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401738:				; CODE XREF: sub_4011A0+4E6j
		mov	ecx, [ebp+var_354]
		xor	edx, edx
		mov	eax, [ebp+var_334]
		sub	ecx, eax
		cmp	ecx, 0
		jle	loc_401AA4
		mov	ebx, ds:_ctype_
		mov	esi, esi
		lea	edi, [edi+0]

loc_401760:				; CODE XREF: sub_4011A0+5D4j
		mov	edi, [ebp+var_370]
		movzx	eax, byte ptr [edi+edx]
		mov	byte ptr [ebp+edx+var_118], al
		inc	edx
		cmp	ecx, edx
		jg	short loc_401760
		mov	edi, ebx
		jmp	loc_4016D0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40177D:				; CODE XREF: sub_4011A0+3D2j
		mov	[esp+398h+var_394], ecx
		mov	[esp+398h+var_398], offset aUnexpectedCont ; "Unexpected continuation line ignored\n%s"...
		call	printf
		jmp	loc_4014C0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401792:				; CODE XREF: sub_4011A0+447j
		mov	eax, [ebp+var_368]
		sub	[ebp+var_364], eax
		mov	[ebp+var_360], eax
		mov	edx, [ebp+var_364]
		mov	eax, [ebp+var_334]
		mov	ecx, [ebp+var_360]
		add	edx, eax
		xor	eax, eax
		mov	[ebp+var_35C], edx
		mov	edx, [ebp+var_354]
		mov	[esp+398h+var_384], eax
		mov	ebx, [ebp+var_35C]
		mov	[esp+398h+var_38C], ecx
		mov	eax, [ebp+var_358]
		mov	[esp+398h+var_390], edx
		mov	edx, [ebp+var_34C]
		mov	[esp+398h+var_388], ebx
		mov	[esp+398h+var_394], eax
		mov	eax, [edx]
		mov	[esp+398h+var_398], eax
		call	gdbm_store
		test	eax, eax
		mov	edi, eax
		jz	loc_4018FB
		cmp	eax, 1
		jnz	loc_401CE5
		mov	edi, [ebp+var_33C]
		lea	ebx, [ebp+var_118]
		test	edi, edi
		jnz	loc_401B28

loc_40181D:				; CODE XREF: sub_4011A0+9A5j
		inc	[ebp+var_328]
		mov	edx, [ebp+var_340]
		test	edx, edx
		jz	short loc_401838
		mov	eax, 1
		mov	[ebp+var_32C], eax

loc_401838:				; CODE XREF: sub_4011A0+68Bj
		mov	eax, [ebp+var_344]
		test	eax, eax
		jz	loc_401907
		mov	edx, [ebp+var_35C]
		mov	eax, 1
		mov	ecx, [ebp+var_354]
		mov	[esp+398h+var_384], eax
		mov	eax, [ebp+var_360]
		mov	[esp+398h+var_388], edx
		mov	edx, [ebp+var_358]
		mov	[esp+398h+var_390], ecx
		mov	ecx, [ebp+var_34C]
		mov	[esp+398h+var_38C], eax
		mov	[esp+398h+var_394], edx
		mov	eax, [ecx]
		mov	[esp+398h+var_398], eax
		call	gdbm_store
		jmp	short loc_401907
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401889:				; CODE XREF: sub_4011A0+45Fj
		inc	ecx
		mov	edi, [ebp+var_370]
		mov	ebx, ecx
		mov	[ebp+var_31C], ecx
		movzx	eax, byte ptr [ecx]
		jmp	short loc_4018C3
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4018A0:				; CODE XREF: sub_4011A0+732j
		movzx	eax, byte ptr [ebx]
		cmp	al, 5Ch
		jz	loc_40197B
		mov	[edi], al
		inc	edi

loc_4018AE:				; CODE XREF: sub_4011A0+7EEj
		mov	eax, [ebp+var_31C]
		lea	ecx, [eax+1]
		mov	ebx, ecx
		mov	[ebp+var_31C], ecx
		movzx	eax, byte ptr [eax+1]

loc_4018C3:				; CODE XREF: sub_4011A0+6FBj
		test	al, al
		setnz	dl
		cmp	al, 22h
		setnz	al
		movzx	eax, al
		test	edx, eax
		jnz	short loc_4018A0
		cmp	byte ptr [ecx],	0
		jz	short loc_4018E0
		inc	ecx
		mov	[ebp+var_31C], ecx

loc_4018E0:				; CODE XREF: sub_4011A0+737j
		mov	eax, [ebp+var_370]
		sub	edi, eax
		mov	eax, [ebp+var_334]
		add	edi, eax
		mov	[ebp+var_354], edi
		jmp	loc_40166E
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4018FB:				; CODE XREF: sub_4011A0+65Aj
		inc	[ebp+var_324]
		lea	ebx, [ebp+var_118]

loc_401907:				; CODE XREF: sub_4011A0+6A0j
					; sub_4011A0+6E7j
		mov	edi, [ebp+var_368]
		mov	ecx, [ebp+var_31C]
		mov	[ebp+var_364], edi
		jmp	loc_4015ED
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40191E:				; CODE XREF: sub_4011A0+584j
		mov	[esp+398h+var_394], ecx
		mov	eax, [ebp+var_364]
		mov	[esp+398h+var_398], eax
		call	strcpy
		mov	eax, [ebp+var_31C]
		sub	esi, eax
		add	[ebp+var_364], esi
		jmp	loc_4014C0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401943:				; CODE XREF: sub_4011A0+57Bj
		inc	ecx
		mov	[ebp+var_31C], ecx
		movzx	eax, byte ptr [edx+1]
		test	byte ptr [edi+eax+1], 8
		jz	loc_401721
		add	edx, 2
		lea	esi, [esi+0]

loc_401960:				; CODE XREF: sub_4011A0+7D4j
		mov	[ebp+var_31C], edx
		mov	ecx, edx
		lea	edx, [edx+1]
		movzx	eax, byte ptr [edx-1]
		test	byte ptr [edi+eax+1], 8
		jnz	short loc_401960
		jmp	loc_401721
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40197B:				; CODE XREF: sub_4011A0+705j
		lea	eax, [ebp+var_31C]
		mov	ebx, edi
		inc	edi
		mov	[esp+398h+var_398], eax
		call	sub_401050
		mov	[ebx], al
		jmp	loc_4018AE
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401993:				; CODE XREF: sub_4011A0+343j
		mov	edi, [ebp+var_320]
		test	edi, edi
		jnz	loc_401B4A

loc_4019A1:				; CODE XREF: sub_4011A0+965j
					; sub_4011A0+A5Cj ...
		mov	ebx, [ebp+var_34C]
		mov	eax, [ebx]
		mov	[esp+398h+var_398], eax
		call	gdbm_close
		mov	eax, [ebx+4]
		test	eax, eax
		jnz	loc_401AD8

loc_4019BC:				; CODE XREF: sub_4011A0+940j
		mov	edi, [ebp+var_34C]
		mov	[esp+398h+var_398], edi
		call	free
		mov	eax, [ebp+var_348]
		mov	[esp+398h+var_398], eax
		call	fclose
		cmp	[ebp+var_32C], 1
		ja	loc_401ABC
		cmp	[ebp+var_324], 1
		mov	eax, offset aY	; "y"
		jz	short loc_4019F8
		mov	eax, offset aIes ; "ies"

loc_4019F8:				; CODE XREF: sub_4011A0+851j
		mov	[esp+398h+var_390], eax
		mov	edx, [ebp+var_324]
		mov	[esp+398h+var_398], offset aDEntrSWritten ; "%d	entr%s written\n"
		mov	[esp+398h+var_394], edx
		call	printf
		mov	edx, [ebp+var_328]
		test	edx, edx
		jle	short loc_401A49
		cmp	[ebp+var_328], 1
		mov	eax, offset aS	; "s"
		jg	short loc_401A2F
		mov	eax, 4040D5h

loc_401A2F:				; CODE XREF: sub_4011A0+888j
		mov	[esp+398h+var_390], eax
		mov	ecx, [ebp+var_328]
		mov	[esp+398h+var_398], 4040D6h
		mov	[esp+398h+var_394], ecx
		call	printf

loc_401A49:				; CODE XREF: sub_4011A0+87Aj
		lea	ebx, [ebp+var_218]
		mov	[esp+398h+var_394], ebx
		lea	ebx, [ebp+var_318]
		mov	[esp+398h+var_398], ebx
		call	strcpy
		mov	edi, [ebp+var_330]
		mov	edx, [ebp+arg_4]
		mov	ecx, [ebp+var_368]
		mov	eax, [edx+edi*4+4]
		mov	[esp+398h+var_398], ecx
		mov	[esp+398h+var_394], eax
		call	strcpy
		mov	[esp+398h+var_398], ebx
		mov	edi, [ebp+var_368]
		mov	[esp+398h+var_394], edi
		call	rename
		test	eax, eax
		jnz	short loc_401B0A

loc_401A96:				; CODE XREF: sub_4011A0+936j
		mov	eax, [ebp+var_32C]

loc_401A9C:				; CODE XREF: sub_4011A0+983j
		lea	esp, [ebp+var_C]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401AA4:				; CODE XREF: sub_4011A0+4FFj
					; sub_4011A0+5ABj
		mov	edi, ds:_ctype_
		jmp	loc_4016D0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401AAF:				; CODE XREF: sub_4011A0+30Fj
		mov	[esp+398h+var_398], edx
		call	free
		jmp	loc_4013D1
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401ABC:				; CODE XREF: sub_4011A0+83Fj
		mov	[esp+398h+var_398], offset aDbmbuildAbando ; "dbmbuild abandoned"
		call	puts
		lea	eax, [ebp+var_218]
		mov	[esp+398h+var_398], eax
		call	unlink
		jmp	short loc_401A96
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401AD8:				; CODE XREF: sub_4011A0+816j
		mov	[esp+398h+var_398], eax
		call	free
		jmp	loc_4019BC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401AE5:				; CODE XREF: sub_4011A0+36Aj
		mov	[esp+398h+var_398], offset aOverlongLineRe ; "Overlong line read: max permitted	lengt"...
		mov	edi, 4E1Fh
		mov	[esp+398h+var_394], edi

loc_401AF5:				; CODE XREF: sub_4011A0+A82j
		call	printf

loc_401AFA:				; CODE XREF: sub_4011A0+A51j
					; sub_4011A0+A6Dj
		mov	ecx, 2
		mov	[ebp+var_32C], ecx
		jmp	loc_4019A1
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B0A:				; CODE XREF: sub_4011A0+8F4j
		mov	[esp+398h+var_390], edi
		mov	[esp+398h+var_394], ebx
		mov	[esp+398h+var_398], offset aUnableToRename ; "Unable to	rename %s as %s\n"
		call	printf
		mov	eax, 1
		jmp	loc_401A9C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B28:				; CODE XREF: sub_4011A0+677j
		call	__getreent
		mov	[esp+398h+var_390], ebx
		mov	ecx, offset aDuplicateKeyS ; "** Duplicate key \"%s\"\n"
		mov	[esp+398h+var_394], ecx
		mov	eax, [eax+0Ch]
		mov	[esp+398h+var_398], eax
		call	fprintf
		jmp	loc_40181D
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B4A:				; CODE XREF: sub_4011A0+7FBj
		mov	edi, [ebp+var_368]
		xor	ebx, ebx
		mov	esi, [ebp+var_334]
		sub	[ebp+var_364], edi
		mov	[esp+398h+var_384], ebx
		mov	ebx, [ebp+var_354]
		mov	eax, [ebp+var_364]
		mov	[ebp+var_360], edi
		mov	edx, [ebp+var_360]
		add	eax, esi
		mov	[ebp+var_35C], eax
		mov	ecx, [ebp+var_35C]
		mov	[esp+398h+var_390], ebx
		mov	ebx, [ebp+var_34C]
		mov	[esp+398h+var_388], ecx
		mov	ecx, [ebp+var_358]
		mov	[esp+398h+var_38C], edx
		mov	[esp+398h+var_394], ecx
		mov	eax, [ebx]
		mov	[esp+398h+var_398], eax
		call	gdbm_store
		test	eax, eax
		mov	esi, eax
		jz	short loc_401BF6
		cmp	eax, 1
		jz	loc_401C49
		call	__errno
		mov	ebx, eax
		call	__getreent
		mov	edx, [ebx]
		mov	[esp+398h+var_390], esi
		mov	[esp+398h+var_388], edx
		lea	edx, [ebp+var_118]
		mov	[esp+398h+var_38C], edx

loc_401BDD:				; CODE XREF: sub_4011A0+B65j
		mov	ebx, offset aErrorDWhileWri ; "Error %d	while writing key %s: errno=%d"...
		mov	[esp+398h+var_394], ebx
		mov	eax, [eax+0Ch]
		mov	[esp+398h+var_398], eax
		call	fprintf
		jmp	loc_401AFA
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401BF6:				; CODE XREF: sub_4011A0+A12j
		inc	[ebp+var_324]
		jmp	loc_4019A1
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C01:				; CODE XREF: sub_4011A0+4D8j
		mov	[esp+398h+var_398], offset aKeysLongerThan ; "Keys longer than 255 characters cannot "...
		call	puts
		jmp	loc_401AFA
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C12:				; CODE XREF: sub_4011A0+406j
		mov	[esp+398h+var_398], offset aContinuedSetOf ; "Continued	set of lines is	too long: max"...
		mov	esi, 1869Fh
		mov	[esp+398h+var_394], esi
		jmp	loc_401AF5
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C27:				; CODE XREF: sub_4011A0+1B7j
		mov	[esp+398h+var_398], offset aExim_dbmbuildI ; "exim_dbmbuild: input and output filenam"...
		call	puts
		jmp	loc_401408
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C38:				; CODE XREF: sub_4011A0+164j
		mov	[esp+398h+var_398], offset aUsageExim_dbmb ; "usage: exim_dbmbuild [-nolc] <source fi"...
		call	puts
		jmp	loc_401408
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C49:				; CODE XREF: sub_4011A0+A17j
		mov	ecx, [ebp+var_33C]
		test	ecx, ecx
		jz	short loc_401C76
		call	__getreent
		lea	edx, [ebp+var_118]
		mov	[esp+398h+var_390], edx
		mov	edx, offset aDuplicateKeyS ; "** Duplicate key \"%s\"\n"
		mov	[esp+398h+var_394], edx
		mov	eax, [eax+0Ch]
		mov	[esp+398h+var_398], eax
		call	fprintf

loc_401C76:				; CODE XREF: sub_4011A0+AB1j
		inc	[ebp+var_328]
		mov	eax, [ebp+var_340]
		test	eax, eax
		jz	short loc_401C91
		mov	eax, 1
		mov	[ebp+var_32C], eax

loc_401C91:				; CODE XREF: sub_4011A0+AE4j
		mov	eax, [ebp+var_344]
		test	eax, eax
		jz	loc_4019A1
		mov	edx, [ebp+var_35C]
		mov	eax, 1
		mov	ecx, [ebp+var_354]
		mov	[esp+398h+var_384], eax
		mov	eax, [ebp+var_360]
		mov	[esp+398h+var_388], edx
		mov	edx, [ebp+var_358]
		mov	[esp+398h+var_390], ecx
		mov	ecx, [ebp+var_34C]
		mov	[esp+398h+var_38C], eax
		mov	[esp+398h+var_394], edx
		mov	eax, [ecx]
		mov	[esp+398h+var_398], eax
		call	gdbm_store
		jmp	loc_4019A1
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401CE5:				; CODE XREF: sub_4011A0+663j
		call	__errno
		mov	ebx, eax
		call	__getreent
		mov	edx, [ebx]
		mov	[esp+398h+var_390], edi
		mov	[esp+398h+var_388], edx
		lea	edx, [ebp+var_118]
		mov	[esp+398h+var_38C], edx
		jmp	loc_401BDD
sub_4011A0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8
; [00000006 BYTES: COLLAPSED FUNCTION gdbm_close. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION gdbm_store. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION gdbm_open. PRESS KEYPAD "+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401D40	proc near		; CODE XREF: sub_4011A0+24p
		push	ecx
		mov	ecx, esp
		add	ecx, 8

loc_401D46:				; CODE XREF: sub_401D40+1Bj
		cmp	eax, 1000h
		jb	short loc_401D5D
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		jmp	short loc_401D46
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D5D:				; CODE XREF: sub_401D40+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		jmp	eax
sub_401D40	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401D70	proc near		; CODE XREF: start+3Ap

var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_C2		= dword	ptr -0C2h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		mov	[esp+18h+var_14], eax
		mov	[esp+18h+var_18], esi
		call	sub_401F00
		sub	esp, 8
		test	eax, eax
		jz	short loc_401DA1
		mov	[esp+18h+var_18], 0

loc_401D9B:				; CODE XREF: sub_401D70+56j
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)

loc_401DA1:				; CODE XREF: sub_401D70+22j
		sub	esp, 0C0h
		lea	ebx, [esp+0D8h+var_C2+1]
		and	ebx, 0FFFFFFF0h
		mov	dword ptr [ebx], 0
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	sub_401F00
		sub	esp, 8
		mov	[esp+0D8h+var_D8], ebx
		jmp	short loc_401D9B
sub_401D70	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strlen. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION puts. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION unlink. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION rename. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fprintf. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fgets. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fclose. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strcpy. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __errno. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strerror.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _fopen64.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getreent. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION exit. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION printf. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strcmp. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strchr. PRESS KEYPAD "+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401F00	proc near		; CODE XREF: sub_401D70+18p
					; sub_401D70+4Bp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		push	ebx
		sub	esp, 4		; lpModuleName
		mov	ebx, [ebp+arg_4]
		test	ebx, ebx
		jz	loc_402003

loc_401F14:				; CODE XREF: sub_401F00+11Fj
		mov	dword ptr [ebx+4], 0A8h
		xor	ecx, ecx
		mov	edx, 84h
		mov	dword ptr [ebx+8], 3EDh
		test	eax, eax
		mov	dword ptr [ebx+0Ch], 12h
		mov	[ebx+80h], ecx
		mov	[ebx+84h], edx
		mov	dword ptr [ebx+2Ch], offset dword_402130
		mov	dword ptr [ebx+30h], offset dword_402138
		mov	dword ptr [ebx+14h], offset unk_405014
		jnz	loc_401FF1
		mov	eax, ds:_impure_ptr
		mov	[ebx+10h], eax

loc_401F61:				; CODE XREF: sub_401F00+FEj
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [ebx+48h], offset sub_402100
		mov	dword ptr [ebx+4Ch], offset sub_4020F0
		mov	[ebx+28h], eax
		mov	eax, [ebp+0]
		mov	dword ptr [ebx+50h], offset sub_4020E0
		mov	dword ptr [ebx+54h], offset sub_4020D0
		mov	dword ptr [ebx+24h], offset unk_405010
		mov	[ebx], eax
		mov	dword ptr [ebx+18h], offset malloc
		mov	dword ptr [ebx+1Ch], offset free
		mov	dword ptr [ebx+20h], offset loc_4020C0
		mov	dword ptr [ebx+44h], offset loc_4020B0
		mov	[esp+8+var_8], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	dword ptr [ebx+34h], offset dword_403000
		mov	dword ptr [ebx+38h], offset unk_403010
		mov	dword ptr [ebx+3Ch], offset dword_405000
		mov	dword ptr [ebx+40h], 405040h
		call	sub_402080
		mov	eax, 1

loc_401FEA:				; CODE XREF: sub_401F00+116j
		mov	ebx, [ebp+var_4]
		leave
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401FF1:				; CODE XREF: sub_401F00+53j
		mov	edx, [ebx+0A4h]
		mov	eax, ds:_impure_ptr
		mov	[eax], edx
		jmp	loc_401F61
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402003:				; CODE XREF: sub_401F00+Ej
		mov	[esp+8+var_8], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_401FEA
		mov	ebx, edx
		mov	eax, 1
		jmp	loc_401F14
sub_401F00	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:__imp__fopen64
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402050	proc near		; CODE XREF: sub_402080+1Fp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ebx, [ebp+arg_4]
		jmp	short loc_40206C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_402060:				; CODE XREF: sub_402050+1Ej
		mov	edx, [ecx+4]
		mov	eax, [ecx]
		add	ecx, 8
		add	edx, esi
		add	[edx], eax

loc_40206C:				; CODE XREF: sub_402050+Ej
		cmp	ecx, ebx
		jb	short loc_402060
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_402050	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402080	proc near		; CODE XREF: sub_401F00+E0p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	edx, 400000h
		mov	ebp, esp
		mov	eax, offset unk_404280
		sub	esp, 0Ch
		mov	[esp+0Ch+var_4], edx
		mov	[esp+0Ch+var_8], eax
		mov	[esp+0Ch+var_C], offset	unk_404280
		call	sub_402050
		leave
		retn
sub_402080	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_4020B0:				; DATA XREF: sub_401F00+ABo
		jmp	ds:calloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_4020C0:				; DATA XREF: sub_401F00+A4o
		jmp	ds:realloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4020D0	proc near		; DATA XREF: sub_401F00+86o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4020D0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4020E0	proc near		; DATA XREF: sub_401F00+7Fo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4020E0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4020F0	proc near		; DATA XREF: sub_401F00+72o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_4020F0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402100	proc near		; DATA XREF: sub_401F00+6Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402100	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
dword_402130	dd 0FFFFFFFFh, 0	; DATA XREF: sub_401F00+3Eo
dword_402138	dd 0FFFFFFFFh, 31h dup(0) ; DATA XREF: sub_401F00+45o
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 00000010 (	 16.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001600
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 403000h
dword_403000	dd 404000h		; DATA XREF: sub_401050+DBr
					; sub_401050+EAr ...
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_403010	db    0	;		; DATA XREF: sub_401F00+CBo
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_data		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 00000280 (	640.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001800
; Flags	40000040: Data Readable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 404000h
a0123456789abcd	db '0123456789abcdef',0
aNolc		db '-nolc',0            ; DATA XREF: sub_4011A0+DAo
aNowarn		db '-nowarn',0          ; DATA XREF: sub_4011A0+E9o
aLastdup	db '-lastdup',0         ; DATA XREF: sub_4011A0+104o
aNoduperr	db '-noduperr',0        ; DATA XREF: sub_4011A0+122o
aNozero		db '-nozero',0          ; DATA XREF: sub_4011A0+133o
asc_40403A	db '-',0                ; DATA XREF: sub_4011A0+177o
aExim_dbmbuildU	db 'exim_dbmbuild: unable to create %s: %s',0Ah,0
					; DATA XREF: sub_4011A0+24Eo
aRb		db 'rb',0               ; DATA XREF: sub_4011A0+277o
		align 4
aExim_dbmbuil_0	db 'exim_dbmbuild: unable to open %s: %s',0Ah,0 ; DATA XREF: sub_4011A0+2B2o
		align 4
aUnexpectedCont	db 'Unexpected continuation line ignored',0Ah ; DATA XREF: sub_4011A0+5E1o
		db '%s',0Ah
		db 0Ah,0
aY		db 'y',0                ; DATA XREF: sub_4011A0+84Co
aIes		db 'ies',0              ; DATA XREF: sub_4011A0+853o
aDEntrSWritten	db '%d entr%s written',0Ah,0 ; DATA XREF: sub_4011A0+862o
aS:					; DATA XREF: sub_4011A0+883o
		unicode	0, <s>
		dw 2500h
aDDuplicateKeyS	db 'd duplicate key%s ',0Ah,0
aDbmbuildAbando	db 'dbmbuild abandoned',0 ; DATA XREF: sub_4011A0+91Co
		align 4
aOverlongLineRe	db 'Overlong line read: max permitted length is %d',0Ah,0
					; DATA XREF: sub_4011A0+945o
aUnableToRename	db 'Unable to rename %s as %s',0Ah,0 ; DATA XREF: sub_4011A0+972o
aDuplicateKeyS	db '** Duplicate key "%s"',0Ah,0 ; DATA XREF: sub_4011A0+991o
					; sub_4011A0+AC2o
		align 4
aErrorDWhileWri	db 'Error %d while writing key %s: errno=%d',0Ah,0
					; DATA XREF: sub_4011A0+A3Do
		align 4
aKeysLongerThan	db 'Keys longer than 255 characters cannot be handled',0
					; DATA XREF: sub_4011A0+A61o
		align 4
aContinuedSetOf	db 'Continued set of lines is too long: max permitted length is '
					; DATA XREF: sub_4011A0+A72o
		db '%d',0Ah,0
aExim_dbmbuildI	db 'exim_dbmbuild: input and output filenames are the same',0
					; DATA XREF: sub_4011A0+A87o
		align 4
aUsageExim_dbmb	db 'usage: exim_dbmbuild [-nolc] <source file> <dbm base name>',0
					; DATA XREF: sub_4011A0+A98o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_404280	db    0	;		; DATA XREF: sub_402080+8o
					; sub_402080+18o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_rdata		ends

; Section 4. (virtual address 00005000)
; Virtual size			: 00000040 (	 64.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 405000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_405000	dd ?			; DATA XREF: start+9r sub_401F00+D2o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_405010	db    ?	;		; DATA XREF: sub_401F00+8Do
		db    ?	;
		db    ?	;
		db    ?	;
unk_405014	db    ?	;		; DATA XREF: sub_401F00+4Co
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
_bss		ends

;
; Imports from cygwin1
;
; Section 5. (virtual address 00006000)
; Virtual size			: 0000039C (	924.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001C00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp___errno:dword ; DATA XREF: __errnor
		extrn __imp___getreent:dword ; DATA XREF: __getreentr
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn _ctype_:dword	; DATA XREF: sub_401050+Er
					; sub_4011A0+383r ...
		extrn __imp__fopen64:dword ; DATA XREF:	_fopen64r
					; .text:00402040r
		extrn _impure_ptr:dword	; DATA XREF: sub_401F00+59r
					; sub_401F00+F7r
; void *__cdecl	calloc(size_t,size_t)
		extrn calloc:dword	; DATA XREF: .text:004020B0r
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_401D70+2Br
					; .text:00402030r
; void __cdecl _imp_exit(int)
		extrn __imp_exit:dword	; DATA XREF: exitr
		extrn __imp_fclose:dword ; DATA	XREF: fcloser
		extrn __imp_fgets:dword	; DATA XREF: fgetsr
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
; void __cdecl _imp_free(void *)
		extrn __imp_free:dword	; DATA XREF: freer
; void *__cdecl	_imp_malloc(size_t)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
		extrn __imp_printf:dword ; DATA	XREF: printfr
		extrn __imp_puts:dword	; DATA XREF: putsr
; void *__cdecl	realloc(void *,size_t)
		extrn realloc:dword	; DATA XREF: .text:004020C0r
		extrn __imp_rename:dword ; DATA	XREF: renamer
; char *__cdecl	_imp_strchr(const char *,int)
		extrn __imp_strchr:dword ; DATA	XREF: strchrr
; int __cdecl _imp_strcmp(const	char *,const char *)
		extrn __imp_strcmp:dword ; DATA	XREF: strcmpr
; char *__cdecl	_imp_strcpy(char *,const char *)
		extrn __imp_strcpy:dword ; DATA	XREF: strcpyr
; char *__cdecl	_imp_strerror(int)
		extrn __imp_strerror:dword ; DATA XREF:	strerrorr
; size_t __cdecl _imp_strlen(const char	*)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
		extrn __imp_unlink:dword ; DATA	XREF: unlinkr


;
; Imports from cyggdbm-4
;
		extrn __imp_gdbm_close:dword ; DATA XREF: gdbm_closer
		extrn __imp_gdbm_open:dword ; DATA XREF: gdbm_openr
		extrn __imp_gdbm_store:dword ; DATA XREF: gdbm_storer


;
; Imports from KERNEL32
;
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr



		end start
