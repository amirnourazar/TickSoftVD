

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\jbigtopnm.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00000F78 (   3960.)
; Section size in file		: 00001000 (   4096.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		and	esp, 0FFFFFFF0h
		mov	eax, ds:dword_403000
		test	eax, eax
		jz	short loc_401013
		int	3		; Trap to Debugger

loc_401013:				; CODE XREF: start+10j
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_401090
		call	sub_401BA0
		leave
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401050	proc near		; DATA XREF: sub_401090+678o

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		xor	ecx, ecx
		mov	ebp, esp
		push	edi
		mov	edi, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ebx, [ebp+arg_4]
		cmp	ecx, ebx
		jnb	short loc_401089
		mov	edx, ds:dword_403010
		nop
		lea	esi, [esi+0]

loc_401070:				; CODE XREF: sub_401050+37j
		movzx	eax, byte ptr [edi+ecx]
		inc	ecx
		mov	[edx+esi], al
		mov	eax, ds:dword_403010
		inc	eax
		mov	ds:dword_403010, eax
		cmp	ecx, ebx
		mov	edx, eax
		jb	short loc_401070

loc_401089:				; CODE XREF: sub_401050+13j
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_401050	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401090	proc near		; DATA XREF: start+33o

var_468		= dword	ptr -468h
var_464		= dword	ptr -464h
var_460		= dword	ptr -460h
var_45C		= dword	ptr -45Ch
var_458		= dword	ptr -458h
var_454		= dword	ptr -454h
var_450		= dword	ptr -450h
var_44C		= dword	ptr -44Ch
var_448		= dword	ptr -448h
var_444		= dword	ptr -444h
var_438		= dword	ptr -438h
var_434		= dword	ptr -434h
var_430		= dword	ptr -430h
var_42C		= dword	ptr -42Ch
var_428		= dword	ptr -428h
var_424		= dword	ptr -424h
var_420		= dword	ptr -420h
var_419		= byte ptr -419h
var_418		= dword	ptr -418h
var_414		= dword	ptr -414h
var_410		= dword	ptr -410h
var_40C		= dword	ptr -40Ch
var_408		= dword	ptr -408h
var_404		= dword	ptr -404h
var_400		= dword	ptr -400h
var_3FC		= dword	ptr -3FCh
var_3F8		= dword	ptr -3F8h
var_3F4		= dword	ptr -3F4h
var_3F0		= dword	ptr -3F0h
var_3EC		= dword	ptr -3ECh
var_3E8		= dword	ptr -3E8h
var_3E4		= byte ptr -3E4h
var_3E3		= byte ptr -3E3h
var_3E2		= byte ptr -3E2h
var_3E1		= byte ptr -3E1h
var_3E0		= byte ptr -3E0h
var_3DF		= byte ptr -3DFh
var_3DE		= byte ptr -3DEh
var_3DD		= byte ptr -3DDh
var_3DC		= byte ptr -3DCh
var_3DB		= byte ptr -3DBh
var_3DA		= byte ptr -3DAh
var_3D9		= byte ptr -3D9h
var_3D8		= byte ptr -3D8h
var_3D7		= byte ptr -3D7h
var_3D6		= byte ptr -3D6h
var_3D5		= byte ptr -3D5h
var_3C8		= dword	ptr -3C8h
var_3B8		= dword	ptr -3B8h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	eax, 10h
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 45Ch
		and	esp, 0FFFFFFF0h
		call	sub_401B70
		call	__main
		call	__getreent
		mov	edi, [eax+4]
		mov	ebx, offset aStdin ; "<stdin>"
		mov	[ebp+var_3F0], edi
		mov	edi, 0FFFFFFFFh
		call	__getreent
		mov	[ebp+var_3F8], ebx
		mov	esi, [eax+8]
		xor	eax, eax
		mov	[ebp+var_400], eax
		mov	eax, [ebp+arg_4]
		xor	ecx, ecx
		mov	[ebp+var_3FC], ecx
		mov	edx, 0FFFFFFFFh
		xor	ecx, ecx
		mov	[ebp+var_3F4], esi
		mov	ebx, 1
		mov	esi, 0FFFFFFFFh
		mov	[ebp+var_408], edx
		lea	edx, [ebp+arg_0]
		mov	[ebp+var_418], ecx
		mov	[esp+468h+var_464], eax
		mov	[esp+468h+var_468], edx
		mov	[ebp+var_40C], edi
		mov	[ebp+var_410], esi
		mov	[ebp+var_414], ebx
		call	pnm_init
		mov	[esp+468h+var_468], 2000h
		call	malloc
		mov	[ebp+var_404], eax
		test	eax, eax
		jz	loc_4016C0

loc_401145:				; CODE XREF: sub_401090+63Cj
		mov	ecx, [ebp+arg_0]
		mov	esi, 1
		cmp	[ebp+var_414], ecx
		jge	short loc_4011A8
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401160:				; CODE XREF: sub_401090+116j
		mov	edx, [ebp+var_3FC]
		test	edx, edx
		jnz	short loc_401179
		mov	edi, [ebp+arg_4]
		mov	ebx, [edi+esi*4]
		cmp	byte ptr [ebx],	2Dh
		jz	loc_401472

loc_401179:				; CODE XREF: sub_401090+D8j
		mov	eax, [ebp+var_400]
		inc	[ebp+var_400]
		test	eax, eax
		jz	loc_4013D0
		dec	eax
		jz	loc_401564
		mov	[esp+468h+var_468], offset aTooManyNonOpti ; "Too many non-option arguments"
		call	pm_error

loc_4011A0:				; CODE XREF: sub_401090+38Dj
					; sub_401090+495j ...
		mov	ecx, [ebp+arg_0]

loc_4011A3:				; CODE XREF: sub_401090+41Bj
					; sub_401090+4AAj ...
		inc	esi
		cmp	esi, ecx

loc_4011A6:				; CODE XREF: sub_401090+40Aj
		jl	short loc_401160

loc_4011A8:				; CODE XREF: sub_401090+C3j
		lea	edx, [ebp+var_3C8]
		mov	edi, 2
		lea	esi, [ebp+var_3C8]
		mov	[esp+468h+var_468], edx
		call	jbg_dec_init
		mov	[esp+468h+var_468], esi
		mov	ecx, [ebp+var_40C]
		mov	ebx, [ebp+var_408]
		mov	[esp+468h+var_460], ecx
		mov	[esp+468h+var_464], ebx
		call	jbg_dec_maxsize
		lea	esi, [esi+0]

loc_4011E0:				; CODE XREF: sub_401090+1DFj
		mov	ecx, [ebp+var_3F0]
		mov	ebx, 2000h
		mov	esi, 1
		mov	[esp+468h+var_460], ebx
		mov	eax, [ebp+var_404]
		mov	[esp+468h+var_464], esi
		mov	[esp+468h+var_45C], ecx
		mov	[esp+468h+var_468], eax
		call	fread
		test	eax, eax
		mov	ebx, eax
		jz	short loc_401275
		mov	esi, [ebp+var_404]
		xor	edx, edx
		mov	[ebp+var_3EC], edx
		mov	esi, esi

loc_401220:				; CODE XREF: sub_401090+1CDj
		cmp	edi, 2
		setz	al
		test	edi, edi
		setz	cl
		or	eax, ecx
		test	al, 1
		jz	short loc_401260
		mov	[esp+468h+var_460], ebx
		lea	eax, [ebp+var_3EC]
		lea	edi, [ebp+var_3C8]
		mov	[esp+468h+var_464], esi
		mov	[esp+468h+var_468], edi
		mov	[esp+468h+var_45C], eax
		call	jbg_dec_in
		mov	edx, [ebp+var_3EC]
		mov	edi, eax
		add	esi, edx
		sub	ebx, edx
		jnz	short loc_401220
		nop

loc_401260:				; CODE XREF: sub_401090+19Fj
		cmp	edi, 2
		setz	al
		test	edi, edi
		setz	bl
		or	eax, ebx
		test	al, 1
		jnz	loc_4011E0

loc_401275:				; CODE XREF: sub_401090+17Ej
		mov	esi, [ebp+var_3F0]
		test	byte ptr [esi+0Ch], 40h
		jnz	loc_401641

loc_401285:				; CODE XREF: sub_401090+5C7j
		cmp	edi, 1
		ja	loc_401614

loc_40128E:				; CODE XREF: sub_401090+5ACj
		mov	edi, [ebp+var_410]
		test	edi, edi
		js	short loc_4012AA
		mov	eax, [ebp+var_3B8]
		cmp	eax, [ebp+var_410]
		jle	loc_40165C

loc_4012AA:				; CODE XREF: sub_401090+206j
					; sub_401090+5DCj
		lea	ecx, [ebp+var_3C8]
		lea	esi, [ebp+var_3C8]
		mov	[esp+468h+var_468], ecx
		call	jbg_dec_getwidth
		mov	[ebp+var_424], eax
		mov	[esp+468h+var_468], esi
		call	jbg_dec_getheight
		mov	[ebp+var_420], eax
		mov	ebx, [ebp+var_3B8]
		mov	[esp+468h+var_468], ebx
		call	pm_bitstomaxval
		mov	[ebp+var_428], eax
		mov	eax, [ebp+var_3B8]
		mov	edx, eax
		add	edx, 7
		js	loc_401671

loc_4012F7:				; CODE XREF: sub_401090+5E4j
		mov	edi, edx
		xor	ebx, ebx
		sar	edi, 3
		dec	eax
		jz	short loc_40130F
		mov	ebx, [ebp+var_410]
		test	ebx, ebx
		js	loc_4016D1

loc_40130F:				; CODE XREF: sub_401090+26Fj
		mov	[esp+468h+var_468], offset aWritingPbmFile ; "WRITING PBM FILE"
		call	pm_message
		mov	[esp+468h+var_464], ebx
		lea	edx, [ebp+var_3C8]
		mov	[esp+468h+var_468], edx
		call	jbg_dec_getimage
		mov	ebx, eax
		mov	eax, [ebp+var_424]
		add	eax, 7
		js	loc_401679

loc_40133E:				; CODE XREF: sub_401090+5F2j
		mov	edx, [ebp+var_420]
		mov	edi, eax
		xor	eax, eax
		mov	[esp+468h+var_45C], eax
		mov	ecx, [ebp+var_424]
		sar	edi, 3
		mov	esi, [ebp+var_3F4]
		mov	[esp+468h+var_460], edx
		mov	[esp+468h+var_464], ecx
		mov	[esp+468h+var_468], esi
		call	pbm_writepbminit
		mov	eax, [ebp+var_420]
		test	eax, eax
		jle	short loc_4013A7
		mov	esi, ebx
		mov	ebx, [ebp+var_420]
		lea	esi, [esi+0]

loc_401380:				; CODE XREF: sub_401090+315j
		mov	[esp+468h+var_464], esi
		mov	edx, [ebp+var_424]
		xor	eax, eax
		mov	[esp+468h+var_45C], eax
		mov	ecx, [ebp+var_3F4]
		add	esi, edi
		mov	[esp+468h+var_460], edx
		mov	[esp+468h+var_468], ecx
		call	pbm_writepbmrow_packed
		dec	ebx
		jnz	short loc_401380

loc_4013A7:				; CODE XREF: sub_401090+2E3j
					; sub_401090+7E0j
		mov	edx, [ebp+var_3F4]
		lea	ebx, [ebp+var_3C8]
		mov	[esp+468h+var_468], edx
		call	pm_close
		mov	[esp+468h+var_468], ebx
		call	jbg_dec_free
		lea	esp, [ebp+var_C]
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4013D0:				; CODE XREF: sub_401090+F7j
		mov	ebx, [ebp+arg_4]
		mov	eax, [ebx+esi*4]
		cmp	byte ptr [eax],	2Dh
		jnz	short loc_4013F0
		cmp	byte ptr [eax+1], 0
		jz	short loc_401415
		jmp	short loc_4013F0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_4013F0:				; CODE XREF: sub_401090+349j
					; sub_401090+351j
		mov	[ebp+var_3F8], eax
		mov	edi, offset aRb	; "rb"
		mov	[esp+468h+var_464], edi
		mov	[esp+468h+var_468], eax
		call	_fopen64
		mov	[ebp+var_3F0], eax
		test	eax, eax
		jz	loc_4015EB

loc_401415:				; CODE XREF: sub_401090+34Fj
					; sub_401090+571j
		mov	ecx, [ebp+var_418]
		test	ecx, ecx
		jz	loc_4011A0
		mov	edi, [ebp+var_3F0]
		mov	edx, 1
		mov	ebx, 14h
		mov	[esp+468h+var_460], ebx
		lea	esi, [ebp+var_3E8]
		mov	[esp+468h+var_464], edx
		mov	[esp+468h+var_45C], edi
		mov	[esp+468h+var_468], esi
		call	fread
		cmp	eax, 13h
		jg	loc_401886
		mov	[esp+468h+var_464], eax
		mov	[esp+468h+var_468], offset aInputFileIsD20 ; "Input file is %d < 20 bytes long and do"...
		call	printf

loc_401466:				; CODE XREF: sub_401090+A37j
		mov	[esp+468h+var_468], 0
		call	exit

loc_401472:				; CODE XREF: sub_401090+E3j
		movzx	eax, byte ptr [ebx+1]
		test	al, al
		mov	[ebp+var_419], al
		setz	al
		xor	edx, edx
		cmp	[ebp+var_400], 0
		setz	dl
		test	eax, edx
		jz	short loc_40149F
		inc	[ebp+var_400]
		inc	esi
		cmp	esi, ecx
		jmp	loc_4011A6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40149F:				; CODE XREF: sub_401090+3FFj
		cmp	[ebp+var_419], 0
		mov	edi, 1
		jz	loc_4011A3
		jmp	short loc_4014C0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_4014C0:				; CODE XREF: sub_401090+421j
					; sub_401090+4A5j
		movsx	edx, byte ptr [ebx+edi]
		mov	ecx, ds:_ctype_
		test	byte ptr [ecx+edx+1], 1
		jz	short loc_4014D4
		add	edx, 20h

loc_4014D4:				; CODE XREF: sub_401090+43Fj
		cmp	edx, 70h
		jz	short loc_40153F
		jg	short loc_4014FC
		cmp	edx, 62h
		jz	loc_4015BA
		jg	loc_4015A1
		cmp	edx, 2Dh
		jnz	short loc_40150E
		mov	ebx, 1
		mov	[ebp+var_3FC], ebx
		jmp	short loc_401522
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4014FC:				; CODE XREF: sub_401090+449j
		cmp	edx, 78h
		jz	loc_4015C7
		cmp	edx, 79h
		jz	loc_401698

loc_40150E:				; CODE XREF: sub_401090+45Dj
					; sub_401090+514j
		movsx	ecx, byte ptr [ebx+edi]
		mov	[esp+468h+var_468], offset aUnrecognizedOp ; "Unrecognized option: %c"
		mov	[esp+468h+var_464], ecx
		call	pm_error

loc_401522:				; CODE XREF: sub_401090+46Aj
					; sub_401090+4D2j ...
		inc	edi
		test	edi, edi
		jle	loc_4011A0
		mov	edx, [ebp+arg_4]
		mov	ebx, [edx+esi*4]
		cmp	byte ptr [ebx+edi], 0
		jnz	short loc_4014C0
		mov	ecx, [ebp+arg_0]
		jmp	loc_4011A3
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40153F:				; CODE XREF: sub_401090+447j
		inc	esi
		cmp	esi, [ebp+arg_0]
		jge	loc_401687

loc_401549:				; CODE XREF: sub_401090+603j
		mov	edi, [ebp+arg_4]
		mov	eax, [edi+esi*4]
		mov	edi, 0FFFFFFFFh
		mov	[esp+468h+var_468], eax
		call	atoi
		mov	[ebp+var_410], eax
		jmp	short loc_401522
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401564:				; CODE XREF: sub_401090+FEj
		mov	eax, [ebp+arg_4]
		mov	edi, offset aWb	; "wb"
		mov	ebx, [eax+esi*4]
		mov	[esp+468h+var_464], edi
		mov	[esp+468h+var_468], ebx
		call	_fopen64
		mov	[ebp+var_3F4], eax
		test	eax, eax
		jnz	loc_4011A0
		mov	[esp+468h+var_464], ebx
		mov	[esp+468h+var_468], offset aCanTOpenOutput ; "Can't open output file '%s'"
		call	pm_error
		mov	ecx, [ebp+arg_0]
		jmp	loc_4011A3
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4015A1:				; CODE XREF: sub_401090+454j
		cmp	edx, 64h
		jnz	loc_40150E
		mov	eax, 1
		mov	[ebp+var_418], eax
		jmp	loc_401522
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4015BA:				; CODE XREF: sub_401090+44Ej
		xor	edx, edx
		mov	[ebp+var_414], edx
		jmp	loc_401522
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4015C7:				; CODE XREF: sub_401090+46Fj
		inc	esi
		cmp	esi, [ebp+arg_0]
		jge	short loc_401606

loc_4015CD:				; CODE XREF: sub_401090+582j
		mov	ecx, [ebp+arg_4]
		mov	edi, [ecx+esi*4]
		mov	[esp+468h+var_468], edi
		mov	edi, 0FFFFFFFFh
		call	atol
		mov	[ebp+var_408], eax
		jmp	loc_401522
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4015EB:				; CODE XREF: sub_401090+37Fj
		mov	[esp+468h+var_468], offset aCanTOpenInputF ; "Can't open input file '%s'"
		mov	eax, [ebp+var_3F8]
		mov	[esp+468h+var_464], eax
		call	pm_error
		jmp	loc_401415
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401606:				; CODE XREF: sub_401090+53Bj
		mov	[esp+468h+var_468], offset aXNeedsAValue ; "-x needs a value"
		call	pm_error
		jmp	short loc_4015CD
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401614:				; CODE XREF: sub_401090+1F8j
		mov	[esp+468h+var_468], edi
		xor	eax, eax
		mov	[esp+468h+var_464], eax
		call	jbg_strerror
		mov	[esp+468h+var_460], eax
		mov	edx, [ebp+var_3F8]
		mov	[esp+468h+var_468], offset aProblemWithInp ; "Problem with input file '%s': %s\n"
		mov	[esp+468h+var_464], edx
		call	pm_error
		jmp	loc_40128E
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401641:				; CODE XREF: sub_401090+1EFj
		mov	[esp+468h+var_468], offset aProblemWhileRe ; "Problem while reading input file '%s"
		mov	ecx, [ebp+var_3F8]
		mov	[esp+468h+var_464], ecx
		call	pm_error
		jmp	loc_401285
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40165C:				; CODE XREF: sub_401090+214j
		mov	[esp+468h+var_464], eax
		mov	[esp+468h+var_468], offset aImageHasOnlyDP ; "Image has	only %d	planes!\n"
		call	pm_error
		jmp	loc_4012AA
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401671:				; CODE XREF: sub_401090+261j
		lea	edx, [eax+0Eh]
		jmp	loc_4012F7
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401679:				; CODE XREF: sub_401090+2A8j
		mov	eax, [ebp+var_424]
		add	eax, 0Eh
		jmp	loc_40133E
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401687:				; CODE XREF: sub_401090+4B3j
		mov	[esp+468h+var_468], offset aPNeedsAValue ; "-p needs a value"
		call	pm_error
		jmp	loc_401549
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401698:				; CODE XREF: sub_401090+478j
		inc	esi
		cmp	esi, [ebp+arg_0]
		jge	loc_401875

loc_4016A2:				; CODE XREF: sub_401090+7F1j
		mov	edx, [ebp+arg_4]
		mov	edi, 0FFFFFFFFh
		mov	ebx, [edx+esi*4]
		mov	[esp+468h+var_468], ebx
		call	atol
		mov	[ebp+var_40C], eax
		jmp	loc_401522
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4016C0:				; CODE XREF: sub_401090+AFj
		mov	[esp+468h+var_468], offset aSorryNotEnough ; "Sorry, not enough	memory available!"
		call	pm_error
		jmp	loc_401145
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4016D1:				; CODE XREF: sub_401090+279j
		mov	[esp+468h+var_468], offset aWritingPgmFile ; "WRITING PGM FILE"
		call	pm_message
		mov	edx, [ebp+var_420]
		mov	ebx, [ebp+var_424]
		imul	ebx, edx
		imul	ebx, edi
		mov	[esp+468h+var_468], ebx
		mov	ebx, 5032h
		call	malloc
		mov	[ebp+var_42C], eax
		mov	esi, [ebp+var_414]
		mov	ecx, offset sub_401050
		mov	[esp+468h+var_45C], eax
		lea	eax, [ebp+var_3C8]
		mov	[esp+468h+var_460], ecx
		mov	[esp+468h+var_464], esi
		mov	[esp+468h+var_468], eax
		call	jbg_dec_merge_planes
		mov	[esp+468h+var_458], ebx
		xor	edx, edx
		mov	ecx, [ebp+var_428]
		mov	[esp+468h+var_454], edx
		mov	esi, [ebp+var_420]
		mov	eax, [ebp+var_424]
		mov	[esp+468h+var_45C], ecx
		mov	edx, [ebp+var_3F4]
		mov	[esp+468h+var_460], esi
		mov	[esp+468h+var_464], eax
		mov	[esp+468h+var_468], edx
		call	pnm_writepnminit
		mov	ebx, [ebp+var_424]
		mov	[esp+468h+var_468], ebx
		call	pnm_allocrow
		xor	ecx, ecx
		mov	esi, [ebp+var_420]
		mov	ebx, eax
		mov	[ebp+var_430], ecx
		cmp	[ebp+var_430], esi
		jge	loc_40185A
		xor	eax, eax
		mov	[ebp+var_438], eax

loc_40178F:				; CODE XREF: sub_401090+7C4j
		xor	ecx, ecx
		mov	esi, [ebp+var_424]
		mov	[ebp+var_434], ecx
		cmp	[ebp+var_434], esi
		jge	short loc_401801
		xor	ecx, ecx
		mov	esi, esi
		lea	edi, [edi+0]

loc_4017B0:				; CODE XREF: sub_401090+76Fj
		xor	edx, edx
		cmp	edx, edi
		jge	short loc_4017EA
		mov	eax, [ebp+var_434]
		mov	esi, [ebp+var_438]
		add	esi, eax
		imul	esi, edi
		mov	eax, [ebp+var_42C]
		add	esi, eax
		nop

loc_4017D0:				; CODE XREF: sub_401090+758j
		mov	dword ptr [ecx+ebx], 0
		xor	eax, eax
		mov	[ecx+ebx+4], eax
		movzx	eax, byte ptr [esi+edx]
		inc	edx
		cmp	edx, edi
		mov	[ecx+ebx+8], eax
		jl	short loc_4017D0

loc_4017EA:				; CODE XREF: sub_401090+724j
		inc	[ebp+var_434]
		add	ecx, 0Ch
		mov	edx, [ebp+var_424]
		cmp	[ebp+var_434], edx
		jl	short loc_4017B0

loc_401801:				; CODE XREF: sub_401090+713j
		mov	[esp+468h+var_464], ebx
		xor	eax, eax
		mov	esi, [ebp+var_428]
		mov	[esp+468h+var_454], eax
		mov	edx, [ebp+var_424]
		mov	ecx, 5032h
		mov	[esp+468h+var_458], ecx
		mov	eax, [ebp+var_3F4]
		mov	[esp+468h+var_45C], esi
		mov	[esp+468h+var_460], edx
		mov	[esp+468h+var_468], eax
		call	pnm_writepnmrow
		inc	[ebp+var_430]
		mov	ecx, [ebp+var_424]
		mov	esi, [ebp+var_420]
		add	[ebp+var_438], ecx
		cmp	[ebp+var_430], esi
		jl	loc_40178F

loc_40185A:				; CODE XREF: sub_401090+6F1j
		mov	[esp+468h+var_468], ebx
		call	free
		mov	edi, [ebp+var_42C]
		mov	[esp+468h+var_468], edi
		call	free
		jmp	loc_4013A7
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401875:				; CODE XREF: sub_401090+60Cj
		mov	[esp+468h+var_468], offset aYNeedsAValue ; "-y needs a value"
		call	pm_error
		jmp	loc_4016A2
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401886:				; CODE XREF: sub_401090+3C0j
		movzx	ebx, [ebp+var_3D8]
		movzx	esi, [ebp+var_3DB]
		movzx	eax, [ebp+var_3DA]
		movzx	edi, [ebp+var_3D9]
		mov	[esp+468h+var_448], ebx
		shl	esi, 10h
		shl	eax, 8
		movzx	ebx, [ebp+var_3DC]
		movzx	ecx, [ebp+var_3D7]
		movzx	edx, [ebp+var_3DF]
		mov	[esp+468h+var_468], offset aDecompositionO ; "Decomposition of BIH:\n\n	 DL = %d\n  D  ="...
		shl	ebx, 18h
		or	ebx, esi
		mov	[esp+468h+var_444], ecx
		or	ebx, eax
		movzx	ecx, [ebp+var_3DE]
		or	ebx, edi
		movzx	edi, [ebp+var_3E0]
		shl	edx, 10h
		movzx	esi, [ebp+var_3DD]
		shl	ecx, 8
		shl	edi, 18h
		movzx	eax, [ebp+var_3E3]
		or	edi, edx
		or	edi, ecx
		movzx	edx, [ebp+var_3E2]
		or	edi, esi
		movzx	esi, [ebp+var_3E4]
		shl	eax, 10h
		movzx	ecx, [ebp+var_3E1]
		shl	edx, 8
		shl	esi, 18h
		mov	[esp+468h+var_44C], ebx
		or	esi, eax
		or	esi, edx
		movzx	eax, byte ptr [ebp+var_3E8+3]
		or	esi, ecx
		movzx	edx, byte ptr [ebp+var_3E8+2]
		movzx	ecx, byte ptr [ebp+var_3E8+1]
		mov	[esp+468h+var_450], edi
		mov	[esp+468h+var_458], eax
		movzx	eax, byte ptr [ebp+var_3E8]
		mov	[esp+468h+var_45C], edx
		mov	[esp+468h+var_454], esi
		mov	[esp+468h+var_460], ecx
		mov	[esp+468h+var_464], eax
		call	printf
		movzx	eax, [ebp+var_3D6]
		mov	edx, offset aOther ; " other"
		test	al, 0F0h
		jnz	short loc_401976
		mov	edx, offset unk_402234

loc_401976:				; CODE XREF: sub_401090+8DFj
		mov	[esp+468h+var_450], edx
		test	al, 1
		mov	edx, offset aSmid ; " SMID"
		jnz	short loc_401988
		mov	edx, offset unk_402234

loc_401988:				; CODE XREF: sub_401090+8F1j
		mov	[esp+468h+var_454], edx
		test	al, 2
		mov	edx, offset aIleave ; "	ILEAVE"
		jnz	short loc_40199A
		mov	edx, offset unk_402234

loc_40199A:				; CODE XREF: sub_401090+903j
		mov	[esp+468h+var_458], edx
		test	al, 4
		mov	edx, offset aSeq ; " SEQ"
		jnz	short loc_4019AC
		mov	edx, offset unk_402234

loc_4019AC:				; CODE XREF: sub_401090+915j
		mov	[esp+468h+var_45C], edx
		test	al, 8
		mov	edx, offset aHitolo ; "	HITOLO"
		jnz	short loc_4019BE
		mov	edx, offset unk_402234

loc_4019BE:				; CODE XREF: sub_401090+927j
		mov	[esp+468h+var_460], edx
		movzx	edx, al
		mov	[esp+468h+var_464], edx
		mov	[esp+468h+var_468], offset aOrderDSSSSS	; "  order   = %d %s%s%s%s%s\n"
		call	printf
		movzx	eax, [ebp+var_3D5]
		mov	edx, offset aOther ; " other"
		test	al, al
		js	short loc_4019EA
		mov	edx, offset unk_402234

loc_4019EA:				; CODE XREF: sub_401090+953j
		mov	[esp+468h+var_444], edx
		test	al, 1
		mov	edx, offset aDplast ; "	DPLAST"
		jnz	short loc_4019FC
		mov	edx, offset unk_402234

loc_4019FC:				; CODE XREF: sub_401090+965j
		mov	[esp+468h+var_448], edx
		test	al, 2
		mov	edx, offset aDppriv ; "	DPPRIV"
		jnz	short loc_401A0E
		mov	edx, offset unk_402234

loc_401A0E:				; CODE XREF: sub_401090+977j
		mov	[esp+468h+var_44C], edx
		test	al, 4
		mov	edx, offset aDpon ; " DPON"
		jnz	short loc_401A20
		mov	edx, offset unk_402234

loc_401A20:				; CODE XREF: sub_401090+989j
		mov	[esp+468h+var_450], edx
		test	al, 8
		mov	edx, offset aTpbon ; " TPBON"
		jnz	short loc_401A32
		mov	edx, offset unk_402234

loc_401A32:				; CODE XREF: sub_401090+99Bj
		mov	[esp+468h+var_454], edx
		test	al, 10h
		mov	edx, offset aTpdon ; " TPDON"
		jnz	short loc_401A44
		mov	edx, offset unk_402234

loc_401A44:				; CODE XREF: sub_401090+9ADj
		mov	[esp+468h+var_458], edx
		test	al, 20h
		mov	edx, offset aVlength ; " VLENGTH"
		jnz	short loc_401A56
		mov	edx, offset unk_402234

loc_401A56:				; CODE XREF: sub_401090+9BFj
		mov	[esp+468h+var_45C], edx
		test	al, 40h
		mov	edx, offset aLrltwo ; "	LRLTWO"
		jnz	short loc_401A68
		mov	edx, offset unk_402234

loc_401A68:				; CODE XREF: sub_401090+9D1j
		mov	[esp+468h+var_460], edx
		movzx	edx, al
		mov	[esp+468h+var_464], edx
		mov	[esp+468h+var_468], offset aOptionsDSSSSSS ; "	options	= %d %s%s%s%s%s%s%s%s\n"
		call	printf
		movzx	ecx, byte ptr [ebp+var_3E8+2]
		movzx	eax, byte ptr [ebp+var_3E8]
		mov	[esp+468h+var_45C], ecx
		movzx	ecx, byte ptr [ebp+var_3E8+1]
		mov	edx, ecx
		sub	edx, eax
		mov	[esp+468h+var_460], edx
		mov	edx, edi
		mov	edi, 1
		shl	edi, cl
		dec	edi
		shr	edx, cl
		test	esi, edi
		jz	short loc_401ACC
		lea	eax, [edx+ebx]

loc_401AB3:				; CODE XREF: sub_401090+A40j
		mov	[esp+468h+var_468], offset aLuStripesDLaye ; "\n  %lu stripes, %d layers, %d planes\n\n"
		xor	edx, edx
		div	ebx
		mov	[esp+468h+var_464], eax
		call	printf
		jmp	loc_401466
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401ACC:				; CODE XREF: sub_401090+A1Ej
		lea	eax, [edx+ebx-1]
		jmp	short loc_401AB3
sub_401090	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION jbg_dec_free. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION jbg_dec_merge_planes. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION jbg_dec_getimage.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION jbg_dec_getheight. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION jbg_dec_getwidth.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION jbg_strerror. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION jbg_dec_in. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION jbg_dec_maxsize. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION jbg_dec_init. PRESS KEYPAD "+" TO	EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401B70	proc near		; CODE XREF: sub_401090+14p
		push	ecx
		mov	ecx, esp
		add	ecx, 8

loc_401B76:				; CODE XREF: sub_401B70+1Bj
		cmp	eax, 1000h
		jb	short loc_401B8D
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		jmp	short loc_401B76
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B8D:				; CODE XREF: sub_401B70+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		jmp	eax
sub_401B70	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401BA0	proc near		; CODE XREF: start+3Ap

var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_C2		= dword	ptr -0C2h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		mov	[esp+18h+var_14], eax
		mov	[esp+18h+var_18], esi
		call	sub_401CA0
		sub	esp, 8
		test	eax, eax
		jz	short loc_401BD1
		mov	[esp+18h+var_18], 0

loc_401BCB:				; CODE XREF: sub_401BA0+56j
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)

loc_401BD1:				; CODE XREF: sub_401BA0+22j
		sub	esp, 0C0h
		lea	ebx, [esp+0D8h+var_C2+1]
		and	ebx, 0FFFFFFF0h
		mov	dword ptr [ebx], 0
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	sub_401CA0
		sub	esp, 8
		mov	[esp+0D8h+var_D8], ebx
		jmp	short loc_401BCB
sub_401BA0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION exit. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _fopen64.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION atoi. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION atol. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getreent. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION printf. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fread. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free. PRESS KEYPAD "+" TO	EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401CA0	proc near		; CODE XREF: sub_401BA0+18p
					; sub_401BA0+4Bp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		push	ebx
		sub	esp, 4		; lpModuleName
		mov	ebx, [ebp+arg_4]
		test	ebx, ebx
		jz	loc_401DA3

loc_401CB4:				; CODE XREF: sub_401CA0+11Fj
		mov	dword ptr [ebx+4], 0A8h
		xor	ecx, ecx
		mov	edx, 84h
		mov	dword ptr [ebx+8], 3EDh
		test	eax, eax
		mov	dword ptr [ebx+0Ch], 12h
		mov	[ebx+80h], ecx
		mov	[ebx+84h], edx
		mov	dword ptr [ebx+2Ch], offset dword_401F68
		mov	dword ptr [ebx+30h], offset dword_401F70
		mov	dword ptr [ebx+14h], offset unk_403024
		jnz	loc_401D91
		mov	eax, ds:_impure_ptr
		mov	[ebx+10h], eax

loc_401D01:				; CODE XREF: sub_401CA0+FEj
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [ebx+48h], offset sub_401EA0
		mov	dword ptr [ebx+4Ch], offset sub_401E90
		mov	[ebx+28h], eax
		mov	eax, [ebp+0]
		mov	dword ptr [ebx+50h], offset sub_401E80
		mov	dword ptr [ebx+54h], offset sub_401E70
		mov	dword ptr [ebx+24h], offset unk_403020
		mov	[ebx], eax
		mov	dword ptr [ebx+18h], offset malloc
		mov	dword ptr [ebx+1Ch], offset free
		mov	dword ptr [ebx+20h], offset loc_401E60
		mov	dword ptr [ebx+44h], offset loc_401E50
		mov	[esp+8+var_8], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	dword ptr [ebx+34h], offset aStdin ; "<stdin>"
		mov	dword ptr [ebx+38h], offset aStdin ; "<stdin>"
		mov	dword ptr [ebx+3Ch], offset dword_403000
		mov	dword ptr [ebx+40h], 403050h
		call	sub_401E20
		mov	eax, 1

loc_401D8A:				; CODE XREF: sub_401CA0+116j
		mov	ebx, [ebp+var_4]
		leave
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D91:				; CODE XREF: sub_401CA0+53j
		mov	edx, [ebx+0A4h]
		mov	eax, ds:_impure_ptr
		mov	[eax], edx
		jmp	loc_401D01
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401DA3:				; CODE XREF: sub_401CA0+Ej
		mov	[esp+8+var_8], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_401D8A
		mov	ebx, edx
		mov	eax, 1
		jmp	loc_401CB4
sub_401CA0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:__imp__fopen64
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401DF0	proc near		; CODE XREF: sub_401E20+1Fp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ebx, [ebp+arg_4]
		jmp	short loc_401E0C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E00:				; CODE XREF: sub_401DF0+1Ej
		mov	edx, [ecx+4]
		mov	eax, [ecx]
		add	ecx, 8
		add	edx, esi
		add	[edx], eax

loc_401E0C:				; CODE XREF: sub_401DF0+Ej
		cmp	ecx, ebx
		jb	short loc_401E00
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_401DF0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401E20	proc near		; CODE XREF: sub_401CA0+E0p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	edx, 400000h
		mov	ebp, esp
		mov	eax, offset unk_4022F0
		sub	esp, 0Ch
		mov	[esp+0Ch+var_4], edx
		mov	[esp+0Ch+var_8], eax
		mov	[esp+0Ch+var_C], offset	unk_4022F0
		call	sub_401DF0
		leave
		retn
sub_401E20	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401E50:				; DATA XREF: sub_401CA0+ABo
		jmp	ds:calloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401E60:				; DATA XREF: sub_401CA0+A4o
		jmp	ds:realloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401E70	proc near		; DATA XREF: sub_401CA0+86o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401E70	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401E80	proc near		; DATA XREF: sub_401CA0+7Fo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401E80	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401E90	proc near		; DATA XREF: sub_401CA0+72o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401E90	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401EA0	proc near		; DATA XREF: sub_401CA0+6Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401EA0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pbm_writepbminit.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pbm_writepbmrow_packed. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_bitstomaxval. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_close.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_error.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_message. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_allocrow. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_init.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_writepnminit.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_writepnmrow. PRESS KEYPAD "+"	TO EXPAND]
		align 4
dword_401F68	dd 0FFFFFFFFh, 0	; DATA XREF: sub_401CA0+3Eo
dword_401F70	dd 0FFFFFFFFh, 23h dup(0) ; DATA XREF: sub_401CA0+45o
_text		ends

; Section 2. (virtual address 00002000)
; Virtual size			: 000002F0 (	752.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001400
; Flags	40000040: Data Readable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 402000h
aStdin		db '<stdin>',0          ; DATA XREF: sub_401090+26o
					; sub_401CA0+C4o ...
aTooManyNonOpti	db 'Too many non-option arguments',0 ; DATA XREF: sub_401090+104o
aWritingPbmFile	db 'WRITING PBM FILE',0 ; DATA XREF: sub_401090+27Fo
aRb		db 'rb',0               ; DATA XREF: sub_401090+366o
		align 4
aInputFileIsD20	db 'Input file is %d < 20 bytes long and does therefore not cont'
					; DATA XREF: sub_401090+3CAo
		db 'ain an intact BIE header!',0Ah,0
aUnrecognizedOp	db 'Unrecognized option: %c',0 ; DATA XREF: sub_401090+482o
aWb		db 'wb',0               ; DATA XREF: sub_401090+4D7o
aCanTOpenOutput	db 'Can',27h,'t open output file ',27h,'%s',27h,0
					; DATA XREF: sub_401090+4FDo
aCanTOpenInputF	db 'Can',27h,'t open input file ',27h,'%s',27h,0
					; DATA XREF: sub_401090+55Bo
aXNeedsAValue	db '-x needs a value',0 ; DATA XREF: sub_401090+576o
		align 4
aProblemWithInp	db 'Problem with input file ',27h,'%s',27h,': %s',0Ah,0
					; DATA XREF: sub_401090+59Co
		align 4
aProblemWhileRe	db 'Problem while reading input file ',27h,'%s',0
					; DATA XREF: sub_401090+5B1o
aImageHasOnlyDP	db 'Image has only %d planes!',0Ah,0 ; DATA XREF: sub_401090+5D0o
aPNeedsAValue	db '-p needs a value',0 ; DATA XREF: sub_401090+5F7o
		align 4
aSorryNotEnough	db 'Sorry, not enough memory available!',0 ; DATA XREF: sub_401090+630o
aWritingPgmFile	db 'WRITING PGM FILE',0 ; DATA XREF: sub_401090+641o
aYNeedsAValue	db '-y needs a value',0 ; DATA XREF: sub_401090+7E5o
		align 4
aDecompositionO	db 'Decomposition of BIH:',0Ah ; DATA XREF: sub_401090+831o
		db 0Ah
		db '  DL = %d',0Ah
		db '  D  = %d',0Ah
		db '  P  = %d',0Ah
		db '  -  = %d',0Ah
		db '  XD = %lu',0Ah
		db '  YD = %lu',0Ah
		db '  L0 = %lu',0Ah
		db '  MX = %d',0Ah
		db '  MY = %d',0Ah,0
aOther		db ' other',0           ; DATA XREF: sub_401090+8D8o
					; sub_401090+94Co
unk_402234	db    0	;		; DATA XREF: sub_401090+8E1o
					; sub_401090+8F3o ...
aSmid		db ' SMID',0            ; DATA XREF: sub_401090+8ECo
aIleave		db ' ILEAVE',0          ; DATA XREF: sub_401090+8FEo
aSeq		db ' SEQ',0             ; DATA XREF: sub_401090+910o
aHitolo		db ' HITOLO',0          ; DATA XREF: sub_401090+922o
aOrderDSSSSS	db '  order   = %d %s%s%s%s%s',0Ah,0 ; DATA XREF: sub_401090+939o
aDplast		db ' DPLAST',0          ; DATA XREF: sub_401090+960o
aDppriv		db ' DPPRIV',0          ; DATA XREF: sub_401090+972o
aDpon		db ' DPON',0            ; DATA XREF: sub_401090+984o
aTpbon		db ' TPBON',0           ; DATA XREF: sub_401090+996o
aTpdon		db ' TPDON',0           ; DATA XREF: sub_401090+9A8o
aVlength	db ' VLENGTH',0         ; DATA XREF: sub_401090+9BAo
aLrltwo		db ' LRLTWO',0          ; DATA XREF: sub_401090+9CCo
aOptionsDSSSSSS	db '  options = %d %s%s%s%s%s%s%s%s',0Ah,0 ; DATA XREF: sub_401090+9E3o
		align 4
aLuStripesDLaye	db 0Ah			; DATA XREF: sub_401090+A23o
		db '  %lu stripes, %d layers, %d planes',0Ah
		db 0Ah,0
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_4022F0	db    0	;		; DATA XREF: sub_401E20+8o
					; sub_401E20+18o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_rdata		ends

; Section 3. (virtual address 00003000)
; Virtual size			: 00000050 (	 80.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 403000h
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
dword_403000	dd ?			; DATA XREF: start+9r sub_401CA0+D2o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_403010	dd ?			; DATA XREF: sub_401050+15r
					; sub_401050+28r ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_403020	db    ?	;		; DATA XREF: sub_401CA0+8Do
		db    ?	;
		db    ?	;
		db    ?	;
unk_403024	db    ?	;		; DATA XREF: sub_401CA0+4Co
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
_bss		ends

;
; Imports from cygwin1
;
; Section 4. (virtual address 00004000)
; Virtual size			: 000004E4 (   1252.)
; Section size in file		: 00000600 (   1536.)
; Offset to raw	data for section: 00001800
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp___getreent:dword ; DATA XREF: __getreentr
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn _ctype_:dword	; DATA XREF: sub_401090+434r
		extrn __imp__fopen64:dword ; DATA XREF:	_fopen64r
					; .text:00401DE0r
		extrn _impure_ptr:dword	; DATA XREF: sub_401CA0+59r
					; sub_401CA0+F7r
; int __cdecl _imp_atoi(const char *)
		extrn __imp_atoi:dword	; DATA XREF: atoir
; __int32 __cdecl _imp_atol(const char *)
		extrn __imp_atol:dword	; DATA XREF: atolr
; void *__cdecl	calloc(size_t,size_t)
		extrn calloc:dword	; DATA XREF: .text:00401E50r
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_401BA0+2Br
					; .text:00401DD0r
; void __cdecl _imp_exit(int)
		extrn __imp_exit:dword	; DATA XREF: exitr
		extrn __imp_fread:dword	; DATA XREF: freadr
; void __cdecl _imp_free(void *)
		extrn __imp_free:dword	; DATA XREF: freer
; void *__cdecl	_imp_malloc(size_t)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
		extrn __imp_printf:dword ; DATA	XREF: printfr
; void *__cdecl	realloc(void *,size_t)
		extrn realloc:dword	; DATA XREF: .text:00401E60r


;
; Imports from cygjbig1
;
		extrn __imp_jbg_dec_free:dword ; DATA XREF: jbg_dec_freer
		extrn __imp_jbg_dec_getheight:dword ; DATA XREF: jbg_dec_getheightr
		extrn __imp_jbg_dec_getimage:dword ; DATA XREF:	jbg_dec_getimager
		extrn __imp_jbg_dec_getwidth:dword ; DATA XREF:	jbg_dec_getwidthr
		extrn __imp_jbg_dec_in:dword ; DATA XREF: jbg_dec_inr
		extrn __imp_jbg_dec_init:dword ; DATA XREF: jbg_dec_initr
		extrn __imp_jbg_dec_maxsize:dword ; DATA XREF: jbg_dec_maxsizer
		extrn __imp_jbg_dec_merge_planes:dword ; DATA XREF: jbg_dec_merge_planesr
		extrn __imp_jbg_strerror:dword ; DATA XREF: jbg_strerrorr


;
; Imports from KERNEL32
;
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr


;
; Imports from cygnetpbm-10
;
		extrn __imp_pbm_writepbminit:dword ; DATA XREF:	pbm_writepbminitr
		extrn __imp_pbm_writepbmrow_packed:dword
					; DATA XREF: pbm_writepbmrow_packedr
		extrn __imp_pm_bitstomaxval:dword ; DATA XREF: pm_bitstomaxvalr
		extrn __imp_pm_close:dword ; DATA XREF:	pm_closer
		extrn __imp_pm_error:dword ; DATA XREF:	pm_errorr
		extrn __imp_pm_message:dword ; DATA XREF: pm_messager
		extrn __imp_pnm_allocrow:dword ; DATA XREF: pnm_allocrowr
		extrn __imp_pnm_init:dword ; DATA XREF:	pnm_initr
		extrn __imp_pnm_writepnminit:dword ; DATA XREF:	pnm_writepnminitr
		extrn __imp_pnm_writepnmrow:dword ; DATA XREF: pnm_writepnmrowr



		end start
