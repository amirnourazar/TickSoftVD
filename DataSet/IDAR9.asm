

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\ddate.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00000D70 (   3440.)
; Section size in file		: 00000E00 (   3584.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		and	esp, 0FFFFFFF0h
		mov	eax, ds:dword_404000
		test	eax, eax
		jz	short loc_401013
		int	3		; Trap to Debugger

loc_401013:				; CODE XREF: start+10j
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_4016E0
		call	sub_4019A0
		leave
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401050	proc near		; CODE XREF: sub_4016E0+182p

var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_58		= dword	ptr -58h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h

		push	ebp
		cld
		mov	ebp, esp
		push	edi
		mov	ecx, 0Ch
		push	esi
		lea	edi, [ebp+var_58]
		push	ebx
		sub	esp, 5Ch
		mov	esi, offset unk_4020D8
		mov	eax, [ebp+arg_4]
		mov	ebx, [ebp+arg_0]
		rep movsd
		lea	esi, [eax-1]
		cmp	esi, 0Bh
		ja	loc_401190
		mov	edi, [ebp+arg_8]
		test	edi, edi
		jle	loc_401122
		mov	edx, [ebp+arg_8]
		cmp	[ebp+eax*4+var_5C], edx
		jl	loc_401122

loc_401093:				; CODE XREF: sub_401050+113j
					; sub_401050+12Dj
		mov	edx, [ebp+arg_C]
		mov	eax, esi
		add	edx, 48Eh
		mov	[ebp+var_1C], edx
		jmp	short loc_4010AA
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4010A3:				; CODE XREF: sub_401050+5Cj
		dec	eax
		mov	esi, [ebp+eax*4+var_58]
		add	ecx, esi

loc_4010AA:				; CODE XREF: sub_401050+51j
		test	eax, eax
		jg	short loc_4010A3
		mov	[ebp+var_28], 0
		mov	eax, [ebp+arg_8]
		test	edx, edx
		lea	ecx, [ecx+eax-1]
		mov	eax, edx
		js	loc_4011DE

loc_4010C6:				; CODE XREF: sub_401050+191j
		and	eax, 0FFFFFFFCh
		sub	edx, eax
		cmp	edx, 2
		jz	loc_4011BB

loc_4010D4:				; CODE XREF: sub_401050+17Cj
		mov	[ebp+var_24], ecx

loc_4010D7:				; CODE XREF: sub_401050+189j
		mov	eax, [ebp+var_24]
		cmp	eax, 48h
		mov	[ebp+var_20], eax
		jle	short loc_4010FF
		mov	edx, [ebp+var_28]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_4010F0:				; CODE XREF: sub_401050+A7j
		sub	eax, 49h
		inc	edx
		cmp	eax, 48h
		jg	short loc_4010F0
		mov	[ebp+var_28], edx
		mov	[ebp+var_24], eax

loc_4010FF:				; CODE XREF: sub_401050+90j
		mov	eax, [ebp+var_28]
		mov	[ebx], eax
		mov	eax, [ebp+var_24]
		mov	[ebx+4], eax
		mov	eax, [ebp+var_20]
		mov	[ebx+8], eax
		mov	eax, [ebp+var_1C]
		mov	[ebx+0Ch], eax
		add	esp, 5Ch
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401122:				; CODE XREF: sub_401050+30j
					; sub_401050+3Dj
		cmp	eax, 2
		setnz	al
		cmp	[ebp+arg_8], 1Dh
		setnz	dl
		or	eax, edx
		test	al, 1
		jnz	short loc_401190
		test	byte ptr [ebp+arg_C], 3
		jnz	short loc_401190
		mov	eax, [ebp+arg_C]
		mov	edi, 51EB851Fh
		imul	edi
		mov	[ebp+var_5C], edx
		mov	edi, [ebp+var_5C]
		mov	[ebp+var_60], eax
		mov	eax, [ebp+arg_C]
		sar	edi, 5
		cdq
		sub	edi, edx
		lea	eax, [edi+edi*4]
		lea	eax, [eax+eax*4]
		shl	eax, 2
		cmp	[ebp+arg_C], eax
		jnz	loc_401093
		mov	eax, [ebp+var_5C]
		sar	eax, 7
		sub	eax, edx
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		shl	eax, 4
		cmp	[ebp+arg_C], eax
		jz	loc_401093
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401190:				; CODE XREF: sub_401050+25j
					; sub_401050+E3j ...
		mov	[ebp+var_28], 0FFFFFFFFh
		mov	dword ptr [ebx], 0FFFFFFFFh
		mov	eax, [ebp+var_24]
		mov	[ebx+4], eax
		mov	eax, [ebp+var_20]
		mov	[ebx+8], eax
		mov	eax, [ebp+var_1C]
		mov	[ebx+0Ch], eax
		add	esp, 5Ch
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn	4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4011BB:				; CODE XREF: sub_401050+7Ej
		cmp	ecx, 3Bh
		setz	al
		xor	edx, edx
		cmp	[ebp+arg_8], 1Dh
		setz	dl
		test	eax, edx
		jz	loc_4010D4
		mov	[ebp+var_24], 0FFFFFFFFh
		jmp	loc_4010D7
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4011DE:				; CODE XREF: sub_401050+70j
		lea	eax, [edx+3]
		jmp	loc_4010C6
sub_401050	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4011F0	proc near		; CODE XREF: sub_4016E0+222p

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h
		mov	eax, [ebp+arg_8]
		mov	[ebp+var_18], 0
		mov	ebx, [ebp+arg_0]
		mov	esi, [ebp+arg_4]
		lea	edx, [eax+0BFAh]
		test	edx, edx
		mov	[ebp+var_C], edx
		mov	ecx, edx
		js	short loc_401280

loc_401217:				; CODE XREF: sub_4011F0+96j
		and	ecx, 0FFFFFFFCh
		sub	edx, ecx
		cmp	edx, 2
		jz	short loc_401271

loc_401221:				; CODE XREF: sub_4011F0+86j
		mov	[ebp+var_14], esi

loc_401224:				; CODE XREF: sub_4011F0+8Ej
					; sub_4011F0+9Fj
		mov	eax, [ebp+var_14]
		cmp	eax, 48h
		mov	[ebp+var_10], eax
		jle	short loc_40124F
		mov	edx, [ebp+var_18]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401240:				; CODE XREF: sub_4011F0+57j
		sub	eax, 49h
		inc	edx
		cmp	eax, 48h
		jg	short loc_401240
		mov	[ebp+var_18], edx
		mov	[ebp+var_14], eax

loc_40124F:				; CODE XREF: sub_4011F0+3Dj
		mov	eax, [ebp+var_18]
		mov	[ebx], eax
		mov	eax, [ebp+var_14]
		mov	[ebx+4], eax
		mov	eax, [ebp+var_10]
		mov	[ebx+8], eax
		mov	eax, [ebp+var_C]
		mov	[ebx+0Ch], eax
		add	esp, 10h
		mov	eax, ebx
		pop	ebx
		pop	esi
		pop	ebp
		retn	4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401271:				; CODE XREF: sub_4011F0+2Fj
		cmp	esi, 3Bh
		jz	short loc_401288
		jle	short loc_401221
		lea	eax, [esi-1]
		mov	[ebp+var_14], eax
		jmp	short loc_401224
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401280:				; CODE XREF: sub_4011F0+25j
		lea	ecx, [eax+0BFDh]
		jmp	short loc_401217
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401288:				; CODE XREF: sub_4011F0+84j
		mov	[ebp+var_14], 0FFFFFFFFh
		jmp	short loc_401224
sub_4011F0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		jmp	short sub_4012A0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4012A0	proc near		; CODE XREF: .text:00401291j
					; sub_401440+1E9p

var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 10h
		xor	ebx, ebx
		cmp	[ebp+arg_0], 3Ah
		mov	ecx, [ebp+arg_4]
		jg	short loc_4012D0
		lea	eax, [ecx+48Eh]
		test	al, 3
		mov	[ebp+var_1C], eax
		jz	loc_4013DD
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_4012D0:				; CODE XREF: sub_4012A0+12j
					; sub_4012A0+177j ...
		mov	eax, [ebp+arg_0]
		sub	ebx, eax
		cmp	ecx, 2662h
		lea	edi, [ebx+0B9h]
		jg	short loc_401352
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_4012F0:				; CODE XREF: sub_4012A0+B0j
		inc	ecx
		lea	eax, [ecx+48Eh]
		test	al, 3
		mov	[ebp+var_1C], eax
		jnz	loc_4013D0
		mov	ebx, 51EB851Fh
		imul	ebx
		mov	eax, edx
		mov	esi, edx
		mov	edx, [ebp+var_1C]
		sar	eax, 5
		sar	edx, 1Fh
		sub	eax, edx
		lea	eax, [eax+eax*4]
		mov	[ebp+var_14], edx
		lea	eax, [eax+eax*4]
		shl	eax, 2
		cmp	[ebp+var_1C], eax
		jnz	short loc_401342
		mov	eax, esi
		sar	eax, 7
		sub	eax, edx
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		shl	eax, 4
		cmp	[ebp+var_1C], eax
		jnz	loc_4013D0

loc_401342:				; CODE XREF: sub_4012A0+87j
		lea	eax, [edi+16Eh]
		mov	edi, eax

loc_40134A:				; CODE XREF: sub_4012A0+138j
		cmp	ecx, 2662h
		jle	short loc_4012F0

loc_401352:				; CODE XREF: sub_4012A0+41j
		cmp	ecx, 2663h
		jle	short loc_4013BF
		lea	esi, [esi+0]

loc_401360:				; CODE XREF: sub_4012A0+11Dj
		mov	eax, ecx
		add	eax, 48Eh
		dec	ecx
		mov	[ebp+var_1C], eax
		test	al, 3
		jnz	loc_401427
		mov	ebx, 51EB851Fh
		imul	ebx
		mov	eax, edx
		mov	esi, edx
		mov	edx, [ebp+var_1C]
		sar	eax, 5
		sar	edx, 1Fh
		sub	eax, edx
		lea	eax, [eax+eax*4]
		mov	[ebp+var_18], edx
		lea	eax, [eax+eax*4]
		shl	eax, 2
		cmp	[ebp+var_1C], eax
		jnz	short loc_4013AF
		mov	eax, esi
		sar	eax, 7
		sub	eax, edx
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		shl	eax, 4
		cmp	[ebp+var_1C], eax
		jnz	short loc_401427

loc_4013AF:				; CODE XREF: sub_4012A0+F8j
		lea	eax, [edi-16Eh]
		mov	edi, eax

loc_4013B7:				; CODE XREF: sub_4012A0+18Fj
		cmp	ecx, 2663h
		jg	short loc_401360

loc_4013BF:				; CODE XREF: sub_4012A0+B8j
		add	esp, 10h
		mov	eax, edi
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_4013D0:				; CODE XREF: sub_4012A0+5Cj
					; sub_4012A0+9Cj
		lea	eax, [edi+16Dh]
		mov	edi, eax
		jmp	loc_40134A
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4013DD:				; CODE XREF: sub_4012A0+1Fj
		mov	esi, 51EB851Fh
		imul	esi
		mov	eax, edx
		mov	edi, edx
		mov	edx, [ebp+var_1C]
		sar	eax, 5
		sar	edx, 1Fh
		sub	eax, edx
		lea	eax, [eax+eax*4]
		mov	[ebp+var_10], edx
		lea	eax, [eax+eax*4]
		shl	eax, 2
		cmp	[ebp+var_1C], eax
		jnz	short loc_40141D
		mov	eax, edi
		sar	eax, 7
		sub	eax, edx
		lea	eax, [eax+eax*4]
		lea	eax, [eax+eax*4]
		shl	eax, 4
		cmp	[ebp+var_1C], eax
		jnz	loc_4012D0

loc_40141D:				; CODE XREF: sub_4012A0+162j
		mov	ebx, 1
		jmp	loc_4012D0
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401427:				; CODE XREF: sub_4012A0+CDj
					; sub_4012A0+10Dj
		lea	eax, [edi-16Dh]
		mov	edi, eax
		jmp	short loc_4013B7
sub_4012A0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		jmp	short sub_401440
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401440	proc near		; CODE XREF: .text:00401431j
					; sub_4016E0+1D7p

var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_60		= dword	ptr -60h
var_5C		= dword	ptr -5Ch
var_4C		= dword	ptr -4Ch
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		xor	esi, esi
		push	ebx
		sub	esp, 6Ch
		mov	eax, [ebp+arg_4]
		mov	[ebp+var_3C], 0FFFFFFFFh
		mov	ebx, [ebp+arg_0]
		mov	[ebp+var_40], 0
		mov	[esp+78h+var_78], eax
		mov	edi, ebx
		call	strlen
		mov	[ebp+var_44], eax
		cmp	esi, eax
		jge	short loc_401483

loc_401470:				; CODE XREF: sub_401440+41j
		mov	eax, [ebp+arg_4]
		lea	edx, [esi+1]
		cmp	byte ptr [eax+esi], 25h
		jz	short loc_4014B4

loc_40147C:				; CODE XREF: sub_401440+7Fj
		cmp	edx, [ebp+var_44] ; default
		mov	esi, edx

loc_401481:				; CODE XREF: sub_401440+D6j
					; sub_401440+E6j
		jl	short loc_401470

loc_401483:				; CODE XREF: sub_401440+2Ej
		mov	byte ptr [ebx],	0
		xor	esi, esi
		cmp	esi, [ebp+var_44]
		jge	short loc_4014A9
		lea	esi, [esi+0]

loc_401490:				; CODE XREF: sub_401440+67j
		cmp	esi, [ebp+var_3C]
		jz	short loc_4014C8

loc_401495:				; CODE XREF: sub_401440+8Cj
		mov	edx, [ebp+arg_4]
		movzx	eax, byte ptr [edx+esi]
		cmp	al, 25h
		jz	short loc_4014F0
		mov	[edi], al
		inc	edi

loc_4014A3:				; CODE XREF: sub_401440+BBj
					; sub_401440+BDj ...
		inc	esi		; default

loc_4014A4:				; CODE XREF: sub_401440+ADj
					; sub_401440+1A5j ...
		cmp	esi, [ebp+var_44]
		jl	short loc_401490

loc_4014A9:				; CODE XREF: sub_401440+4Bj
					; sub_401440+207j
		mov	byte ptr [edi],	0
		add	esp, 6Ch
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4014B4:				; CODE XREF: sub_401440+3Aj
		movsx	eax, byte ptr [eax+esi+1]
		sub	eax, 41h	; switch 61 cases
		cmp	eax, 3Ch
		ja	short loc_40147C ; default
		jmp	ds:off_403224[eax*4] ; switch jump
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4014C8:				; CODE XREF: sub_401440+53j
		cmp	[ebp+arg_C], 0FFFFFFFFh
		jnz	short loc_401495
		mov	[esp+78h+var_78], offset aSt_TibSDay ; "St. Tib's Day"
		call	libintl_gettext
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], edi
		add	edi, 0Dh
		call	strcpy
		mov	esi, [ebp+var_40]
		inc	esi
		jmp	short loc_4014A4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_4014F0:				; CODE XREF: sub_401440+5Ej
		inc	esi
		movsx	eax, byte ptr [esi+edx]
		sub	eax, 2Eh	; switch 71 cases
		cmp	eax, 46h
		ja	short loc_4014A3 ; default
		jmp	ds:off_403318[eax*4] ; switch jump
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401504:				; CODE XREF: sub_401440+81j
					; DATA XREF: .rdata:00403224o
		mov	eax, [ebp+var_3C] ; case 0x41
		test	eax, eax
		jg	short loc_40151B ; case	0x7D

loc_40150B:				; CODE XREF: sub_401440+81j
					; DATA XREF: .rdata:00403224o
		mov	[ebp+var_3C], esi ; case 0x7B

loc_40150E:				; CODE XREF: sub_401440+81j
					; DATA XREF: .rdata:00403224o
		lea	edx, [esi+1]	; case 0x42
		mov	esi, edx
		cmp	edx, [ebp+var_44]
		jmp	loc_401481
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40151B:				; CODE XREF: sub_401440+81j
					; sub_401440+C9j
					; DATA XREF: ...
		lea	edx, [esi+1]	; case 0x7D
		mov	esi, edx
		cmp	edx, [ebp+var_44]
		mov	[ebp+var_40], edx
		jmp	loc_401481
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40152B:				; CODE XREF: sub_401440+BDj
					; DATA XREF: .rdata:00403318o
		mov	byte ptr [edi],	9 ; case 0x74
		inc	edi
		jmp	loc_4014A3	; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401534:				; CODE XREF: sub_401440+BDj
					; DATA XREF: .rdata:00403318o
		mov	byte ptr [edi],	0Ah ; case 0x6E
		inc	edi
		jmp	loc_4014A3	; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40153D:				; CODE XREF: sub_401440+BDj
					; DATA XREF: .rdata:00403318o
		mov	ebx, [ebp+arg_C] ; case	0x65
		mov	eax, 66666667h
		lea	ecx, [ebx+1]
		imul	ecx
		mov	[ebp+var_60], eax
		mov	eax, ecx
		mov	[ebp+var_5C], edx
		sar	edx, 2
		mov	[ebp+var_4C], edx
		cdq
		sub	[ebp+var_4C], edx
		mov	edx, [ebp+var_4C]
		lea	eax, [edx+edx*4]
		add	eax, eax
		mov	edx, offset aSt	; "st"
		sub	ecx, eax
		cmp	ecx, 1
		jz	short loc_401589
		cmp	ecx, 2
		mov	edx, offset aNd	; "nd"
		jz	short loc_401589
		cmp	ecx, 3
		mov	edx, offset aRd	; "rd"
		jz	short loc_401589
		mov	edx, offset aTh	; "th"

loc_401589:				; CODE XREF: sub_401440+12Ej
					; sub_401440+138j ...
		mov	[esp+78h+var_6C], edx
		lea	eax, [ebx+1]
		lea	ebx, [ebp+var_38]
		mov	[esp+78h+var_70], eax
		mov	eax, offset aDS	; "%d%s"
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sprintf
		jmp	short loc_4015C6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4015AA:				; CODE XREF: sub_401440+BDj
					; DATA XREF: .rdata:00403318o
		mov	eax, [ebp+arg_C] ; case	0x64
		inc	eax

loc_4015AE:				; CODE XREF: sub_401440+1DAj
					; sub_401440+1EEj
		mov	[esp+78h+var_70], eax
		lea	ebx, [ebp+var_38]
		mov	eax, offset aD	; "%d"
		mov	[esp+78h+var_74], eax
		mov	[esp+78h+var_78], ebx
		call	sprintf

loc_4015C6:				; CODE XREF: sub_401440+168j
					; sub_401440+1B4j ...
		test	ebx, ebx
		jz	loc_4014A3	; default
		mov	[esp+78h+var_78], edi
		inc	esi
		mov	[esp+78h+var_74], ebx
		call	strcpy
		mov	[esp+78h+var_78], ebx
		call	strlen
		add	edi, eax
		jmp	loc_4014A4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4015EA:				; CODE XREF: sub_401440+BDj
					; DATA XREF: .rdata:00403318o
		mov	eax, [ebp+arg_8] ; case	0x62
		mov	ebx, dword_402088[eax*4]
		jmp	short loc_4015C6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4015F6:				; CODE XREF: sub_401440+BDj
					; DATA XREF: .rdata:00403318o
		mov	ecx, [ebp+arg_10] ; case 0x61
		mov	eax, 66666667h
		imul	ecx
		mov	eax, ecx
		mov	ebx, edx
		sar	ebx, 1
		cdq
		sub	ebx, edx
		lea	eax, [ebx+ebx*4]
		sub	ecx, eax
		mov	ebx, dword_4020B0[ecx*4]
		jmp	short loc_4015C6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401617:				; CODE XREF: sub_401440+BDj
					; DATA XREF: .rdata:00403318o
		mov	eax, [ebp+arg_14] ; case 0x59
		jmp	short loc_4015AE
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40161C:				; CODE XREF: sub_401440+BDj
					; DATA XREF: .rdata:00403318o
		mov	eax, [ebp+arg_14] ; case 0x58
		mov	[esp+78h+var_74], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+78h+var_78], eax
		call	sub_4012A0
		jmp	loc_4015AE
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401633:				; CODE XREF: sub_401440+BDj
					; DATA XREF: .rdata:00403318o
		mov	eax, [ebp+arg_C] ; case	0x4E
		cmp	eax, 4
		setnz	dl
		cmp	eax, 31h
		setnz	al
		movzx	eax, al
		test	edx, eax
		jnz	loc_4014A9
		inc	esi
		jmp	loc_4014A4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401653:				; CODE XREF: sub_401440+BDj
					; DATA XREF: .rdata:00403318o
		mov	ecx, [ebp+arg_C] ; case	0x48
		cmp	ecx, 4
		setz	al
		cmp	ecx, 31h
		setz	dl
		or	eax, edx
		test	al, 1
		jz	loc_4014A3	; default
		mov	eax, [ebp+arg_8]
		shl	eax, 3
		cmp	ecx, 31h
		jz	short loc_4016CE

loc_401677:				; CODE XREF: sub_401440+291j
		mov	ebx, dword_402060[eax]
		jmp	loc_4015C6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401682:				; CODE XREF: sub_401440+BDj
					; DATA XREF: .rdata:00403318o
		mov	eax, [ebp+arg_8] ; case	0x42
		mov	ebx, dword_40209C[eax*4]
		jmp	loc_4015C6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401691:				; CODE XREF: sub_401440+BDj
					; DATA XREF: .rdata:00403318o
		mov	ecx, [ebp+arg_10] ; case 0x41
		mov	eax, 66666667h
		imul	ecx
		mov	eax, ecx
		mov	ebx, edx
		sar	ebx, 1
		cdq
		sub	ebx, edx
		lea	eax, [ebx+ebx*4]
		sub	ecx, eax
		mov	ebx, dword_4020C4[ecx*4]
		jmp	loc_4015C6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4016B5:				; CODE XREF: sub_401440+BDj
					; DATA XREF: .rdata:00403318o
		call	random		; case 0x2E
		mov	ebx, 10h
		cdq
		idiv	ebx
		mov	ebx, dword_402020[edx*4]
		jmp	loc_4015C6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4016CE:				; CODE XREF: sub_401440+235j
		add	eax, 4
		jmp	short loc_401677
sub_401440	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4016E0	proc near		; DATA XREF: start+33o

var_1E8		= dword	ptr -1E8h
var_1E4		= dword	ptr -1E4h
var_1E0		= dword	ptr -1E0h
var_1DC		= dword	ptr -1DCh
var_1D8		= dword	ptr -1D8h
var_1D4		= dword	ptr -1D4h
var_1C0		= dword	ptr -1C0h
var_1BC		= dword	ptr -1BCh
var_1B8		= dword	ptr -1B8h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	eax, 10h
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1DCh
		mov	ebx, [ebp+arg_0]
		and	esp, 0FFFFFFF0h
		call	sub_401970
		call	__main
		xor	eax, eax
		mov	[ebp+var_1C0], eax
		mov	eax, [ebp+arg_4]
		mov	esi, [eax]
		mov	eax, 2Fh
		mov	[esp+1E8h+var_1E4], eax
		mov	[esp+1E8h+var_1E8], esi
		call	strrchr
		test	eax, eax
		jz	short loc_401726
		lea	esi, [eax+1]

loc_401726:				; CODE XREF: sub_4016E0+41j
		mov	[esp+1E8h+var_1E8], 0
		mov	eax, offset unk_40311C
		mov	edi, offset aUsrShareLocale ; "/usr/share/locale"
		mov	[esp+1E8h+var_1E4], eax
		call	setlocale
		mov	[esp+1E8h+var_1E4], edi
		mov	edi, 1
		mov	[esp+1E8h+var_1E8], offset aCygutils ; "cygutils"
		call	libintl_bindtextdomain
		mov	[esp+1E8h+var_1E8], offset aCygutils ; "cygutils"
		call	libintl_textdomain
		mov	[esp+1E8h+var_1E8], 0
		call	time
		mov	[esp+1E8h+var_1E8], eax
		call	srandom
		cmp	edi, ebx
		jge	short loc_40179A
		lea	esi, [esi+0]

loc_401780:				; CODE XREF: sub_4016E0+B8j
		mov	edx, [ebp+arg_4]
		mov	eax, [edx+edi*4]
		movsx	edx, byte ptr [eax]
		cmp	edx, 2Bh
		jnz	short loc_4017E2
		inc	eax
		inc	edi
		mov	[ebp+var_1C0], eax
		cmp	edi, ebx
		jl	short loc_401780

loc_40179A:				; CODE XREF: sub_4016E0+97j
					; sub_4016E0+105j
		mov	eax, ebx
		sub	eax, edi
		cmp	eax, 3
		jz	short loc_401820
		cmp	ebx, edi
		jz	loc_4018CE

loc_4017AB:				; CODE XREF: sub_4016E0+10Bj
					; sub_4016E0+137j
		mov	[esp+1E8h+var_1E8], offset aUsageSFormatDa ; "usage: %s	[+format] [day month year]\n"
		call	libintl_gettext
		mov	ebx, eax
		call	__getreent
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		mov	[esp+1E8h+var_1E4], ebx
		mov	[esp+1E8h+var_1E0], edx
		mov	eax, [eax+0Ch]
		mov	[esp+1E8h+var_1E8], eax
		call	fprintf
		mov	[esp+1E8h+var_1E8], 1
		call	exit

loc_4017E2:				; CODE XREF: sub_4016E0+ACj
		cmp	edx, 2Dh
		jnz	short loc_40179A
		cmp	byte ptr [eax+1], 56h
		jnz	short loc_4017AB
		mov	[esp+1E8h+var_1E8], offset aSFromSVersionS ; "%s from %s version %s\n"
		call	libintl_gettext
		mov	[esp+1E8h+var_1E8], eax
		mov	ecx, offset a1_2_10 ; "1.2.10"
		mov	edx, offset aCygutils ;	"cygutils"
		mov	[esp+1E8h+var_1DC], ecx
		mov	[esp+1E8h+var_1E0], edx
		mov	[esp+1E8h+var_1E4], esi
		call	printf
		jmp	short loc_4017AB
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 8

loc_401820:				; CODE XREF: sub_4016E0+C1j
		mov	ecx, [ebp+arg_4]
		mov	eax, [ecx+edi*4]
		mov	[esp+1E8h+var_1E8], eax
		call	atoi
		mov	edx, [ebp+arg_4]
		mov	esi, eax
		mov	eax, [edx+edi*4+4]
		mov	[esp+1E8h+var_1E8], eax
		call	atoi
		mov	ecx, [ebp+arg_4]
		mov	ebx, eax
		mov	eax, [ecx+edi*4+8]
		mov	[esp+1E8h+var_1E8], eax
		call	atoi
		mov	[esp+1E8h+var_1DC], eax
		lea	edx, [ebp+var_28]
		mov	[esp+1E8h+var_1E0], esi
		mov	[esp+1E8h+var_1E4], ebx
		mov	[esp+1E8h+var_1E8], edx
		call	sub_401050
		sub	esp, 4
		cmp	[ebp+var_28], 0FFFFFFFFh
		jz	loc_40192C
		mov	eax, [ebp+var_1C0]
		test	eax, eax
		jz	loc_401922

loc_401882:				; CODE XREF: sub_4016E0+232j
					; sub_4016E0+23Dj ...
		mov	[ebp+var_1C0], eax
		mov	eax, [ebp+var_28]
		lea	ebx, [ebp+var_1B8]
		mov	[esp+1E8h+var_1E8], ebx
		mov	[esp+1E8h+var_1E0], eax
		mov	eax, [ebp+var_24]
		mov	[esp+1E8h+var_1DC], eax
		mov	eax, [ebp+var_20]
		mov	[esp+1E8h+var_1D8], eax
		mov	eax, [ebp+var_1C]
		mov	[esp+1E8h+var_1D4], eax
		mov	eax, [ebp+var_1C0]
		mov	[esp+1E8h+var_1E4], eax
		call	sub_401440
		mov	[esp+1E8h+var_1E8], ebx
		call	puts
		xor	eax, eax

loc_4018C6:				; CODE XREF: sub_4016E0+25Dj
		lea	esp, [ebp+var_C]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4018CE:				; CODE XREF: sub_4016E0+C5j
		mov	[esp+1E8h+var_1E8], 0
		call	time
		mov	[ebp+var_1BC], eax
		lea	eax, [ebp+var_1BC]
		mov	[esp+1E8h+var_1E8], eax
		call	localtime
		mov	ecx, [eax+1Ch]
		lea	edx, [ebp+var_28]
		mov	eax, [eax+14h]
		mov	[esp+1E8h+var_1E8], edx
		mov	[esp+1E8h+var_1E4], ecx
		mov	[esp+1E8h+var_1E0], eax
		call	sub_4011F0
		mov	eax, [ebp+var_1C0]
		sub	esp, 4
		test	eax, eax
		jnz	loc_401882
		mov	eax, dword_402000
		jmp	loc_401882
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401922:				; CODE XREF: sub_4016E0+19Cj
		mov	eax, offset aABDYYold ;	"%{%A, %B %d%},	%Y YOLD"
		jmp	loc_401882
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40192C:				; CODE XREF: sub_4016E0+18Ej
		mov	[esp+1E8h+var_1E8], offset aInvalidDateOut ; "Invalid date -- out of range"
		call	puts
		mov	eax, 0FFFFFFFFh
		jmp	short loc_4018C6
sub_4016E0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4
; [00000006 BYTES: COLLAPSED FUNCTION libintl_gettext. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION libintl_bindtextdomain. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION libintl_textdomain. PRESS	KEYPAD "+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401970	proc near		; CODE XREF: sub_4016E0+17p
		push	ecx
		mov	ecx, esp
		add	ecx, 8

loc_401976:				; CODE XREF: sub_401970+1Bj
		cmp	eax, 1000h
		jb	short loc_40198D
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		jmp	short loc_401976
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40198D:				; CODE XREF: sub_401970+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		jmp	eax
sub_401970	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4019A0	proc near		; CODE XREF: start+3Ap

var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_C2		= dword	ptr -0C2h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		mov	[esp+18h+var_14], eax
		mov	[esp+18h+var_18], esi
		call	sub_401B00
		sub	esp, 8
		test	eax, eax
		jz	short loc_4019D1
		mov	[esp+18h+var_18], 0

loc_4019CB:				; CODE XREF: sub_4019A0+56j
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)

loc_4019D1:				; CODE XREF: sub_4019A0+22j
		sub	esp, 0C0h
		lea	ebx, [esp+0D8h+var_C2+1]
		and	ebx, 0FFFFFFF0h
		mov	dword ptr [ebx], 0
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	sub_401B00
		sub	esp, 8
		mov	[esp+0D8h+var_D8], ebx
		jmp	short loc_4019CB
sub_4019A0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION puts. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION sprintf. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strcpy. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strlen. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION localtime. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION exit. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getreent. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fprintf. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION atoi. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION printf. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION time. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION srandom. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION setlocale. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strrchr. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION random. PRESS KEYPAD "+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401B00	proc near		; CODE XREF: sub_4019A0+18p
					; sub_4019A0+4Bp

var_18		= dword	ptr -18h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h	; lpModuleName
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_0]
		test	ebx, ebx
		jz	loc_401BEA
		mov	dword ptr [ebx+4], 0A8h
		xor	eax, eax
		mov	ecx, 96h
		mov	dword ptr [ebx+8], 3EDh
		mov	dword ptr [ebx+0Ch], 13h
		mov	[ebx+80h], eax
		mov	[ebx+84h], ecx
		mov	dword ptr [ebx+2Ch], offset dword_401D60
		mov	dword ptr [ebx+30h], offset dword_401D68
		mov	dword ptr [ebx+14h], offset unk_404014
		mov	eax, ds:_impure_ptr
		mov	[ebx+10h], eax

loc_401B5B:				; CODE XREF: sub_401B00+14Bj
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+0]
		mov	[ebx+28h], esi
		mov	dword ptr [ebx+48h], offset sub_401D30
		mov	dword ptr [ebx+4Ch], offset sub_401D20
		mov	dword ptr [ebx+50h], offset sub_401D10
		mov	dword ptr [ebx+54h], offset sub_401D00
		mov	dword ptr [ebx+24h], offset unk_404010
		mov	[ebx], eax
		mov	dword ptr [ebx+18h], offset loc_401CF0
		mov	dword ptr [ebx+1Ch], offset loc_401CE0
		mov	dword ptr [ebx+20h], offset loc_401CD0
		mov	dword ptr [ebx+44h], offset loc_401CC0
		mov	[esp+18h+var_18], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	dword ptr [ebx+34h], offset dword_402000
		mov	dword ptr [ebx+38h], offset unk_402120
		mov	dword ptr [ebx+3Ch], offset dword_404000
		mov	dword ptr [ebx+40h], 404040h
		call	sub_401C90
		mov	eax, 1

loc_401BE1:				; CODE XREF: sub_401B00+FDj
		lea	esp, [ebp+var_8]
		pop	ebx
		pop	esi
		pop	ebp
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401BEA:				; CODE XREF: sub_401B00+10j
		mov	[esp+18h+var_18], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_401BE1
		mov	dword ptr [edx+4], 0A8h
		mov	ebx, edx
		mov	eax, 96h
		mov	dword ptr [edx+8], 3EDh
		mov	dword ptr [edx+0Ch], 13h
		xor	edx, edx
		mov	[ebx+80h], edx
		mov	edx, [ebx+0A4h]
		mov	[ebx+84h], eax
		mov	dword ptr [ebx+2Ch], offset dword_401D60
		mov	dword ptr [ebx+30h], offset dword_401D68
		mov	dword ptr [ebx+14h], offset unk_404014
		mov	eax, ds:_impure_ptr
		mov	[eax], edx
		jmp	loc_401B5B
sub_401B00	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401C60	proc near		; CODE XREF: sub_401C90+1Fp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ebx, [ebp+arg_4]
		jmp	short loc_401C7C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C70:				; CODE XREF: sub_401C60+1Ej
		mov	edx, [ecx+4]
		mov	eax, [ecx]
		add	ecx, 8
		add	edx, esi
		add	[edx], eax

loc_401C7C:				; CODE XREF: sub_401C60+Ej
		cmp	ecx, ebx
		jb	short loc_401C70
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_401C60	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401C90	proc near		; CODE XREF: sub_401B00+D7p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	edx, 400000h
		mov	ebp, esp
		mov	eax, offset unk_4034C0
		sub	esp, 0Ch
		mov	[esp+0Ch+var_4], edx
		mov	[esp+0Ch+var_8], eax
		mov	[esp+0Ch+var_C], offset	unk_4034C0
		call	sub_401C60
		leave
		retn
sub_401C90	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401CC0:				; DATA XREF: sub_401B00+A2o
		jmp	ds:calloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401CD0:				; DATA XREF: sub_401B00+9Bo
		jmp	ds:realloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401CE0:				; DATA XREF: sub_401B00+94o
		jmp	ds:free
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401CF0:				; DATA XREF: sub_401B00+8Do
		jmp	ds:malloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401D00	proc near		; DATA XREF: sub_401B00+7Do
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401D00	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401D10	proc near		; DATA XREF: sub_401B00+76o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401D10	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401D20	proc near		; DATA XREF: sub_401B00+6Fo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401D20	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401D30	proc near		; DATA XREF: sub_401B00+68o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401D30	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
dword_401D60	dd 0FFFFFFFFh, 0	; DATA XREF: sub_401B00+3Eo
					; sub_401B00+12Fo
dword_401D68	dd 0FFFFFFFFh, 25h dup(0) ; DATA XREF: sub_401B00+45o
					; sub_401B00+136o
_text		ends

; Section 2. (virtual address 00002000)
; Virtual size			: 00000120 (	288.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001200
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 402000h
dword_402000	dd 403000h		; DATA XREF: sub_4016E0+238r
					; sub_401B00+BBo
aABDYYold	db '%{%A, %B %d%}, %Y YOLD',0 ; DATA XREF: sub_4016E0+242o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
dword_402020	dd 403041h		; DATA XREF: sub_401440+282r
		dd offset aAllHailDiscord ; "All Hail Discordia!"
		dd offset aKallisti	; "Kallisti!"
		dd offset aFnord_	; "Fnord."
		dd offset aOrNot_	; "Or not."
		dd offset aWibble_	; "Wibble."
		dd offset aPzat		; "Pzat!"
		dd offset aPTang	; "P'tang!"
		dd offset aFrink	; "Frink!"
		dd offset aGrudnukDemandS ; "Grudnuk demand sustenance!"
		dd offset aKeepTheLasagna ; "Keep the Lasagna flying!"
		dd offset unk_4030CA
		dd offset aYouAreWhatYouS ; "You are what you see."
		dd offset aOrIsIt?	; "Or is it?"
		dd offset aThisStatementI ; "This statement is false."
		dd offset unk_40311C
dword_402060	dd 40311Dh		; DATA XREF: sub_401440+237r
		dd offset aChaoflux	; "Chaoflux"
		dd offset aMojoday	; "Mojoday"
		dd offset aDiscoflux	; "Discoflux"
		dd offset aSyaday	; "Syaday"
		dd offset aConfuflux	; "Confuflux"
		dd offset aZaraday	; "Zaraday"
		dd offset aBureflux	; "Bureflux"
		dd offset aMaladay	; "Maladay"
		dd offset aAfflux	; "Afflux"
dword_402088	dd 403171h		; DATA XREF: sub_401440+1ADr
		dd offset aDsc		; "Dsc"
		dd offset aCfn		; "Cfn"
		dd offset aBcy		; "Bcy"
		dd offset aAfm		; "Afm"
dword_40209C	dd 403185h		; DATA XREF: sub_401440+245r
		dd offset aDiscord	; "Discord"
		dd offset aConfusion	; "Confusion"
		dd offset aBureaucracy	; "Bureaucracy"
		dd offset aTheAftermath	; "The Aftermath"
dword_4020B0	dd 4031B7h		; DATA XREF: sub_401440+1CEr
		dd offset aBt		; "BT"
		dd offset aPd		; "PD"
		dd offset aPp		; "PP"
		dd offset aSo		; "SO"
dword_4020C4	dd 4031C6h		; DATA XREF: sub_401440+269r
		dd offset aBoomtime	; "Boomtime"
		dd offset aPungenday	; "Pungenday"
		dd offset aPricklePrickle ; "Prickle-Prickle"
		dd offset aSettingOrange ; "Setting Orange"
unk_4020D8	db  1Fh	;		; DATA XREF: sub_401050+12o
		db    0	;
		db    0	;
		db    0	;
		db  1Ch	;
		db    0	;
		db    0	;
		db    0	;
		db  1Fh	;
		db    0	;
		db    0	;
		db    0	;
		db  1Eh	;
		db    0	;
		db    0	;
		db    0	;
		db  1Fh	;
		db    0	;
		db    0	;
		db    0	;
		db  1Eh	;
		db    0	;
		db    0	;
		db    0	;
		db  1Fh	;
		db    0	;
		db    0	;
		db    0	;
		db  1Fh	;
		db    0	;
		db    0	;
		db    0	;
		db  1Eh	;
		db    0	;
		db    0	;
		db    0	;
		db  1Fh	;
		db    0	;
		db    0	;
		db    0	;
		db  1Eh	;
		db    0	;
		db    0	;
		db    0	;
		db  1Fh	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_402120	db    0	;		; DATA XREF: sub_401B00+C2o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_data		ends

; Section 3. (virtual address 00003000)
; Virtual size			: 000004C0 (   1216.)
; Section size in file		: 00000600 (   1536.)
; Offset to raw	data for section: 00001400
; Flags	40000040: Data Readable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 403000h
aTodayIsATheEDa	db 'Today is %{%A, the %e day of %B%} in the YOLD %Y%N%nCelebrat'
		db 'e %H',0
aHailEris	db 'Hail Eris!',0
aAllHailDiscord	db 'All Hail Discordia!',0 ; DATA XREF: .data:00402024o
aKallisti	db 'Kallisti!',0        ; DATA XREF: .data:00402028o
aFnord_		db 'Fnord.',0           ; DATA XREF: .data:0040202Co
aOrNot_		db 'Or not.',0          ; DATA XREF: .data:00402030o
aWibble_	db 'Wibble.',0          ; DATA XREF: .data:00402034o
aPzat		db 'Pzat!',0            ; DATA XREF: .data:00402038o
aPTang		db 'P',27h,'tang!',0    ; DATA XREF: .data:0040203Co
aFrink		db 'Frink!',0           ; DATA XREF: .data:00402040o
aGrudnukDemandS	db 'Grudnuk demand sustenance!',0 ; DATA XREF: .data:00402044o
aKeepTheLasagna	db 'Keep the Lasagna flying!',0 ; DATA XREF: .data:00402048o
unk_4030CA	db  55h	; U		; DATA XREF: .data:0040204Co
		db  6Dh	; m
		db  6Ch	; l
		db  61h	; a
		db  75h	; u
		db  74h	; t
		db  20h	;
		db  5Ah	; Z
		db  65h	; e
		db  62h	; b
		db  72h	; r
		db  61h	; a
		db  20h	;
		db 0FCh	; ü
		db  62h	; b
		db  65h	; e
		db  72h	; r
		db  20h	;
		db  61h	; a
		db  6Ch	; l
		db  6Ch	; l
		db  65h	; e
		db  73h	; s
		db  21h	; !
		db    0	;
aYouAreWhatYouS	db 'You are what you see.',0 ; DATA XREF: .data:00402050o
aOrIsIt?	db 'Or is it?',0        ; DATA XREF: .data:00402054o
aThisStatementI	db 'This statement is false.',0 ; DATA XREF: .data:00402058o
unk_40311C	db    0	;		; DATA XREF: sub_4016E0+4Do
					; .data:0040205Co
		db  4Dh	; M
		db  75h	; u
		db  6Eh	; n
		db  67h	; g
		db  64h	; d
		db  61h	; a
		db  79h	; y
		db    0	;
aChaoflux	db 'Chaoflux',0         ; DATA XREF: .data:00402064o
aMojoday	db 'Mojoday',0          ; DATA XREF: .data:00402068o
aDiscoflux	db 'Discoflux',0        ; DATA XREF: .data:0040206Co
aSyaday		db 'Syaday',0           ; DATA XREF: .data:00402070o
aConfuflux	db 'Confuflux',0        ; DATA XREF: .data:00402074o
aZaraday	db 'Zaraday',0          ; DATA XREF: .data:00402078o
aBureflux	db 'Bureflux',0         ; DATA XREF: .data:0040207Co
aMaladay	db 'Maladay',0          ; DATA XREF: .data:00402080o
aAfflux		db 'Afflux',0           ; DATA XREF: .data:00402084o
aChs		db 'Chs',0
aDsc		db 'Dsc',0              ; DATA XREF: .data:0040208Co
aCfn		db 'Cfn',0              ; DATA XREF: .data:00402090o
aBcy		db 'Bcy',0              ; DATA XREF: .data:00402094o
aAfm		db 'Afm',0              ; DATA XREF: .data:00402098o
aChaos		db 'Chaos',0
aDiscord	db 'Discord',0          ; DATA XREF: .data:004020A0o
aConfusion	db 'Confusion',0        ; DATA XREF: .data:004020A4o
aBureaucracy	db 'Bureaucracy',0      ; DATA XREF: .data:004020A8o
aTheAftermath	db 'The Aftermath',0    ; DATA XREF: .data:004020ACo
aSm		db 'SM',0
aBt		db 'BT',0               ; DATA XREF: .data:004020B4o
aPd		db 'PD',0               ; DATA XREF: .data:004020B8o
aPp		db 'PP',0               ; DATA XREF: .data:004020BCo
aSo		db 'SO',0               ; DATA XREF: .data:004020C0o
aSweetmorn	db 'Sweetmorn',0
aBoomtime	db 'Boomtime',0         ; DATA XREF: .data:004020C8o
aPungenday	db 'Pungenday',0        ; DATA XREF: .data:004020CCo
aPricklePrickle	db 'Prickle-Prickle',0  ; DATA XREF: .data:004020D0o
aSettingOrange	db 'Setting Orange',0   ; DATA XREF: .data:004020D4o
aSt_TibSDay	db 'St. Tib',27h,'s Day',0 ; DATA XREF: sub_401440+8Eo
aSt		db 'st',0               ; DATA XREF: sub_401440+124o
aNd		db 'nd',0               ; DATA XREF: sub_401440+133o
aRd		db 'rd',0               ; DATA XREF: sub_401440+13Do
aTh		db 'th',0               ; DATA XREF: sub_401440+144o
aDS		db '%d%s',0             ; DATA XREF: sub_401440+157o
aD		db '%d',0               ; DATA XREF: sub_401440+175o
off_403224	dd offset loc_401504, offset loc_40150E, offset	loc_40150E
					; DATA XREF: sub_401440+81r
		dd offset loc_40150E, offset loc_40150E, offset	loc_40150E ; jump table	for switch statement
		dd offset loc_40150E, offset loc_40150E, offset	loc_40150E
		dd offset loc_40150E, offset loc_40150E, offset	loc_40150E
		dd offset loc_40150E, offset loc_40150E, offset	loc_40150E
		dd offset loc_40150E, offset loc_40150E, offset	loc_40150E
		dd offset loc_40150E, offset loc_40150E, offset	loc_40150E
		dd offset loc_40150E, offset loc_40150E, offset	loc_40150E
		dd offset loc_40150E, offset loc_40150E, offset	loc_40150E
		dd offset loc_40150E, offset loc_40150E, offset	loc_40150E
		dd offset loc_40150E, offset loc_40150E, offset	loc_401504
		dd offset loc_40150E, offset loc_40150E, offset	loc_401504
		dd offset loc_401504, offset loc_40150E, offset	loc_40150E
		dd offset loc_40150E, offset loc_40150E, offset	loc_40150E
		dd offset loc_40150E, offset loc_40150E, offset	loc_40150E
		dd offset loc_40150E, offset loc_40150E, offset	loc_40150E
		dd offset loc_40150E, offset loc_40150E, offset	loc_40150E
		dd offset loc_40150E, offset loc_40150E, offset	loc_40150E
		dd offset loc_40150E, offset loc_40150E, offset	loc_40150E
		dd offset loc_40150E, offset loc_40150B, offset	loc_40150E
		dd offset loc_40151B
off_403318	dd offset loc_4016B5, offset loc_4014A3, offset	loc_4014A3
					; DATA XREF: sub_401440+BDr
		dd offset loc_4014A3, offset loc_4014A3, offset	loc_4014A3 ; jump table	for switch statement
		dd offset loc_4014A3, offset loc_4014A3, offset	loc_4014A3
		dd offset loc_4014A3, offset loc_4014A3, offset	loc_4014A3
		dd offset loc_4014A3, offset loc_4014A3, offset	loc_4014A3
		dd offset loc_4014A3, offset loc_4014A3, offset	loc_4014A3
		dd offset loc_4014A3, offset loc_401691, offset	loc_401682
		dd offset loc_4014A3, offset loc_4014A3, offset	loc_4014A3
		dd offset loc_4014A3, offset loc_4014A3, offset	loc_401653
		dd offset loc_4014A3, offset loc_4014A3, offset	loc_4014A3
		dd offset loc_4014A3, offset loc_4014A3, offset	loc_401633
		dd offset loc_4014A3, offset loc_4014A3, offset	loc_4014A3
		dd offset loc_4014A3, offset loc_4014A3, offset	loc_4014A3
		dd offset loc_4014A3, offset loc_4014A3, offset	loc_4014A3
		dd offset loc_40161C, offset loc_401617, offset	loc_4014A3
		dd offset loc_4014A3, offset loc_4014A3, offset	loc_4014A3
		dd offset loc_4014A3, offset loc_4014A3, offset	loc_4014A3
		dd offset loc_4015F6, offset loc_4015EA, offset	loc_4014A3
		dd offset loc_4015AA, offset loc_40153D, offset	loc_4014A3
		dd offset loc_4014A3, offset loc_4014A3, offset	loc_4014A3
		dd offset loc_4014A3, offset loc_4014A3, offset	loc_4014A3
		dd offset loc_4014A3, offset loc_401534, offset	loc_4014A3
		dd offset loc_4014A3, offset loc_4014A3, offset	loc_4014A3
		dd offset loc_4014A3, offset loc_40152B
aUsrShareLocale	db '/usr/share/locale',0 ; DATA XREF: sub_4016E0+52o
aCygutils	db 'cygutils',0         ; DATA XREF: sub_4016E0+69o
					; sub_4016E0+75o ...
		align 4
aUsageSFormatDa	db 'usage: %s [+format] [day month year]',0Ah,0 ; DATA XREF: sub_4016E0+CBo
aSFromSVersionS	db '%s from %s version %s',0Ah,0 ; DATA XREF: sub_4016E0+10Do
a1_2_10		db '1.2.10',0           ; DATA XREF: sub_4016E0+11Co
aInvalidDateOut	db 'Invalid date -- out of range',0 ; DATA XREF: sub_4016E0+24Co
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_4034C0	db    0	;		; DATA XREF: sub_401C90+8o
					; sub_401C90+18o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_rdata		ends

; Section 4. (virtual address 00004000)
; Virtual size			: 00000040 (	 64.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 404000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_404000	dd ?			; DATA XREF: start+9r sub_401B00+C9o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_404010	db    ?	;		; DATA XREF: sub_401B00+84o
		db    ?	;
		db    ?	;
		db    ?	;
unk_404014	db    ?	;		; DATA XREF: sub_401B00+4Co
					; sub_401B00+13Do
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
_bss		ends

;
; Imports from cygwin1
;
; Section 5. (virtual address 00005000)
; Virtual size			: 0000036C (	876.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001A00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp___getreent:dword ; DATA XREF: __getreentr
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn _impure_ptr:dword	; DATA XREF: sub_401B00+53r
					; sub_401B00+144r
; int __cdecl _imp_atoi(const char *)
		extrn __imp_atoi:dword	; DATA XREF: atoir
; void *__cdecl	calloc(size_t,size_t)
		extrn calloc:dword	; DATA XREF: .text:00401CC0r
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_4019A0+2Br
					; .text:00401C50r
; void __cdecl _imp_exit(int)
		extrn __imp_exit:dword	; DATA XREF: exitr
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
; void __cdecl free(void *)
		extrn free:dword	; DATA XREF: .text:00401CE0r
; struct tm *__cdecl _imp_localtime(const time_t *)
		extrn __imp_localtime:dword ; DATA XREF: localtimer
; void *__cdecl	malloc(size_t)
		extrn malloc:dword	; DATA XREF: .text:00401CF0r
		extrn __imp_printf:dword ; DATA	XREF: printfr
		extrn __imp_puts:dword	; DATA XREF: putsr
		extrn __imp_random:dword ; DATA	XREF: randomr
; void *__cdecl	realloc(void *,size_t)
		extrn realloc:dword	; DATA XREF: .text:00401CD0r
		extrn __imp_setlocale:dword ; DATA XREF: setlocaler
		extrn __imp_sprintf:dword ; DATA XREF: sprintfr
		extrn __imp_srandom:dword ; DATA XREF: srandomr
; char *__cdecl	_imp_strcpy(char *,const char *)
		extrn __imp_strcpy:dword ; DATA	XREF: strcpyr
; size_t __cdecl _imp_strlen(const char	*)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr
; char *__cdecl	_imp_strrchr(const char	*,int)
		extrn __imp_strrchr:dword ; DATA XREF: strrchrr
; time_t __cdecl _imp_time(time_t *)
		extrn __imp_time:dword	; DATA XREF: timer


;
; Imports from cygintl-3
;
		extrn __imp_libintl_bindtextdomain:dword
					; DATA XREF: libintl_bindtextdomainr
		extrn __imp_libintl_gettext:dword ; DATA XREF: libintl_gettextr
		extrn __imp_libintl_textdomain:dword ; DATA XREF: libintl_textdomainr


;
; Imports from KERNEL32
;
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr



		end start
