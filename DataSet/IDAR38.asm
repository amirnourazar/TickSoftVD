

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\pamtilt.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00001108 (   4360.)
; Section size in file		: 00001200 (   4608.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?


unicode		macro page,string,zero
		irpc c,<string>
		db '&c', page
		endm
		ifnb <zero>
		dw zero
		endif
endm

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		and	esp, 0FFFFFFF0h
		mov	eax, ds:dword_404000
		test	eax, eax
		jz	short loc_401013
		int	3		; Trap to Debugger

loc_401013:				; CODE XREF: start+10j
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_401420
		call	sub_401D60
		leave
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401050	proc near		; CODE XREF: sub_401420+671p
					; sub_401420+7C1p ...

var_100		= qword	ptr -100h
var_F8		= qword	ptr -0F8h
var_F0		= qword	ptr -0F0h
var_E4		= qword	ptr -0E4h
var_DC		= qword	ptr -0DCh
var_D4		= qword	ptr -0D4h
var_CC		= qword	ptr -0CCh
var_AC		= dword	ptr -0ACh
var_A8		= dword	ptr -0A8h
var_98		= dword	ptr -98h
var_88		= dword	ptr -88h
var_78		= dword	ptr -78h
var_74		= dword	ptr -74h
var_70		= dword	ptr -70h
var_6C		= dword	ptr -6Ch
var_68		= qword	ptr -68h
var_60		= qword	ptr -60h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= word ptr -24h
var_22		= word ptr -22h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h
arg_C		= dword	ptr  14h
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch
arg_18		= dword	ptr  20h
arg_1C		= dword	ptr  24h
arg_20		= dword	ptr  28h

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 0ECh
		fnstcw	[ebp+var_22]
		mov	ebx, eax
		fld	[ebp+arg_C]
		mov	ecx, [ebp+arg_4]
		fld	[ebp+arg_10]
		fxch	st(1)
		movzx	eax, [ebp+var_22]
		fstp	[ebp+var_38]
		fld	[ebp+arg_14]
		fxch	st(1)
		fst	[ebp+var_3C]
		fxch	st(1)
		or	ax, 0C00h
		mov	[ebp+var_24], ax
		fstp	[ebp+var_40]
		fsub	[ebp+var_38]
		fld	ds:flt_40305C
		fxch	st(1)
		mov	[ebp+var_2C], edx
		mov	edx, [ebp+arg_8]
		fdiv	[ebp+var_40]
		mov	[ebp+var_30], ecx
		mov	[ebp+var_34], edx
		faddp	st(1), st
		fldcw	[ebp+var_24]
		fistp	[ebp+var_44]
		fldcw	[ebp+var_22]
		mov	esi, [ebp+var_44]
		test	esi, esi
		jz	loc_401303
		cmp	[ebp+var_44], 3FFFFFFFh
		jbe	short loc_4010C6

loc_4010C1:				; CODE XREF: sub_401050+8Cj
		call	abort

loc_4010C6:				; CODE XREF: sub_401050+6Fj
		mov	edi, [ebp+var_44]
		shl	edi, 2
		mov	dword ptr [esp+0F8h+var_F8], edi

loc_4010CF:				; CODE XREF: sub_401050+2BAj
		call	malloc
		mov	[ebp+var_78], eax
		mov	esi, [ebp+var_78]
		test	esi, esi
		jz	short loc_4010C1
		mov	[ebp+var_54], 0
		mov	eax, [ebp+var_44]
		fldz
		fld	[ebp+var_38]
		fld	st(1)
		cmp	[ebp+var_54], eax
		fstp	[ebp+var_50]
		fstp	[ebp+var_4C]
		jge	loc_4012A7
		mov	eax, [ebx+18h]
		xor	edi, edi
		xor	edx, edx
		mov	esi, [ebx+14h]
		fld1
		mov	ecx, [ebp+arg_0]
		mov	[ebp+var_74], eax
		mov	ebx, [ebp+var_34]
		mov	[ebp+var_70], esi
		push	edi
		push	ecx
		fild	[esp+100h+var_100]
		add	esp, 8
		fstp	[ebp+var_60]
		push	edx
		push	ebx
		fild	[esp+100h+var_100]
		add	esp, 8
		fdivp	st(1), st
		fstp	[ebp+var_68]

loc_40112E:				; CODE XREF: sub_401050+251j
		fild	[ebp+var_54]
		fmul	[ebp+var_40]
		fld	ds:dbl_403068
		fxch	st(1)
		fadd	[ebp+var_38]
		fld	st
		fmul	ds:flt_403060
		fmulp	st(2), st
		fxch	st(1)
		fstp	[ebp+var_1C]
		fld	[ebp+var_1C]
		fstp	[esp+0F8h+var_F8]
		fstp	[ebp+var_98]
		fstp	[ebp+var_A8]
		call	tan
		fld	[ebp+var_60]
		fnstcw	[ebp+var_22]
		fldz
		fxch	st(1)
		movzx	ebx, [ebp+var_22]
		fmul	st, st(2)
		fld	[ebp+var_98]
		fxch	st(1)
		or	bx, 0C00h
		mov	[ebp+var_24], bx
		fstp	[ebp+var_1C]
		fild	[ebp+var_74]
		fld	[ebp+var_1C]
		fld	[ebp+var_A8]
		fxch	st(2)
		fmulp	st(5), st
		fxch	st(4)
		fldcw	[ebp+var_24]
		fistp	[ebp+var_28]
		fldcw	[ebp+var_22]
		mov	eax, [ebp+var_28]
		test	eax, eax
		jle	loc_4012F0
		mov	[ebp+var_6C], 0
		mov	edx, [ebp+var_70]
		sub	edx, eax
		lea	edi, [edx-2]

loc_4011BE:				; CODE XREF: sub_401050+2AEj
		mov	esi, [ebp+var_6C]
		cmp	edi, esi
		jbe	short loc_401244
		mov	eax, 3F000000h
		mov	[ebp+var_AC], eax
		fld	[ebp+var_AC]
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_4011E0:				; CODE XREF: sub_401050+1F0j
		xor	ebx, ebx
		xor	ecx, ecx
		fld	st
		cmp	ebx, [ebp+var_34]
		jnb	short loc_401229
		xor	edx, edx
		push	edx
		push	esi
		fild	[esp+100h+var_100]
		add	esp, 8
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_401200:				; CODE XREF: sub_401050+1D5j
		fld	st
		mov	edx, [ebp+var_2C]
		inc	ecx
		fadd	st, st(2)
		fxch	st(2)
		fadd	st, st(7)
		fxch	st(2)
		fldcw	[ebp+var_24]
		fistp	[ebp+var_28]
		fldcw	[ebp+var_22]
		mov	eax, [ebp+var_28]
		mov	eax, [edx+eax*4]
		mov	edx, [eax+ecx*4]
		add	ebx, edx
		cmp	ecx, [ebp+var_34]
		jb	short loc_401200
		fstp	st

loc_401229:				; CODE XREF: sub_401050+199j
		fstp	st
		push	ebx
		mov	ebx, [ebp+var_30]
		fild	dword ptr [esp+0FCh+var_100+4]
		add	esp, 4
		add	esi, ebx
		fmul	[ebp+var_68]
		cmp	edi, esi
		fmul	st, st
		faddp	st(4), st
		ja	short loc_4011E0
		fstp	st

loc_401244:				; CODE XREF: sub_401050+173j
		fstp	st(3)
		mov	edx, [ebp+var_6C]
		fld1
		sub	edi, edx
		push	edi
		mov	esi, [ebp+var_54]
		mov	edi, [ebp+var_78]
		fild	dword ptr [esp+0FCh+var_100+4]
		add	esp, 4
		fdivp	st(1), st
		fmulp	st(2), st
		fxch	st(1)
		fstp	[ebp+var_20]
		mov	ecx, [ebp+var_20]
		mov	[edi+esi*4], ecx
		fld	[ebp+var_20]
		fcom	[ebp+var_50]
		fnstsw	ax
		sahf
		ja	short loc_40128E
		fcom	[ebp+var_50]
		fnstsw	ax
		sahf
		jnz	short loc_4012EC
		fld	[ebp+var_4C]
		fld	st(2)
		fabs
		fxch	st(1)
		fabs
		fcompp	st(1), st
		fnstsw	ax
		sahf
		jbe	short loc_4012EC

loc_40128E:				; CODE XREF: sub_401050+222j
		fst	[ebp+var_50]
		fxch	st(1)
		fstp	[ebp+var_4C]

loc_401296:				; CODE XREF: sub_401050+29Ej
		inc	[ebp+var_54]
		faddp	st(1), st
		mov	ebx, [ebp+var_44]
		cmp	[ebp+var_54], ebx
		jl	loc_40112E

loc_4012A7:				; CODE XREF: sub_401050+A8j
		fsub	[ebp+var_50]
		mov	esi, [ebp+var_44]
		mov	edi, [ebp+arg_18]
		dec	esi
		push	esi
		fild	dword ptr [esp+0FCh+var_100+4]
		add	esp, 4
		test	edi, edi
		fdivp	st(1), st
		fdivr	[ebp+var_50]
		fstp	[ebp+var_48]
		jnz	short loc_40130F

loc_4012C4:				; CODE XREF: sub_401050+30Bj
		mov	ebx, [ebp+var_78]
		mov	dword ptr [esp+0F8h+var_F8], ebx
		call	free
		fld	[ebp+var_48]
		mov	esi, [ebp+arg_1C]
		mov	ecx, [ebp+arg_20]
		fld	[ebp+var_4C]
		fxch	st(1)
		fstp	dword ptr [ecx]
		fstp	dword ptr [esi]
		add	esp, 0ECh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4012EC:				; CODE XREF: sub_401050+22Aj
					; sub_401050+23Cj
		fstp	st(1)
		jmp	short loc_401296
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4012F0:				; CODE XREF: sub_401050+159j
		mov	[ebp+var_6C], 1
		mov	edi, [ebp+var_70]
		sub	[ebp+var_6C], eax
		dec	edi
		jmp	loc_4011BE
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401303:				; CODE XREF: sub_401050+62j
		mov	dword ptr [esp+0F8h+var_F8], 1
		jmp	loc_4010CF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40130F:				; CODE XREF: sub_401050+272j
		call	__getreent
		fld	[ebp+var_48]
		mov	edx, offset a2dAnglesFrom6_ ; "\n%2d angles from %6.2f to %5.2f	by %4.2"...
		xor	esi, esi
		fstp	[esp+0F8h+var_CC]
		fld	[ebp+var_4C]
		fld	[ebp+var_40]
		fxch	st(1)
		fstp	[esp+0F8h+var_D4]
		fstp	[esp+0F8h+var_DC]
		fld	[ebp+var_3C]
		fld	[ebp+var_38]
		fxch	st(1)
		fstp	[esp+0F8h+var_E4]
		fstp	[esp+0F8h+var_F0+4]
		mov	ebx, [ebp+var_44]
		mov	dword ptr [esp+0F8h+var_F8+4], edx
		mov	dword ptr [esp+0F8h+var_F0], ebx
		mov	ecx, [eax+0Ch]
		mov	dword ptr [esp+0F8h+var_F8], ecx
		call	fprintf
		cmp	esi, [ebp+var_44]
		jge	loc_4012C4

loc_401361:				; CODE XREF: sub_401050+397j
		push	esi
		mov	edi, [ebp+var_78]
		fild	dword ptr [esp+0FCh+var_100+4]
		add	esp, 4
		fld	dword ptr [edi+esi*4]
		mov	edi, offset a6_2f8_2f0D	; "%6.2f: %8.2f	%0*d\n"
		fmul	ds:flt_403074
		fxch	st(1)
		fnstcw	[ebp+var_22]
		fmul	[ebp+var_40]
		fxch	st(1)
		movzx	eax, [ebp+var_22]
		fdiv	[ebp+var_50]
		fxch	st(1)
		or	ax, 0C00h
		mov	[ebp+var_24], ax
		fadd	[ebp+var_38]
		fxch	st(1)
		fadd	ds:flt_403070
		fldcw	[ebp+var_24]
		fistp	[ebp+var_28]
		fldcw	[ebp+var_22]
		fstp	[ebp+var_88]
		mov	ebx, [ebp+var_28]
		call	__getreent
		xor	edx, edx
		mov	dword ptr [esp+0F8h+var_DC], edx
		mov	dword ptr [esp+0F8h+var_E4+4], ebx
		mov	ecx, [ebp+var_78]
		fld	dword ptr [ecx+esi*4]
		inc	esi
		fstp	qword ptr [esp+10h]
		fld	[ebp+var_88]
		mov	dword ptr [esp+0F8h+var_F8+4], edi
		fstp	[esp+0F8h+var_F0]
		mov	eax, [eax+0Ch]
		mov	dword ptr [esp+0F8h+var_F8], eax
		call	fprintf
		cmp	esi, [ebp+var_44]
		jl	loc_401361
		mov	ebx, [ebp+var_78]
		mov	dword ptr [esp+0F8h+var_F8], ebx
		call	free
		fld	[ebp+var_48]
		mov	esi, [ebp+arg_1C]
		mov	ecx, [ebp+arg_20]
		fld	[ebp+var_4C]
		fxch	st(1)
		fstp	dword ptr [ecx]
		fstp	dword ptr [esi]
		add	esp, 0ECh
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
sub_401050	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401420	proc near		; DATA XREF: start+33o

var_230		= qword	ptr -230h
var_228		= dword	ptr -228h
var_224		= qword	ptr -224h
var_21C		= dword	ptr -21Ch
var_218		= dword	ptr -218h
var_214		= dword	ptr -214h
var_210		= dword	ptr -210h
var_20C		= dword	ptr -20Ch
var_208		= dword	ptr -208h
var_1F0		= dword	ptr -1F0h
var_1EC		= dword	ptr -1ECh
var_1E8		= dword	ptr -1E8h
var_1D8		= dword	ptr -1D8h
var_1D4		= dword	ptr -1D4h
var_1D0		= dword	ptr -1D0h
var_1CC		= dword	ptr -1CCh
var_1C8		= dword	ptr -1C8h
var_1C4		= dword	ptr -1C4h
var_1C0		= dword	ptr -1C0h
var_1BC		= dword	ptr -1BCh
var_1B8		= dword	ptr -1B8h
var_1B4		= dword	ptr -1B4h
var_1B0		= dword	ptr -1B0h
var_1AC		= dword	ptr -1ACh
var_1A8		= qword	ptr -1A8h
var_1A0		= word ptr -1A0h
var_19E		= word ptr -19Eh
var_19C		= dword	ptr -19Ch
var_198		= dword	ptr -198h
var_194		= dword	ptr -194h
var_190		= dword	ptr -190h
var_18C		= dword	ptr -18Ch
var_188		= dword	ptr -188h
var_184		= dword	ptr -184h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_178		= dword	ptr -178h
var_164		= dword	ptr -164h
var_160		= dword	ptr -160h
var_158		= dword	ptr -158h
var_48		= dword	ptr -48h
var_44		= dword	ptr -44h
var_40		= dword	ptr -40h
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	eax, 10h
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 21Ch
		mov	esi, [ebp+arg_4]
		and	esp, 0FFFFFFF0h
		call	sub_401D30
		call	__main
		mov	dword ptr [esp+228h+var_224], esi
		lea	eax, [ebp+arg_0]
		mov	ebx, 41200000h
		mov	[esp+228h+var_228], eax
		call	pgm_init
		mov	[ebp+var_44], ebx
		lea	ecx, [ebp+var_2C]
		mov	eax, 1
		mov	ds:dword_404020, ecx
		mov	edx, offset aFast ; "fast"
		xor	ecx, ecx
		mov	ds:dword_404018, eax
		lea	eax, [ebp+var_28]
		mov	edi, [ebp+arg_0]
		mov	ds:dword_404014, edx
		xor	edx, edx
		mov	ebx, 3F800000h
		mov	ds:dword_40401C, ecx
		mov	ecx, offset aVerbose ; "verbose"
		mov	ds:dword_404038, eax
		xor	eax, eax
		mov	ds:dword_404024, edx
		mov	edx, 1
		mov	ds:dword_40402C, ecx
		xor	ecx, ecx
		mov	ds:dword_404034, eax
		mov	eax, offset aAngle ; "angle"
		mov	ds:dword_404030, edx
		xor	edx, edx
		mov	ds:dword_40403C, ecx
		mov	ecx, 7
		mov	ds:dword_404044, eax
		xor	eax, eax
		mov	ds:dword_404050, edx
		lea	edx, [ebp+var_44]
		mov	ds:dword_404048, ecx
		xor	ecx, ecx
		mov	ds:dword_404054, eax
		mov	eax, 7
		mov	ds:dword_40404C, edx
		mov	edx, offset aQuality ; "quality"
		mov	ds:dword_404068, ecx
		lea	ecx, [ebp+var_3C]
		mov	ds:dword_404060, eax
		xor	eax, eax
		mov	ds:dword_40405C, edx
		xor	edx, edx
		mov	ds:dword_404064, ecx
		mov	ecx, offset aAstep ; "astep"
		mov	ds:dword_404080, eax
		lea	eax, [ebp+var_40]
		mov	[ebp+var_17C], edi
		lea	edi, [ebp+var_48]
		mov	ds:dword_40406C, edx
		mov	edx, 7
		mov	[ebp+var_38], 0Bh
		mov	[ebp+var_34], 5
		mov	[ebp+var_30], 2
		mov	[ebp+var_40], ebx
		mov	[ebp+var_3C], ebx
		mov	ds:byte_404010,	0
		mov	ds:byte_404028,	0
		mov	ds:byte_404040,	0
		mov	ds:byte_404058,	0
		mov	ds:byte_404070,	0
		mov	ds:dword_404074, ecx
		xor	ecx, ecx
		mov	ds:dword_40407C, eax
		mov	eax, offset aHstep ; "hstep"
		mov	ds:dword_404084, ecx
		mov	ecx, 4
		mov	ds:dword_40408C, eax
		xor	eax, eax
		mov	ds:dword_404078, edx
		xor	edx, edx
		mov	ds:dword_404090, ecx
		xor	ecx, ecx
		mov	ds:dword_40409C, eax
		mov	eax, 4
		mov	ds:dword_404098, edx
		lea	edx, [ebp+var_38]
		mov	ds:dword_4040B0, ecx
		lea	ecx, [ebp+var_34]
		mov	ds:dword_4040A8, eax
		xor	eax, eax
		mov	ds:dword_404094, edx
		mov	edx, offset aVstep ; "vstep"
		mov	ds:dword_4040AC, ecx
		mov	ecx, offset aDstep ; "dstep"
		mov	ds:dword_4040C8, eax
		lea	eax, [ebp+var_30]
		mov	ds:dword_4040A4, edx
		xor	edx, edx
		mov	ds:dword_4040BC, ecx
		xor	ecx, ecx
		mov	ds:dword_4040C4, eax
		mov	eax, offset byte_404010
		mov	ds:dword_4044C4, eax
		mov	ds:dword_4040B4, edx
		mov	edx, 4
		mov	ds:dword_4040CC, ecx
		xor	ecx, ecx
		mov	byte ptr ds:dword_4044C0, 0
		mov	byte ptr ds:dword_4044C0+1, 0
		mov	eax, ds:dword_4044C0
		mov	ds:dword_4040C0, edx
		xor	edx, edx
		mov	[esp+228h+var_214], ecx
		mov	ecx, ds:dword_4044C4
		mov	ds:dword_4040D8, edx
		mov	edx, 8
		mov	[esp+228h+var_218], edx
		lea	edx, [ebp+var_17C]
		mov	dword ptr [esp+228h+var_224+4],	eax
		mov	[esp+228h+var_21C], ecx
		mov	ds:byte_404088,	0
		mov	ds:byte_4040A0,	0
		mov	ds:byte_4040B8,	0
		mov	dword ptr [esp+228h+var_224], esi
		mov	[esp+228h+var_228], edx
		call	optParseOptions3
		mov	eax, [ebp+var_38]
		test	eax, eax
		jz	loc_401AF7

loc_401686:				; CODE XREF: sub_401420+6E3j
		mov	edx, [ebp+var_34]
		test	edx, edx
		jz	loc_401AE6

loc_401691:				; CODE XREF: sub_401420+6D2j
		mov	ecx, [ebp+var_30]
		test	ecx, ecx
		jz	loc_401AD5

loc_40169C:				; CODE XREF: sub_401420+6C1j
		mov	[ebp+var_1EC], ebx
		fld	[ebp+var_44]
		fld	[ebp+var_1EC]
		fcomp	st(1)
		fnstsw	ax
		sahf
		ja	loc_40173C
		fcomp	ds:flt_403200
		fnstsw	ax
		sahf
		ja	short loc_40173E
		mov	edx, [ebp+var_17C]
		dec	edx
		test	edx, edx
		jle	loc_401759

loc_4016D0:				; CODE XREF: sub_401420+333j
		mov	ebx, [esi+4]
		cmp	edx, 1
		mov	[edi], ebx
		jg	loc_401B08

loc_4016DE:				; CODE XREF: sub_401420+33Fj
					; sub_401420+6F8j
		mov	ecx, [ebp+var_48]
		lea	edi, [ebp+var_178]
		mov	ebx, [ebp+var_38]
		mov	esi, [ebp+var_34]
		mov	[esp+228h+var_228], ecx
		call	pm_openr
		mov	[ebp+var_1AC], eax
		mov	edx, 128h
		mov	dword ptr [esp+228h+var_224+4],	edx
		mov	dword ptr [esp+228h+var_224], edi
		mov	[esp+228h+var_228], eax
		call	pnm_readpaminit
		mov	ecx, [ebp+var_160]
		cmp	ecx, 9
		jle	short loc_401724
		cmp	[ebp+var_164], 9
		jg	short loc_401764

loc_401724:				; CODE XREF: sub_401420+2F9j
					; sub_401420+6B0j ...
		mov	[esp+228h+var_228], offset a00_00 ; "00.00"
		call	puts
		mov	[esp+228h+var_228], 0
		call	exit

loc_40173C:				; CODE XREF: sub_401420+290j
		fstp	st

loc_40173E:				; CODE XREF: sub_401420+29Fj
		mov	[esp+228h+var_228], offset aMaxangleMustBe ; "-maxangle	must be	between	1 and 45 degr"...
		call	pm_error
		mov	edx, [ebp+var_17C]
		dec	edx
		test	edx, edx
		jg	loc_4016D0

loc_401759:				; CODE XREF: sub_401420+2AAj
		mov	dword ptr [edi], offset	asc_4030E0 ; "-"
		jmp	loc_4016DE
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401764:				; CODE XREF: sub_401420+302j
		lea	eax, [ebx+ebx*4]
		mov	edi, ebx
		add	eax, eax
		cmp	ecx, eax
		jnb	loc_401B1D
		mov	eax, 66666667h
		mov	ebx, ecx
		sar	ebx, 1Fh
		imul	ecx
		mov	ecx, [ebp+var_164]
		mov	edi, edx
		sar	edi, 2
		sub	edi, ebx
		lea	ebx, [esi+esi*4]
		add	ebx, ebx
		cmp	ecx, ebx
		jnb	loc_401B30

loc_401799:				; CODE XREF: sub_401420+70Aj
		mov	ebx, 66666667h
		mov	eax, ecx
		mov	esi, ecx
		imul	ebx
		sar	esi, 1Fh
		sar	edx, 2
		sub	edx, esi
		mov	[ebp+var_190], edx

loc_4017B2:				; CODE XREF: sub_401420+716j
		mov	eax, [ebp+var_160]
		xor	edx, edx
		lea	ecx, [ebp+var_178]
		mov	[esp+228h+var_228], ecx
		dec	eax
		div	edi
		lea	esi, [eax+1]
		call	pnm_allocpamrow
		mov	[ebp+var_1B4], eax
		mov	eax, [ebp+var_164]
		test	eax, eax
		jz	loc_401C5E
		xor	edx, edx
		cmp	eax, 3FFFFFFFh
		mov	[ebp+var_1B8], edx
		jbe	loc_401C89

loc_4017F5:				; CODE XREF: sub_401420+864j
		mov	dword ptr [esp+228h+var_224], eax
		mov	[esp+228h+var_228], offset aUnableToAlloca ; "Unable to	allocate array of %u pixel ro"...
		call	pm_error
		mov	[esp+228h+var_228], offset aUnableToAllo_0 ; "Unable to	allocate array of %u rows"
		mov	ecx, [ebp+var_164]
		mov	dword ptr [esp+228h+var_224], ecx
		call	pm_error
		mov	eax, [ebp+var_164]

loc_401821:				; CODE XREF: sub_401420+85Ej
		xor	edx, edx
		cmp	eax, 0
		mov	[ebp+var_1B0], edx
		jbe	loc_4018D3

loc_401832:				; CODE XREF: sub_401420+4ADj
		mov	ebx, [ebp+var_1B4]
		lea	eax, [ebp+var_178]
		mov	[esp+228h+var_228], eax
		mov	dword ptr [esp+228h+var_224], ebx
		call	pnm_readpamrow
		test	esi, esi
		jz	loc_401B54
		xor	eax, eax
		cmp	esi, 3FFFFFFFh
		jbe	loc_401C4A

loc_401860:				; CODE XREF: sub_401420+740j
					; sub_401420+839j
		mov	edx, [ebp+var_1B0]
		test	eax, eax
		mov	ebx, [ebp+var_1B8]
		mov	[ebx+edx*4], eax
		jz	loc_401B3B

loc_401877:				; CODE XREF: sub_401420+72Fj
		xor	edx, edx
		xor	ecx, ecx
		cmp	edx, esi
		jnb	short loc_4018BB
		mov	ebx, [ebp+var_1B0]
		mov	eax, [ebp+var_1B8]
		mov	ebx, [eax+ebx*4]
		mov	[ebp+var_1F0], ebx
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_4018A0:				; CODE XREF: sub_401420+499j
		mov	ebx, [ebp+var_1B4]
		mov	eax, [ebx+ecx*4]
		mov	ebx, [ebp+var_1F0]
		add	ecx, edi
		mov	eax, [eax]
		mov	[ebx+edx*4], eax
		inc	edx
		cmp	edx, esi
		jb	short loc_4018A0

loc_4018BB:				; CODE XREF: sub_401420+45Dj
		inc	[ebp+var_1B0]
		mov	edx, [ebp+var_1B0]
		cmp	[ebp+var_164], edx
		ja	loc_401832

loc_4018D3:				; CODE XREF: sub_401420+40Cj
		mov	ecx, [ebp+var_1B4]
		mov	[esp+228h+var_228], ecx
		call	pm_freerow
		mov	[ebp+var_18C], esi
		mov	edx, [ebp+var_190]
		mov	esi, [ebp+var_1B8]
		mov	[ebp+var_180], edi
		mov	ebx, [ebp+var_1AC]
		mov	[ebp+var_184], edx
		mov	[ebp+var_188], esi
		xor	esi, esi
		mov	[esp+228h+var_228], ebx
		call	pm_close
		push	esi
		mov	edi, [ebp+var_158]
		mov	eax, [ebp+var_188]
		fld	ds:flt_403204
		mov	ecx, [ebp+var_18C]
		push	edi
		mov	edi, [ebp+var_30]
		fild	[esp+230h+var_230]
		add	esp, 8
		cmp	[ebp+var_164], edi
		mov	[ebp+var_1D0], eax
		mov	[ebp+var_1CC], ecx
		fdivp	st(1), st
		jbe	loc_401A01
		mov	ebx, [ebp+var_164]
		mov	eax, [ebp+var_1D0]
		mov	[ebp+var_1D4], ebx
		mov	[ebp+var_1D8], eax
		lea	esi, [esi+0]

loc_401970:				; CODE XREF: sub_401420+5DBj
		xor	ecx, ecx
		cmp	ecx, [ebp+var_1CC]
		jnb	short loc_4019ED
		mov	ebx, [ebp+var_1D0]
		mov	eax, [ebp+var_1D8]
		mov	esi, [ebx+edi*4]
		mov	ebx, [eax]
		fnstcw	[ebp+var_19E]
		movzx	edx, [ebp+var_19E]
		or	dx, 0C00h
		mov	[ebp+var_1A0], dx
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_4019B0:				; CODE XREF: sub_401420+5CBj
		mov	edx, [esi+ecx*4]
		mov	eax, [ebx+ecx*4]
		sub	eax, edx
		cdq
		xor	eax, edx
		sub	eax, edx
		xor	edx, edx
		push	edx
		push	eax
		fild	[esp+230h+var_230]
		add	esp, 8
		fmul	st, st(1)
		fldcw	[ebp+var_1A0]
		fistp	[ebp+var_1A8]
		fldcw	[ebp+var_19E]
		mov	edx, dword ptr [ebp+var_1A8]
		mov	[ebx+ecx*4], edx
		inc	ecx
		cmp	ecx, [ebp+var_1CC]
		jb	short loc_4019B0

loc_4019ED:				; CODE XREF: sub_401420+558j
		add	[ebp+var_1D8], 4
		inc	edi
		cmp	[ebp+var_1D4], edi
		ja	loc_401970

loc_401A01:				; CODE XREF: sub_401420+52Cj
		fstp	st
		fld	[ebp+var_44]
		mov	ebx, [ebp+var_2C]
		lea	ecx, [ebp+var_198]
		fld	[ebp+var_40]
		fxch	st(1)
		mov	[esp+228h+var_208], ecx
		mov	edi, [ebp+var_180]
		lea	eax, [ebp+var_19C]
		fst	[ebp+var_1EC]
		mov	esi, [ebp+var_184]
		mov	edx, [ebp+var_1EC]
		fld	[ebp+var_3C]
		fxch	st(2)
		mov	[ebp+var_1C4], ebx
		mov	ecx, [ebp+var_1CC]
		mov	[esp+228h+var_20C], eax
		xor	edx, 80000000h
		mov	ebx, [ebp+var_28]
		mov	[esp+228h+var_21C], edx
		mov	edx, [ebp+var_1D0]
		lea	eax, [ebp+var_178]
		fst	[ebp+var_1BC]
		fxch	st(2)
		fstp	[ebp+var_1C0]
		fxch	st(1)
		fstp	[esp+228h+var_214]
		fst	[esp+228h+var_218]
		fstp	[ebp+var_1E8]
		mov	[esp+228h+var_210], ebx
		mov	dword ptr [esp+228h+var_224+4],	ecx
		mov	dword ptr [esp+228h+var_224], esi
		mov	[esp+228h+var_228], edi
		call	sub_401050
		fld	[ebp+var_1BC]
		fmul	ds:flt_403208
		fld	[ebp+var_1E8]
		fld	[ebp+var_19C]
		fld	st(2)
		fsub	st, st(2)
		fcomp	st(1)
		fnstsw	ax
		sahf
		ja	loc_401D09
		fxch	st(1)
		fsubrp	st(2), st
		fcom	st(1)
		fnstsw	ax
		fstp	st(1)
		sahf
		jbe	loc_401B65

loc_401ACE:				; CODE XREF: sub_401420+754j
		fstp	st
		jmp	loc_401724
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401AD5:				; CODE XREF: sub_401420+276j
		mov	[esp+228h+var_228], offset aDstepMustBeAtL ; "-dstep must be at	least 1	row."
		call	pm_error
		jmp	loc_40169C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401AE6:				; CODE XREF: sub_401420+26Bj
		mov	[esp+228h+var_228], offset aVstepMustBeAtL ; "-vstep must be at	least 1	row."
		call	pm_error
		jmp	loc_401691
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401AF7:				; CODE XREF: sub_401420+260j
		mov	[esp+228h+var_228], offset aHstepMustBeAtL ; "-hstep must be at	least 1	column."
		call	pm_error
		jmp	loc_401686
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B08:				; CODE XREF: sub_401420+2B8j
		mov	dword ptr [esp+228h+var_224], edx
		mov	[esp+228h+var_228], offset aThereIsAtMostO ; "There is at most one argument.  You spe"...
		call	pm_error
		jmp	loc_4016DE
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B1D:				; CODE XREF: sub_401420+34Dj
		mov	ecx, [ebp+var_164]
		lea	ebx, [esi+esi*4]
		add	ebx, ebx
		cmp	ecx, ebx
		jb	loc_401799

loc_401B30:				; CODE XREF: sub_401420+373j
		mov	[ebp+var_190], esi
		jmp	loc_4017B2
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B3B:				; CODE XREF: sub_401420+451j
		mov	dword ptr [esp+228h+var_224+4],	edx
		mov	dword ptr [esp+228h+var_224], esi
		mov	[esp+228h+var_228], offset aUnableToAllo_1 ; "Unable to	allocate %u-sample array for "...
		call	pm_error
		jmp	loc_401877
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B54:				; CODE XREF: sub_401420+42Cj
		mov	[esp+228h+var_228], 1
		call	malloc
		jmp	loc_401860
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B65:				; CODE XREF: sub_401420+6A8j
		fld	[ebp+var_198]
		fcomp	[ebp+var_1C0]
		fnstsw	ax
		sahf
		jb	loc_401ACE
		fld	ds:flt_40320C
		mov	[esp+228h+var_210], ebx
		lea	edx, [ebp+var_198]
		mov	ecx, [ebp+var_1CC]
		fmul	[ebp+var_1BC]
		mov	[esp+228h+var_208], edx
		mov	edx, [ebp+var_1D0]
		lea	eax, [ebp+var_19C]
		mov	[esp+228h+var_20C], eax
		lea	eax, [ebp+var_178]
		mov	dword ptr [esp+228h+var_224+4],	ecx
		mov	dword ptr [esp+228h+var_224], esi
		fld	st
		fmul	ds:flt_403210
		fxch	st(1)
		mov	[esp+228h+var_228], edi
		fst	[ebp+var_1C8]
		fstp	[esp+228h+var_214]
		fld	st
		fadd	st, st(2)
		fxch	st(2)
		fsubrp	st(1), st
		fxch	st(1)
		fstp	[esp+228h+var_218]
		fstp	[esp+228h+var_21C]
		call	sub_401050
		mov	edx, [ebp+var_1C4]
		test	edx, edx
		jz	loc_401C91

loc_401BF4:				; CODE XREF: sub_401420+8E4j
		mov	[esp+228h+var_228], offset a_2f	; "%.2f\n"
		mov	edi, [ebp+var_19C]
		xor	ebx, ebx
		mov	[ebp+var_194], edi
		fld	[ebp+var_194]
		fstp	[esp+228h+var_224]
		call	printf
		mov	esi, [ebp+var_164]
		mov	edi, [ebp+var_188]
		cmp	ebx, esi
		jnb	short loc_401C38

loc_401C28:				; CODE XREF: sub_401420+816j
		mov	ecx, [edi+ebx*4]
		inc	ebx
		mov	[esp+228h+var_228], ecx
		call	free
		cmp	ebx, esi
		jb	short loc_401C28

loc_401C38:				; CODE XREF: sub_401420+806j
		mov	[esp+228h+var_228], edi
		call	free
		lea	esp, [ebp+var_C]
		xor	eax, eax
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C4A:				; CODE XREF: sub_401420+43Aj
		lea	ecx, ds:0[esi*4]
		mov	[esp+228h+var_228], ecx
		call	malloc
		jmp	loc_401860
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C5E:				; CODE XREF: sub_401420+3BCj
		mov	[esp+228h+var_228], 1

loc_401C65:				; CODE XREF: sub_401420+86Fj
		call	malloc
		mov	[ebp+var_1B8], eax
		mov	ebx, [ebp+var_1B8]
		mov	eax, [ebp+var_164]
		test	ebx, ebx
		jnz	loc_401821
		jmp	loc_4017F5
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C89:				; CODE XREF: sub_401420+3CFj
		shl	eax, 2
		mov	[esp+228h+var_228], eax
		jmp	short loc_401C65
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401C91:				; CODE XREF: sub_401420+7CEj
		fld	[ebp+var_19C]
		mov	edx, 3DCCCCCDh
		mov	[esp+228h+var_210], ebx
		mov	ebx, [ebp+var_1CC]
		mov	[ebp+var_1EC], edx
		mov	edx, [ebp+var_1D0]
		lea	eax, [ebp+var_198]
		fld	[ebp+var_1EC]
		mov	[esp+228h+var_208], eax
		lea	ecx, [ebp+var_19C]
		mov	dword ptr [esp+228h+var_224+4],	ebx
		lea	eax, [ebp+var_178]
		fmul	[ebp+var_1C8]
		mov	[esp+228h+var_20C], ecx
		mov	dword ptr [esp+228h+var_224], esi
		mov	[esp+228h+var_228], edi
		fst	[esp+228h+var_214]
		fmul	ds:flt_403210
		fld	st
		fadd	st, st(2)
		fxch	st(2)
		fsubrp	st(1), st
		fxch	st(1)
		fstp	[esp+228h+var_218]
		fstp	[esp+228h+var_21C]
		call	sub_401050
		jmp	loc_401BF4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D09:				; CODE XREF: sub_401420+697j
		fstp	st
		fstp	st
		fstp	st
		jmp	loc_401724
sub_401420	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION tan. PRESS KEYPAD	"+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401D30	proc near		; CODE XREF: sub_401420+17p
		push	ecx
		mov	ecx, esp
		add	ecx, 8

loc_401D36:				; CODE XREF: sub_401D30+1Bj
		cmp	eax, 1000h
		jb	short loc_401D4D
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		jmp	short loc_401D36
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D4D:				; CODE XREF: sub_401D30+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		jmp	eax
sub_401D30	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401D60	proc near		; CODE XREF: start+3Ap

var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_C2		= dword	ptr -0C2h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		mov	[esp+18h+var_14], eax
		mov	[esp+18h+var_18], esi
		call	sub_401E50
		sub	esp, 8
		test	eax, eax
		jz	short loc_401D91
		mov	[esp+18h+var_18], 0

loc_401D8B:				; CODE XREF: sub_401D60+56j
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)

loc_401D91:				; CODE XREF: sub_401D60+22j
		sub	esp, 0C0h
		lea	ebx, [esp+0D8h+var_C2+1]
		and	ebx, 0FFFFFFF0h
		mov	dword ptr [ebx], 0
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	sub_401E50
		sub	esp, 8
		mov	[esp+0D8h+var_D8], ebx
		jmp	short loc_401D8B
sub_401D60	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION puts. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getreent. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fprintf. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION abort. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION exit. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION printf. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS KEYPAD "+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401E50	proc near		; CODE XREF: sub_401D60+18p
					; sub_401D60+4Bp

var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		push	ebx
		sub	esp, 4		; lpModuleName
		mov	ebx, [ebp+arg_4]
		test	ebx, ebx
		jz	loc_401F53

loc_401E64:				; CODE XREF: sub_401E50+11Fj
		mov	dword ptr [ebx+4], 0A8h
		xor	ecx, ecx
		mov	edx, 84h
		mov	dword ptr [ebx+8], 3EDh
		test	eax, eax
		mov	dword ptr [ebx+0Ch], 12h
		mov	[ebx+80h], ecx
		mov	[ebx+84h], edx
		mov	dword ptr [ebx+2Ch], offset dword_4020F8
		mov	dword ptr [ebx+30h], offset dword_402100
		mov	dword ptr [ebx+14h], offset unk_4044D4
		jnz	loc_401F41
		mov	eax, ds:_impure_ptr
		mov	[ebx+10h], eax

loc_401EB1:				; CODE XREF: sub_401E50+FEj
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+arg_0]
		mov	dword ptr [ebx+48h], offset sub_402040
		mov	dword ptr [ebx+4Ch], offset sub_402030
		mov	[ebx+28h], eax
		mov	eax, [ebp+0]
		mov	dword ptr [ebx+50h], offset sub_402020
		mov	dword ptr [ebx+54h], offset sub_402010
		mov	dword ptr [ebx+24h], offset unk_4044D0
		mov	[ebx], eax
		mov	dword ptr [ebx+18h], offset malloc
		mov	dword ptr [ebx+1Ch], offset free
		mov	dword ptr [ebx+20h], offset loc_402000
		mov	dword ptr [ebx+44h], offset loc_401FF0
		mov	[esp+8+var_8], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	dword ptr [ebx+34h], offset a2dAnglesFrom6_ ; "\n%2d angles from %6.2f to %5.2f	by %4.2"...
		mov	dword ptr [ebx+38h], offset a2dAnglesFrom6_ ; "\n%2d angles from %6.2f to %5.2f	by %4.2"...
		mov	dword ptr [ebx+3Ch], offset dword_404000
		mov	dword ptr [ebx+40h], 404500h
		call	sub_401FC0
		mov	eax, 1

loc_401F3A:				; CODE XREF: sub_401E50+116j
		mov	ebx, [ebp+var_4]
		leave
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F41:				; CODE XREF: sub_401E50+53j
		mov	edx, [ebx+0A4h]
		mov	eax, ds:_impure_ptr
		mov	[eax], edx
		jmp	loc_401EB1
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401F53:				; CODE XREF: sub_401E50+Ej
		mov	[esp+8+var_8], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_401F3A
		mov	ebx, edx
		mov	eax, 1
		jmp	loc_401E64
sub_401E50	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401F90	proc near		; CODE XREF: sub_401FC0+1Fp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ebx, [ebp+arg_4]
		jmp	short loc_401FAC
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401FA0:				; CODE XREF: sub_401F90+1Ej
		mov	edx, [ecx+4]
		mov	eax, [ecx]
		add	ecx, 8
		add	edx, esi
		add	[edx], eax

loc_401FAC:				; CODE XREF: sub_401F90+Ej
		cmp	ecx, ebx
		jb	short loc_401FA0
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_401F90	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401FC0	proc near		; CODE XREF: sub_401E50+E0p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	edx, 400000h
		mov	ebp, esp
		mov	eax, offset unk_403220
		sub	esp, 0Ch
		mov	[esp+0Ch+var_4], edx
		mov	[esp+0Ch+var_8], eax
		mov	[esp+0Ch+var_C], offset	unk_403220
		call	sub_401F90
		leave
		retn
sub_401FC0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401FF0:				; DATA XREF: sub_401E50+ABo
		jmp	ds:calloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_402000:				; DATA XREF: sub_401E50+A4o
		jmp	ds:realloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402010	proc near		; DATA XREF: sub_401E50+86o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402010	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402020	proc near		; DATA XREF: sub_401E50+7Fo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402020	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402030	proc near		; DATA XREF: sub_401E50+72o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402030	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_402040	proc near		; DATA XREF: sub_401E50+6Bo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_402040	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION optParseOptions3.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pgm_init.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_close.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_error.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_freerow. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pm_openr.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_allocpamrow. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_readpaminit. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION pnm_readpamrow. PRESS KEYPAD "+" TO EXPAND]
		align 4
dword_4020F8	dd 0FFFFFFFFh, 0	; DATA XREF: sub_401E50+3Eo
dword_402100	dd 0FFFFFFFFh, 3Fh dup(0) ; DATA XREF: sub_401E50+45o
_text		ends

; Section 2. (virtual address 00003000)
; Virtual size			: 00000220 (	544.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001600
; Flags	40000040: Data Readable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 403000h
a2dAnglesFrom6_	db 0Ah			; DATA XREF: sub_401050+2C7o
					; sub_401E50+C4o ...
		db '%2d angles from %6.2f to %5.2f by %4.2f:  best = %6.2f, S:N '
		db '= %4.2f',0Ah,0
a6_2f8_2f0D	db '%6.2f: %8.2f %0*d',0Ah,0 ; DATA XREF: sub_401050+31Eo
		align 4
flt_40305C	dd 1.5			; DATA XREF: sub_401050+3Br
flt_403060	dd 5.5555557e-3		; DATA XREF: sub_401050+F1r
		db    0	;
		db    0	;
		db    0	;
		db    0	;
dbl_403068	dq 3.141592653589793	; DATA XREF: sub_401050+E4r
flt_403070	dd 5.0e-1		; DATA XREF: sub_401050+349r
flt_403074	dd 6.0e1		; DATA XREF: sub_401050+323r
aFast		db 'fast',0             ; DATA XREF: sub_401420+46o
aVerbose	db 'verbose',0          ; DATA XREF: sub_401420+6Bo
aAngle		db 'angle',0            ; DATA XREF: sub_401420+8Fo
aQuality	db 'quality',0          ; DATA XREF: sub_401420+CFo
aAstep		db 'astep',0            ; DATA XREF: sub_401420+F2o
aHstep		db 'hstep',0            ; DATA XREF: sub_401420+15Eo
aVstep		db 'vstep',0            ; DATA XREF: sub_401420+1AEo
aDstep		db 'dstep',0            ; DATA XREF: sub_401420+1B9o
a00_00		db '00.00',0            ; DATA XREF: sub_401420+304o
		align 4
aMaxangleMustBe	db '-maxangle must be between 1 and 45 degrees.',0
					; DATA XREF: sub_401420+31Eo
asc_4030E0:				; DATA XREF: sub_401420+339o
		unicode	0, <->,0
aUnableToAlloca	db 'Unable to allocate array of %u pixel rows',0
					; DATA XREF: sub_401420+3D9o
		align 4
aUnableToAllo_0	db 'Unable to allocate array of %u rows',0 ; DATA XREF: sub_401420+3E5o
aDstepMustBeAtL	db '-dstep must be at least 1 row.',0 ; DATA XREF: sub_401420+6B5o
		align 4
aVstepMustBeAtL	db '-vstep must be at least 1 row.',0 ; DATA XREF: sub_401420+6C6o
		align 4
aHstepMustBeAtL	db '-hstep must be at least 1 column.',0 ; DATA XREF: sub_401420+6D7o
		align 4
aThereIsAtMostO	db 'There is at most one argument.  You specified %d',0
					; DATA XREF: sub_401420+6ECo
		align 4
aUnableToAllo_1	db 'Unable to allocate %u-sample array for Row %u',0
					; DATA XREF: sub_401420+723o
a_2f		db '%.2f',0Ah,0         ; DATA XREF: sub_401420+7D4o
flt_403200	dd 4.5e1		; DATA XREF: sub_401420+296r
flt_403204	dd 2.55e2		; DATA XREF: sub_401420+502r
flt_403208	dd 5.0e-1		; DATA XREF: sub_401420+67Cr
flt_40320C	dd 1.0e-1		; DATA XREF: sub_401420+75Ar
flt_403210	dd 9.0			; DATA XREF: sub_401420+79Ar
					; sub_401420+8C7r
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_403220	db    0	;		; DATA XREF: sub_401FC0+8o
					; sub_401FC0+18o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_rdata		ends

; Section 3. (virtual address 00004000)
; Virtual size			: 00000500 (   1280.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 404000h
		assume es:nothing, ss:nothing, ds:nothing, fs:nothing, gs:nothing
dword_404000	dd ?			; DATA XREF: start+9r sub_401E50+D2o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
byte_404010	db ?			; DATA XREF: sub_401420+12Ew
					; sub_401420+1DBo
		align 4
dword_404014	dd ?			; DATA XREF: sub_401420+58w
dword_404018	dd ?			; DATA XREF: sub_401420+4Dw
dword_40401C	dd ?			; DATA XREF: sub_401420+65w
dword_404020	dd ?			; DATA XREF: sub_401420+40w
dword_404024	dd ?			; DATA XREF: sub_401420+77w
byte_404028	db ?			; DATA XREF: sub_401420+135w
		align 4
dword_40402C	dd ?			; DATA XREF: sub_401420+82w
dword_404030	dd ?			; DATA XREF: sub_401420+94w
dword_404034	dd ?			; DATA XREF: sub_401420+8Aw
dword_404038	dd ?			; DATA XREF: sub_401420+70w
dword_40403C	dd ?			; DATA XREF: sub_401420+9Cw
byte_404040	db ?			; DATA XREF: sub_401420+13Cw
		align 4
dword_404044	dd ?			; DATA XREF: sub_401420+A7w
dword_404048	dd ?			; DATA XREF: sub_401420+B7w
dword_40404C	dd ?			; DATA XREF: sub_401420+C9w
dword_404050	dd ?			; DATA XREF: sub_401420+AEw
dword_404054	dd ?			; DATA XREF: sub_401420+BFw
byte_404058	db ?			; DATA XREF: sub_401420+143w
		align 4
dword_40405C	dd ?			; DATA XREF: sub_401420+E4w
dword_404060	dd ?			; DATA XREF: sub_401420+DDw
dword_404064	dd ?			; DATA XREF: sub_401420+ECw
dword_404068	dd ?			; DATA XREF: sub_401420+D4w
dword_40406C	dd ?			; DATA XREF: sub_401420+108w
byte_404070	db ?			; DATA XREF: sub_401420+14Aw
		align 4
dword_404074	dd ?			; DATA XREF: sub_401420+151w
dword_404078	dd ?			; DATA XREF: sub_401420+175w
dword_40407C	dd ?			; DATA XREF: sub_401420+159w
dword_404080	dd ?			; DATA XREF: sub_401420+F7w
dword_404084	dd ?			; DATA XREF: sub_401420+163w
byte_404088	db ?			; DATA XREF: sub_401420+23Aw
		align 4
dword_40408C	dd ?			; DATA XREF: sub_401420+16Ew
dword_404090	dd ?			; DATA XREF: sub_401420+17Dw
dword_404094	dd ?			; DATA XREF: sub_401420+1A8w
dword_404098	dd ?			; DATA XREF: sub_401420+18Fw
dword_40409C	dd ?			; DATA XREF: sub_401420+185w
byte_4040A0	db ?			; DATA XREF: sub_401420+241w
		align 4
dword_4040A4	dd ?			; DATA XREF: sub_401420+1C6w
dword_4040A8	dd ?			; DATA XREF: sub_401420+1A1w
dword_4040AC	dd ?			; DATA XREF: sub_401420+1B3w
dword_4040B0	dd ?			; DATA XREF: sub_401420+198w
dword_4040B4	dd ?			; DATA XREF: sub_401420+1E5w
byte_4040B8	db ?			; DATA XREF: sub_401420+248w
		align 4
dword_4040BC	dd ?			; DATA XREF: sub_401420+1CEw
dword_4040C0	dd ?			; DATA XREF: sub_401420+20Bw
dword_4040C4	dd ?			; DATA XREF: sub_401420+1D6w
dword_4040C8	dd ?			; DATA XREF: sub_401420+1BEw
dword_4040CC	dd ?			; DATA XREF: sub_401420+1F0w
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_4040D8	dd ?			; DATA XREF: sub_401420+21Dw
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_4044C0	dd ?			; DATA XREF: sub_401420+1F8w
					; sub_401420+206r ...
dword_4044C4	dd ?			; DATA XREF: sub_401420+1E0w
					; sub_401420+217r
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_4044D0	db    ?	;		; DATA XREF: sub_401E50+8Do
		db    ?	;
		db    ?	;
		db    ?	;
unk_4044D4	db    ?	;		; DATA XREF: sub_401E50+4Co
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
_bss		ends

;
; Imports from cygwin1
;
; Section 4. (virtual address 00005000)
; Virtual size			: 0000035C (	860.)
; Section size in file		: 00000400 (   1024.)
; Offset to raw	data for section: 00001A00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp___getreent:dword ; DATA XREF: __getreentr
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn _impure_ptr:dword	; DATA XREF: sub_401E50+59r
					; sub_401E50+F7r
; void _imp_abort(void)
		extrn __imp_abort:dword	; DATA XREF: abortr
; void *__cdecl	calloc(size_t,size_t)
		extrn calloc:dword	; DATA XREF: .text:00401FF0r
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_401D60+2Br
					; .text:00401F80r
; void __cdecl _imp_exit(int)
		extrn __imp_exit:dword	; DATA XREF: exitr
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
; void __cdecl _imp_free(void *)
		extrn __imp_free:dword	; DATA XREF: freer
; void *__cdecl	_imp_malloc(size_t)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
		extrn __imp_printf:dword ; DATA	XREF: printfr
		extrn __imp_puts:dword	; DATA XREF: putsr
; void *__cdecl	realloc(void *,size_t)
		extrn realloc:dword	; DATA XREF: .text:00402000r

;
; Imports from cygwin1
;
		extrn __imp_tan:dword	; DATA XREF: tanr


;
; Imports from KERNEL32
;
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr


;
; Imports from cygnetpbm-10
;
		extrn __imp_optParseOptions3:dword ; DATA XREF:	optParseOptions3r
		extrn __imp_pgm_init:dword ; DATA XREF:	pgm_initr
		extrn __imp_pm_close:dword ; DATA XREF:	pm_closer
		extrn __imp_pm_error:dword ; DATA XREF:	pm_errorr
		extrn __imp_pm_freerow:dword ; DATA XREF: pm_freerowr
		extrn __imp_pm_openr:dword ; DATA XREF:	pm_openrr
		extrn __imp_pnm_allocpamrow:dword ; DATA XREF: pnm_allocpamrowr
		extrn __imp_pnm_readpaminit:dword ; DATA XREF: pnm_readpaminitr
		extrn __imp_pnm_readpamrow:dword ; DATA	XREF: pnm_readpamrowr



		end start
