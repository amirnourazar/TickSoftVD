

;
; ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»
; º	This file is generated by The Interactive Disassembler (IDA)	    º
; º	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    º
; º Licensed to: Mark Stamp, San Jose State University,	1 user,	academic, 11/2003 º
; ÈÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼
;
; File Name   :	C:\Documents and Settings\Fiona\My Documents\CS	298_Metamorphic	virus\HMM\Cygwin\getclip.exe
; Format      :	Portable executable for	IBM PC (PE)
; Imagebase   :	400000
; Section 1. (virtual address 00001000)
; Virtual size			: 00000F60 (   3936.)
; Section size in file		: 00001000 (   4096.)
; Offset to raw	data for section: 00000400
; Flags	60000020: Text Executable Readable
; Alignment	: 16 bytes ?

		model flat

; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure code
; Segment permissions: Read/Execute
_text		segment	para public 'CODE' use32
		assume cs:_text
		;org 401000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

		public start
start		proc near

var_8		= dword	ptr -8
var_2		= word ptr -2

		push	ebp
		mov	ebp, esp
		sub	esp, 8
		and	esp, 0FFFFFFF0h
		mov	eax, ds:dword_404000
		test	eax, eax
		jz	short loc_401013
		int	3		; Trap to Debugger

loc_401013:				; CODE XREF: start+10j
		fnstcw	[ebp+var_2]
		movzx	eax, [ebp+var_2]
		and	eax, 0FFFFF0C0h
		mov	[ebp+var_2], ax
		movzx	eax, [ebp+var_2]
		or	eax, 33Fh
		mov	[ebp+var_2], ax
		fldcw	[ebp+var_2]
		mov	[esp+8+var_8], offset sub_401460
		call	sub_401B70
		leave
		retn
start		endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401050	proc near		; CODE XREF: sub_401460+17Dp
					; sub_401460+20Ap ...

var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_10		= dword	ptr -10h
var_C		= dword	ptr -0Ch

		push	ebp
		mov	ecx, offset aSVersionS ; "%s version %s\n"
		mov	ebp, esp
		push	ebx
		sub	esp, 14h
		mov	ebx, eax
		mov	[esp+18h+var_10], edx
		mov	eax, offset a0_2_0 ; "0.2.0"
		mov	[esp+18h+var_14], ecx
		mov	[esp+18h+var_18], ebx
		mov	[esp+18h+var_C], eax
		call	fprintf
		mov	[esp+18h+var_C], ebx
		mov	edx, 28h
		mov	eax, 1
		mov	[esp+18h+var_10], edx
		mov	[esp+18h+var_14], eax
		mov	[esp+18h+var_18], offset aCopyTheWindows ; "  Copy the Windows Clipboard to stdout\n"...
		call	fwrite
		add	esp, 14h
		pop	ebx
		pop	ebp
		retn
sub_401050	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_4010A0	proc near		; CODE XREF: sub_401460+548p

var_58		= dword	ptr -58h
var_54		= dword	ptr -54h
var_50		= dword	ptr -50h
var_4C		= dword	ptr -4Ch
var_3C		= dword	ptr -3Ch
var_38		= dword	ptr -38h
var_34		= dword	ptr -34h
var_30		= dword	ptr -30h
var_2C		= dword	ptr -2Ch
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_10		= dword	ptr  18h
arg_14		= dword	ptr  1Ch

		push	ebp
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 4Ch
		mov	[esp+58h+var_58], eax
		mov	[ebp+var_1C], eax
		call	fileno
		mov	[esp+58h+var_58], eax
		mov	edx, 10000h
		mov	[esp+58h+var_54], edx
		call	setmode
		mov	[ebp+var_28], eax
		mov	eax, [ebp+arg_0]
		cmp	eax, 2
		jz	loc_40130E

loc_4010D4:				; CODE XREF: sub_4010A0+323j
		test	eax, eax
		jz	short loc_401103
		dec	eax
		jz	loc_4011E0

loc_4010DF:				; CODE XREF: sub_4010A0+130j
					; sub_4010A0+23Dj
		mov	edx, [ebp+var_1C]
		mov	[esp+58h+var_58], edx
		call	fileno
		mov	[esp+58h+var_58], eax
		mov	edx, [ebp+var_28]
		mov	[esp+58h+var_54], edx
		call	setmode

loc_4010F9:				; CODE XREF: sub_4010A0+2BAj
		xor	eax, eax

loc_4010FB:				; CODE XREF: sub_4010A0+357j
		lea	esp, [ebp+var_C]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn			; hWndNewOwner
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401103:				; CODE XREF: sub_4010A0+36j
		mov	[esp+58h+var_58], 0
		call	OpenClipboard
		sub	esp, 4		; uFormat
		mov	[esp+58h+var_58], 1
		call	GetClipboardData
		mov	[ebp+var_20], eax
		sub	esp, 4		; hMem
		mov	[esp+58h+var_58], eax
		call	GlobalLock
		sub	esp, 4		; hMem
		mov	ebx, eax
		mov	[esp+58h+var_58], eax
		call	strlen
		mov	[ebp+var_30], eax
		mov	esi, eax
		lea	eax, [eax+1]
		mov	[ebp+var_24], ebx
		mov	[esp+58h+var_58], eax
		call	malloc
		test	eax, eax
		mov	edi, eax
		jz	loc_4013D7
		mov	[ebp+var_2C], 0
		mov	ebx, eax
		mov	eax, [ebp+var_24]
		cmp	esi, 1
		mov	ecx, eax
		jbe	short loc_401184
		lea	edx, [esi-1]
		lea	esi, [esi+0]

loc_401170:				; CODE XREF: sub_4010A0+E2j
		movzx	eax, byte ptr [eax]
		inc	ecx
		cmp	al, 0Dh
		jz	loc_4012E2

loc_40117C:				; CODE XREF: sub_4010A0+245j
		mov	[ebx], al
		inc	ebx

loc_40117F:				; CODE XREF: sub_4010A0+24Ej
		dec	edx
		mov	eax, ecx
		jnz	short loc_401170

loc_401184:				; CODE XREF: sub_4010A0+C7j
		movzx	eax, byte ptr [eax]
		mov	byte ptr [ebx+1], 0
		mov	[ebx], al
		mov	eax, [ebp+var_2C]
		mov	ebx, 1
		mov	[esp+58h+var_54], ebx
		mov	esi, [ebp+var_30]
		mov	[esp+58h+var_58], edi
		sub	esi, eax
		mov	eax, [ebp+var_1C]
		mov	[esp+58h+var_50], esi
		mov	[esp+58h+var_4C], eax
		call	fwrite
		mov	[esp+58h+var_58], edi
		call	free
		mov	edx, [ebp+var_20]
		mov	[esp+58h+var_58], edx
		call	GlobalUnlock
		sub	esp, 4		; hWndNewOwner
		call	CloseClipboard
		mov	eax, [ebp+arg_0]
		dec	eax
		jnz	loc_4010DF
		lea	esi, [esi+0]
		lea	edi, [edi+0]

loc_4011E0:				; CODE XREF: sub_4010A0+39j
		mov	[esp+58h+var_58], 0
		call	OpenClipboard
		sub	esp, 4		; uFormat
		xor	ebx, ebx
		mov	[esp+58h+var_58], 1
		call	GetClipboardData
		mov	[ebp+var_20], eax
		sub	esp, 4		; hMem
		mov	[esp+58h+var_58], eax
		call	GlobalLock
		mov	[ebp+var_34], eax
		sub	esp, 4		; hMem
		mov	[esp+58h+var_58], eax
		call	strlen
		mov	[ebp+var_38], eax
		mov	ecx, [ebp+var_34]
		mov	esi, eax
		cmp	byte ptr [ecx],	0Ah
		mov	edi, ecx
		jz	loc_4012F3

loc_40122C:				; CODE XREF: sub_4010A0+258j
		cmp	esi, 1
		jbe	short loc_401250
		lea	edx, [esi-1]
		jmp	short loc_40123B
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401236:				; CODE XREF: sub_4010A0+19Fj
		dec	edx
		mov	edi, ecx
		jz	short loc_401250

loc_40123B:				; CODE XREF: sub_4010A0+194j
					; sub_4010A0+1AEj
		inc	ecx
		cmp	byte ptr [ecx],	0Ah
		jnz	short loc_401236
		xor	eax, eax
		cmp	byte ptr [edi],	0Dh
		mov	edi, ecx
		setnz	al
		add	ebx, eax
		dec	edx
		jnz	short loc_40123B

loc_401250:				; CODE XREF: sub_4010A0+18Fj
					; sub_4010A0+199j
		mov	ecx, [ebp+var_38]
		add	ebx, ecx
		mov	eax, ebx
		mov	[ebp+var_3C], ebx
		inc	eax
		mov	[esp+58h+var_58], eax
		call	malloc
		test	eax, eax
		mov	esi, eax
		jz	loc_4013FC
		mov	ecx, [ebp+var_34]
		mov	edi, ecx
		movzx	eax, byte ptr [ecx]
		cmp	al, 0Ah
		jz	loc_4013C8
		mov	[esi], al
		lea	ebx, [esi+1]

loc_401282:				; CODE XREF: sub_4010A0+332j
		cmp	[ebp+var_38], 1
		jbe	short loc_4012A0
		mov	edx, [ebp+var_38]
		dec	edx
		lea	esi, [esi+0]

loc_401290:				; CODE XREF: sub_4010A0+1FEj
		inc	ecx
		movzx	eax, byte ptr [ecx]
		cmp	al, 0Ah
		jz	short loc_401300

loc_401298:				; CODE XREF: sub_4010A0+263j
		mov	[ebx], al

loc_40129A:				; CODE XREF: sub_4010A0+26Cj
		inc	ebx
		dec	edx
		mov	edi, ecx
		jnz	short loc_401290

loc_4012A0:				; CODE XREF: sub_4010A0+1E6j
		mov	byte ptr [ebx],	0
		mov	eax, [ebp+var_1C]
		mov	[esp+58h+var_58], esi
		mov	edx, [ebp+var_3C]
		mov	[esp+58h+var_4C], eax
		mov	eax, 1
		mov	[esp+58h+var_50], edx
		mov	[esp+58h+var_54], eax
		call	fwrite
		mov	[esp+58h+var_58], esi
		call	free
		mov	eax, [ebp+var_20]
		mov	[esp+58h+var_58], eax
		call	GlobalUnlock
		sub	esp, 4
		call	CloseClipboard
		jmp	loc_4010DF
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4012E2:				; CODE XREF: sub_4010A0+D6j
		cmp	byte ptr [ecx],	0Ah
		jnz	loc_40117C
		inc	[ebp+var_2C]
		jmp	loc_40117F
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4012F3:				; CODE XREF: sub_4010A0+186j
		mov	ebx, 1
		jmp	loc_40122C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

loc_401300:				; CODE XREF: sub_4010A0+1F6j
		cmp	byte ptr [edi],	0Dh
		jz	short loc_401298
		mov	byte ptr [ebx],	0Dh
		inc	ebx
		mov	byte ptr [ebx],	0Ah
		jmp	short loc_40129A
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40130E:				; CODE XREF: sub_4010A0+2Ej
		mov	[esp+58h+var_58], 0
		call	OpenClipboard
		sub	esp, 4		; lpszFormat
		mov	[esp+58h+var_58], offset aCygwin_native_ ; "CYGWIN_NATIVE_CLIPBOARD"
		call	RegisterClipboardFormatA
		mov	[ebp+var_18], eax
		sub	esp, 4		; paFormatPriorityList
		mov	esi, eax
		mov	[ebp+var_14], 1
		mov	eax, 2
		mov	[esp+58h+var_54], eax
		lea	eax, [ebp+var_18]
		mov	[esp+58h+var_58], eax
		call	GetPriorityClipboardFormat
		sub	esp, 8		; uFormat
		test	eax, eax
		mov	ebx, eax
		jnz	short loc_40135F
		call	CloseClipboard
		jmp	loc_4010F9
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40135F:				; CODE XREF: sub_4010A0+2B3j
		mov	[esp+58h+var_58], eax
		call	GetClipboardData
		mov	[ebp+var_20], eax
		sub	esp, 4		; hMem
		cmp	ebx, esi
		jz	loc_401416
		mov	eax, [ebp+var_20]
		mov	[esp+58h+var_58], eax
		call	GlobalLock
		sub	esp, 4		; hMem
		test	eax, eax
		mov	ebx, eax
		jz	short loc_4013BB
		mov	[esp+58h+var_58], eax
		call	strlen
		mov	[esp+58h+var_50], eax
		mov	edx, [ebp+var_1C]
		mov	eax, 1
		mov	[esp+58h+var_54], eax
		mov	[esp+58h+var_4C], edx
		mov	[esp+58h+var_58], ebx
		call	fwrite
		mov	eax, [ebp+var_20]
		mov	[esp+58h+var_58], eax

loc_4013B3:				; CODE XREF: sub_4010A0+3ACj
		call	GlobalUnlock
		sub	esp, 4		; hMem

loc_4013BB:				; CODE XREF: sub_4010A0+2E7j
					; sub_4010A0+383j
		call	CloseClipboard
		mov	eax, [ebp+arg_0]
		jmp	loc_4010D4
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4013C8:				; CODE XREF: sub_4010A0+1D7j
		mov	byte ptr [esi],	0Dh
		lea	ebx, [esi+2]
		mov	byte ptr [esi+1], 0Ah
		jmp	loc_401282
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4013D7:				; CODE XREF: sub_4010A0+B0j
		mov	eax, offset aSMemoryAllocat ; "%s: memory allocation error\n"
		mov	edx, [ebp+arg_14]
		mov	[esp+58h+var_54], eax
		mov	eax, [ebp+arg_10]
		mov	[esp+58h+var_50], edx

loc_4013EA:				; CODE XREF: sub_4010A0+374j
		mov	[esp+58h+var_58], eax
		call	fprintf
		mov	eax, 1
		jmp	loc_4010FB
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4013FC:				; CODE XREF: sub_4010A0+1C7j
		call	__getreent
		mov	edx, [ebp+arg_14]
		mov	[esp+58h+var_50], edx
		mov	edx, offset aSMemoryAllocat ; "%s: memory allocation error\n"
		mov	[esp+58h+var_54], edx
		mov	eax, [eax+0Ch]
		jmp	short loc_4013EA
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401416:				; CODE XREF: sub_4010A0+2CFj
		mov	[esp+58h+var_58], eax
		call	GlobalLock
		sub	esp, 4
		test	eax, eax
		jz	short loc_4013BB
		mov	esi, [eax]
		lea	edx, [eax+4]
		mov	eax, [ebp+var_1C]
		mov	[esp+58h+var_58], edx
		mov	[esp+58h+var_50], esi
		mov	[esp+58h+var_4C], eax
		mov	eax, 1
		mov	[esp+58h+var_54], eax
		call	fwrite
		mov	edx, [ebp+var_20]
		mov	[esp+58h+var_58], edx
		jmp	loc_4013B3
sub_4010A0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		jmp	short sub_401460
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401460	proc near		; CODE XREF: .text:00401451j
					; DATA XREF: start+33o

var_1B8		= dword	ptr -1B8h
var_1B4		= dword	ptr -1B4h
var_1B0		= dword	ptr -1B0h
var_1AC		= dword	ptr -1ACh
var_1A8		= dword	ptr -1A8h
var_1A4		= dword	ptr -1A4h
var_18C		= dword	ptr -18Ch
var_188		= dword	ptr -188h
var_184		= byte ptr -184h
var_180		= dword	ptr -180h
var_17C		= dword	ptr -17Ch
var_178		= dword	ptr -178h
var_174		= dword	ptr -174h
var_170		= dword	ptr -170h
var_16C		= dword	ptr -16Ch
var_168		= byte ptr -168h
var_164		= dword	ptr -164h
var_160		= dword	ptr -160h
var_15C		= dword	ptr -15Ch
var_158		= dword	ptr -158h
var_154		= dword	ptr -154h
var_150		= dword	ptr -150h
var_128		= dword	ptr -128h
var_98		= dword	ptr -98h
var_28		= dword	ptr -28h
var_24		= dword	ptr -24h
var_20		= dword	ptr -20h
var_1C		= dword	ptr -1Ch
var_C		= dword	ptr -0Ch
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	eax, 10h
		mov	ebp, esp
		push	edi
		push	esi
		push	ebx
		sub	esp, 1ACh
		and	esp, 0FFFFFFF0h
		call	sub_401B40
		call	__main
		cld
		xor	eax, eax
		lea	edi, [ebp+var_28]
		mov	[ebp+var_18C], eax
		mov	ecx, 4
		xor	eax, eax
		rep stosd
		mov	[ebp+var_28], 2
		lea	ebx, [ebp+var_98]
		mov	edi, 70h
		mov	[esp+1B8h+var_1B0], edi
		mov	esi, offset off_402000
		mov	edi, 4
		mov	[esp+1B8h+var_1B4], esi
		lea	esi, [ebp+var_128]
		mov	[esp+1B8h+var_1B8], ebx
		call	memcpy
		mov	[esp+1B8h+var_1B8], esi
		mov	ecx, 8Ch
		mov	edx, offset off_402070
		mov	[esp+1B8h+var_1B0], ecx
		mov	[esp+1B8h+var_1B4], edx
		call	memcpy
		mov	[ebp+var_164], edi
		xor	eax, eax
		xor	ecx, ecx
		mov	[ebp+var_188], eax
		mov	eax, 4
		lea	edi, [ebp+var_150]
		mov	[ebp+var_180], eax
		xor	eax, eax
		mov	[ebp+var_178], eax
		mov	eax, offset aGeneralOptions ; "General options"
		mov	[ebp+var_174], eax
		xor	eax, eax
		mov	[ebp+var_170], eax
		xor	eax, eax
		mov	[ebp+var_16C], eax
		mov	eax, [ebp+var_18C]
		mov	[ebp+var_154], ecx
		mov	ecx, 7
		cld
		rep stosd
		mov	[ebp+var_17C], ebx
		mov	edx, [ebp+arg_4]
		mov	ebx, offset aHelpOptions ; "Help options"
		mov	[ebp+var_184], 0
		mov	[ebp+var_168], 0
		mov	[ebp+var_158], ebx
		mov	eax, [edx]
		mov	[ebp+var_160], esi
		xor	esi, esi
		mov	[ebp+var_15C], esi
		mov	[esp+1B8h+var_1B8], eax
		call	strdup
		mov	ds:dword_404010, eax
		test	eax, eax
		jz	loc_401A4A
		xor	eax, eax
		mov	[esp+1B8h+var_1A8], eax
		lea	eax, [ebp+var_188]
		mov	[esp+1B8h+var_1AC], eax
		mov	eax, [ebp+arg_4]
		mov	[esp+1B8h+var_1B0], eax
		mov	eax, [ebp+arg_0]
		mov	[esp+1B8h+var_1B8], 0
		mov	[esp+1B8h+var_1B4], eax
		call	poptGetContext
		mov	edi, eax
		lea	esi, [esi+0]

loc_4015B0:				; CODE XREF: sub_401460+166j
					; sub_401460+168j ...
		mov	[esp+1B8h+var_1B8], edi	; default
		call	poptGetNextOpt
		test	eax, eax
		jle	loc_4018C9
		sub	eax, 3Fh	; switch 56 cases
		cmp	eax, 37h
		ja	short loc_4015B0 ; default
		jmp	ds:off_4035B4[eax*4] ; switch jump

loc_4015CF:				; DATA XREF: .rdata:004035B4o
		call	__getreent	; case 0x76
		mov	eax, [eax+0Ch]
		mov	edx, ds:dword_404010
		call	sub_401050

loc_4015E2:				; CODE XREF: sub_401460+553j
		mov	[esp+1B8h+var_1B8], edi
		call	poptFreeContext
		mov	eax, ds:dword_404010
		mov	[esp+1B8h+var_1B8], eax
		call	free
		mov	eax, [ebp+var_18C]
		lea	esp, [ebp+var_C]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401605:				; CODE XREF: sub_401460+168j
					; DATA XREF: .rdata:004035B4o
		call	__getreent	; case 0x75
		mov	eax, [eax+0Ch]
		xor	ecx, ecx
		mov	[esp+1B8h+var_1B0], ecx
		mov	[esp+1B8h+var_1B8], edi
		mov	[esp+1B8h+var_1B4], eax
		call	poptPrintUsage
		mov	[esp+1B8h+var_1B8], edi
		call	poptFreeContext
		mov	eax, ds:dword_404010
		mov	[esp+1B8h+var_1B8], eax
		call	free
		mov	eax, [ebp+var_18C]
		lea	esp, [ebp+var_C]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401642:				; CODE XREF: sub_401460+168j
					; DATA XREF: .rdata:004035B4o
		mov	[ebp+var_1C], 1	; case 0x6E
		mov	[ebp+var_28], 2
		jmp	loc_4015B0	; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401655:				; CODE XREF: sub_401460+168j
					; DATA XREF: .rdata:004035B4o
		call	__getreent	; case 0x6C
		mov	ebx, [eax+0Ch]
		mov	esi, 1
		mov	edx, ds:dword_404010
		mov	eax, ebx
		call	sub_401050
		mov	[esp+1B8h+var_1AC], ebx
		mov	edx, 3Eh
		mov	eax, 1
		mov	[esp+1B8h+var_1B0], edx
		mov	[esp+1B8h+var_1B4], eax
		mov	[esp+1B8h+var_1B8], offset aThisProgramIsF ; "This program is free software; you can "...
		call	fwrite
		mov	[esp+1B8h+var_1AC], ebx
		mov	eax, 3Ch
		mov	[esp+1B8h+var_1B0], eax
		mov	eax, 1
		mov	[esp+1B8h+var_1B4], eax
		mov	[esp+1B8h+var_1B8], offset aModifyItUnderT ; "modify it	under the terms	of the GNU Ge"...
		call	fwrite
		mov	[esp+1B8h+var_1AC], ebx
		mov	eax, 3Fh
		mov	[esp+1B8h+var_1B0], eax
		mov	eax, 1
		mov	[esp+1B8h+var_1B4], eax
		mov	[esp+1B8h+var_1B8], offset aAsPublishedByT ; "as published by the Free Software	Found"...
		call	fwrite
		mov	[esp+1B8h+var_1B4], esi
		mov	eax, 37h
		mov	esi, 42h
		mov	[esp+1B8h+var_1AC], ebx
		mov	[esp+1B8h+var_1B0], eax
		mov	[esp+1B8h+var_1B8], offset aOfTheLicenseOr ; "of the License, or (at your option) any"...
		call	fwrite
		mov	[esp+1B8h+var_1B4], ebx
		mov	[esp+1B8h+var_1B8], 0Ah
		call	fputc
		mov	[esp+1B8h+var_1AC], ebx
		mov	edx, 1
		mov	ecx, 40h
		mov	[esp+1B8h+var_1B4], edx
		mov	[esp+1B8h+var_1B0], ecx
		mov	[esp+1B8h+var_1B8], offset aThisProgramIsD ; "This program is distributed in the hope"...
		call	fwrite
		mov	[esp+1B8h+var_1AC], ebx
		mov	eax, 3Fh
		mov	[esp+1B8h+var_1B0], eax
		mov	eax, 1
		mov	[esp+1B8h+var_1B4], eax
		mov	[esp+1B8h+var_1B8], offset aButWithoutAnyW ; "but WITHOUT ANY WARRANTY;	without	even "...
		call	fwrite
		mov	[esp+1B8h+var_1AC], ebx
		mov	eax, 3Eh
		mov	[esp+1B8h+var_1B0], eax
		mov	eax, 1
		mov	[esp+1B8h+var_1B4], eax
		mov	[esp+1B8h+var_1B8], offset aMerchantabilit ; "MERCHANTABILITY or FITNESS FOR A PARTIC"...
		call	fwrite
		mov	[esp+1B8h+var_1AC], ebx
		mov	eax, 2Dh
		mov	[esp+1B8h+var_1B0], eax
		mov	eax, 1
		mov	[esp+1B8h+var_1B4], eax
		mov	[esp+1B8h+var_1B8], offset aGnuGeneralPubl ; "GNU General Public License for more det"...
		call	fwrite
		mov	[esp+1B8h+var_1B4], ebx
		mov	[esp+1B8h+var_1B8], 0Ah
		call	fputc
		mov	[esp+1B8h+var_1AC], ebx
		mov	ecx, 1
		mov	[esp+1B8h+var_1B4], ecx
		mov	[esp+1B8h+var_1B0], esi
		mov	[esp+1B8h+var_1B8], offset aYouShouldHaveR ; "You should have received a copy of the "...
		call	fwrite
		mov	[esp+1B8h+var_1AC], ebx
		mov	edx, 3Ch
		mov	eax, 1
		mov	[esp+1B8h+var_1B0], edx
		mov	[esp+1B8h+var_1B4], eax
		mov	[esp+1B8h+var_1B8], offset aAlongWithThisP ; "along with this program; if not, write "...
		call	fwrite
		mov	[esp+1B8h+var_1AC], ebx
		mov	eax, 4Ch
		mov	[esp+1B8h+var_1B0], eax
		mov	eax, 1
		mov	[esp+1B8h+var_1B4], eax
		mov	[esp+1B8h+var_1B8], offset aFoundationInc_ ; "Foundation, Inc.,	59 Temple Place	- Sui"...
		call	fwrite
		mov	[esp+1B8h+var_1B4], ebx
		mov	[esp+1B8h+var_1B8], 0Ah
		call	fputc
		mov	[esp+1B8h+var_1AC], ebx
		mov	eax, 2Eh
		mov	[esp+1B8h+var_1B0], eax
		mov	eax, 1
		mov	[esp+1B8h+var_1B4], eax
		mov	[esp+1B8h+var_1B8], offset aSeeTheCopyingF ; "See the COPYING file for license inform"...
		call	fwrite

loc_401832:				; CODE XREF: sub_401460+464j
		mov	[esp+1B8h+var_1B8], edi
		call	poptFreeContext
		mov	eax, ds:dword_404010
		mov	[esp+1B8h+var_1B8], eax
		call	free
		mov	eax, [ebp+var_18C]
		lea	esp, [ebp+var_C]
		pop	ebx
		pop	esi
		pop	edi
		pop	ebp
		retn
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401855:				; CODE XREF: sub_401460+168j
					; DATA XREF: .rdata:004035B4o
		mov	[ebp+var_20], 1	; case 0x64
		mov	[ebp+var_28], 1
		jmp	loc_4015B0	; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401868:				; CODE XREF: sub_401460+168j
					; DATA XREF: .rdata:004035B4o
		mov	[ebp+var_24], 1	; case 0x55
		mov	[ebp+var_28], 0
		jmp	loc_4015B0	; default
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_40187B:				; CODE XREF: sub_401460+168j
					; DATA XREF: .rdata:004035B4o
		call	__getreent	; case 0x3F
		mov	ebx, [eax+0Ch]
		mov	esi, 3Bh
		mov	edx, ds:dword_404010
		mov	eax, ebx
		call	sub_401050
		mov	[esp+1B8h+var_1B4], ebx
		xor	eax, eax
		mov	[esp+1B8h+var_1B0], eax
		mov	[esp+1B8h+var_1B8], edi
		call	poptPrintHelp
		mov	[esp+1B8h+var_1AC], ebx
		mov	ebx, 1
		mov	[esp+1B8h+var_1B0], esi
		mov	[esp+1B8h+var_1B4], ebx
		mov	[esp+1B8h+var_1B8], offset aNoteByDefaultN ; "\nNOTE: by default, no line ending conve"...
		call	fwrite
		jmp	loc_401832
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4018C9:				; CODE XREF: sub_401460+15Aj
		cmp	eax, 0FFFFFFFFh
		jl	loc_4019F8
		mov	ebx, [ebp+var_20]
		test	ebx, ebx
		jnz	loc_4019B8

loc_4018DD:				; CODE XREF: sub_401460+568j
		mov	ebx, [ebp+var_24]
		test	ebx, ebx
		jz	short loc_4018EF
		mov	ecx, [ebp+var_1C]
		test	ecx, ecx
		jnz	loc_401A78

loc_4018EF:				; CODE XREF: sub_401460+482j
		mov	[esp+1B8h+var_1B8], edi
		call	poptGetArgs
		test	eax, eax
		mov	ebx, eax
		jz	short loc_40196D
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+1B8h+var_1B8], offset aExtraArgsIgnor ; "Extra args ignored: "
		mov	[esp+1B8h+var_1AC], eax
		mov	eax, 14h
		mov	[esp+1B8h+var_1B0], eax
		mov	eax, 1
		mov	[esp+1B8h+var_1B4], eax
		call	fwrite
		mov	esi, [ebx]
		test	esi, esi
		jz	short loc_401955

loc_40192D:				; CODE XREF: sub_401460+4F3j
		call	__getreent
		mov	edx, [ebx]
		mov	ecx, offset aS	; "%s "
		add	ebx, 4
		mov	[esp+1B8h+var_1B4], ecx
		mov	[esp+1B8h+var_1B0], edx
		mov	eax, [eax+0Ch]
		mov	[esp+1B8h+var_1B8], eax
		call	fprintf
		mov	esi, [ebx]
		test	esi, esi
		jnz	short loc_40192D

loc_401955:				; CODE XREF: sub_401460+4CBj
		call	__getreent
		mov	eax, [eax+0Ch]
		mov	[esp+1B8h+var_1B8], 0Ah
		mov	[esp+1B8h+var_1B4], eax
		call	fputc

loc_40196D:				; CODE XREF: sub_401460+49Bj
		call	__getreent
		mov	ebx, eax
		call	__getreent
		mov	edx, ds:dword_404010
		mov	eax, [eax+8]
		mov	[esp+1B8h+var_1A4], edx
		mov	edx, [ebx+0Ch]
		mov	[esp+1B8h+var_1A8], edx
		mov	edx, [ebp+var_28]
		mov	[esp+1B8h+var_1B8], edx
		mov	edx, [ebp+var_24]
		mov	[esp+1B8h+var_1B4], edx
		mov	edx, [ebp+var_20]
		mov	[esp+1B8h+var_1B0], edx
		mov	edx, [ebp+var_1C]
		mov	[esp+1B8h+var_1AC], edx
		call	sub_4010A0

loc_4019AD:				; CODE XREF: sub_401460+596j
					; sub_401460+5E5j
		mov	[ebp+var_18C], eax
		jmp	loc_4015E2
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019B8:				; CODE XREF: sub_401460+477j
		mov	ecx, [ebp+var_24]
		test	ecx, ecx
		jnz	loc_401A95
		mov	eax, [ebp+var_1C]
		test	eax, eax
		jz	loc_4018DD
		call	__getreent
		mov	edx, ds:dword_404010
		mov	esi, offset aSCanTSpecifyBo ; "%s: can't specify both --dos  and --no-"...
		mov	[esp+1B8h+var_1B4], esi
		mov	[esp+1B8h+var_1B0], edx

loc_4019E6:				; CODE XREF: sub_401460+630j
					; sub_401460+64Dj
		mov	eax, [eax+0Ch]
		mov	[esp+1B8h+var_1B8], eax
		call	fprintf
		mov	eax, 2
		jmp	short loc_4019AD
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_4019F8:				; CODE XREF: sub_401460+46Cj
		mov	[esp+1B8h+var_1B8], eax
		call	poptStrerror
		mov	[esp+1B8h+var_1B8], edi
		mov	esi, eax
		mov	eax, 1
		mov	[esp+1B8h+var_1B4], eax
		call	poptBadOption
		mov	ebx, eax
		call	__getreent
		mov	[esp+1B8h+var_1A8], esi
		mov	esi, offset aSBadArgumentSS ; "%s: bad argument	%s: %s\n"
		mov	[esp+1B8h+var_1AC], ebx
		mov	edx, ds:dword_404010
		mov	[esp+1B8h+var_1B4], esi
		mov	[esp+1B8h+var_1B0], edx
		mov	eax, [eax+0Ch]
		mov	[esp+1B8h+var_1B8], eax
		call	fprintf
		mov	eax, 2
		jmp	loc_4019AD
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A4A:				; CODE XREF: sub_401460+118j
		call	__getreent
		mov	ecx, [ebp+arg_4]
		mov	edx, [ecx]
		mov	[esp+1B8h+var_1B0], edx
		mov	edx, offset aSMemoryAllocat ; "%s: memory allocation error\n"
		mov	[esp+1B8h+var_1B4], edx
		mov	eax, [eax+0Ch]
		mov	[esp+1B8h+var_1B8], eax
		call	fprintf
		mov	[esp+1B8h+var_1B8], 1
		call	exit

loc_401A78:				; CODE XREF: sub_401460+489j
		call	__getreent
		mov	edx, ds:dword_404010
		mov	[esp+1B8h+var_1B0], edx
		mov	edx, offset aSCanTSpecify_0 ; "%s: can't specify both --unix  and --no"...
		mov	[esp+1B8h+var_1B4], edx
		jmp	loc_4019E6
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401A95:				; CODE XREF: sub_401460+55Dj
		call	__getreent
		mov	edx, ds:dword_404010
		mov	[esp+1B8h+var_1B0], edx
		mov	edx, offset aSCanTSpecify_1 ; "%s: can't specify both --unix and --dos"...
		mov	[esp+1B8h+var_1B4], edx
		jmp	loc_4019E6
sub_401460	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION poptPrintHelp. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION poptPrintUsage. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION poptFreeContext. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION poptGetArgs. PRESS KEYPAD	"+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION poptStrerror. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION poptBadOption. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION poptGetNextOpt. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION poptGetContext. PRESS KEYPAD "+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ


sub_401B40	proc near		; CODE XREF: sub_401460+14p
		push	ecx
		mov	ecx, esp
		add	ecx, 8

loc_401B46:				; CODE XREF: sub_401B40+1Bj
		cmp	eax, 1000h
		jb	short loc_401B5D
		sub	ecx, 1000h
		or	dword ptr [ecx], 0
		sub	eax, 1000h
		jmp	short loc_401B46
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401B5D:				; CODE XREF: sub_401B40+Bj
		sub	ecx, eax
		or	dword ptr [ecx], 0
		mov	eax, esp
		mov	esp, ecx
		mov	ecx, [eax]
		mov	eax, [eax+4]
		jmp	eax
sub_401B40	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 4

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401B70	proc near		; CODE XREF: start+3Ap

var_D8		= dword	ptr -0D8h
var_D4		= dword	ptr -0D4h
var_C2		= dword	ptr -0C2h
var_18		= dword	ptr -18h
var_14		= dword	ptr -14h
var_8		= dword	ptr -8
var_4		= dword	ptr -4
arg_0		= dword	ptr  8

		push	ebp
		xor	eax, eax
		mov	ebp, esp
		sub	esp, 18h
		mov	[ebp+var_4], esi
		mov	esi, [ebp+arg_0]
		mov	[ebp+var_8], ebx
		mov	[esp+18h+var_14], eax
		mov	[esp+18h+var_18], esi
		call	sub_401CA0
		sub	esp, 8
		test	eax, eax
		jz	short loc_401BA1
		mov	[esp+18h+var_18], 0

loc_401B9B:				; CODE XREF: sub_401B70+56j
		call	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)

loc_401BA1:				; CODE XREF: sub_401B70+22j
		sub	esp, 0C0h
		lea	ebx, [esp+0D8h+var_C2+1]
		and	ebx, 0FFFFFFF0h
		mov	dword ptr [ebx], 0
		mov	[esp+0D8h+var_D4], ebx
		mov	[esp+0D8h+var_D8], esi
		call	sub_401CA0
		sub	esp, 8
		mov	[esp+0D8h+var_D8], ebx
		jmp	short loc_401B9B
sub_401B70	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __main. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fputc. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION memcpy. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fwrite. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION malloc. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strlen. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fileno. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION setmode. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION free. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION exit. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION __getreent. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION fprintf. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION strdup. PRESS KEYPAD "+" TO EXPAND]
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401CA0	proc near		; CODE XREF: sub_401B70+18p
					; sub_401B70+4Bp

var_18		= dword	ptr -18h
var_8		= dword	ptr -8
arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch

		push	ebp
		mov	ebp, esp
		push	esi
		push	ebx
		sub	esp, 10h	; lpModuleName
		mov	ebx, [ebp+arg_4]
		mov	esi, [ebp+arg_0]
		test	ebx, ebx
		jz	loc_401D8A
		mov	dword ptr [ebx+4], 0A8h
		xor	eax, eax
		mov	ecx, 96h
		mov	dword ptr [ebx+8], 3EDh
		mov	dword ptr [ebx+0Ch], 13h
		mov	[ebx+80h], eax
		mov	[ebx+84h], ecx
		mov	dword ptr [ebx+2Ch], offset dword_401F50
		mov	dword ptr [ebx+30h], offset dword_401F58
		mov	dword ptr [ebx+14h], offset unk_404024
		mov	eax, ds:_impure_ptr
		mov	[ebx+10h], eax

loc_401CFB:				; CODE XREF: sub_401CA0+14Bj
		mov	dword ptr [ebx+78h], 0
		mov	eax, [ebp+0]
		mov	[ebx+28h], esi
		mov	dword ptr [ebx+48h], offset sub_401EB0
		mov	dword ptr [ebx+4Ch], offset sub_401EA0
		mov	dword ptr [ebx+50h], offset sub_401E90
		mov	dword ptr [ebx+54h], offset sub_401E80
		mov	dword ptr [ebx+24h], offset unk_404020
		mov	[ebx], eax
		mov	dword ptr [ebx+18h], offset malloc
		mov	dword ptr [ebx+1Ch], offset free
		mov	dword ptr [ebx+20h], offset loc_401E70
		mov	dword ptr [ebx+44h], offset loc_401E60
		mov	[esp+18h+var_18], 0
		call	GetModuleHandleA
		mov	[ebx+7Ch], eax
		sub	esp, 4
		mov	dword ptr [ebx+34h], offset off_402000
		mov	dword ptr [ebx+38h], offset unk_402100
		mov	dword ptr [ebx+3Ch], offset dword_404000
		mov	dword ptr [ebx+40h], 404050h
		call	sub_401E30
		mov	eax, 1

loc_401D81:				; CODE XREF: sub_401CA0+FDj
		lea	esp, [ebp+var_8]
		pop	ebx
		pop	esi
		pop	ebp
		retn	8
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401D8A:				; CODE XREF: sub_401CA0+10j
		mov	[esp+18h+var_18], 8
		call	cygwin_internal
		mov	edx, eax
		xor	eax, eax
		cmp	edx, 0FFFFFFFFh
		jz	short loc_401D81
		mov	dword ptr [edx+4], 0A8h
		mov	ebx, edx
		mov	eax, 96h
		mov	dword ptr [edx+8], 3EDh
		mov	dword ptr [edx+0Ch], 13h
		xor	edx, edx
		mov	[ebx+80h], edx
		mov	edx, [ebx+0A4h]
		mov	[ebx+84h], eax
		mov	dword ptr [ebx+2Ch], offset dword_401F50
		mov	dword ptr [ebx+30h], offset dword_401F58
		mov	dword ptr [ebx+14h], offset unk_404024
		mov	eax, ds:_impure_ptr
		mov	[eax], edx
		jmp	loc_401CFB
sub_401CA0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		jmp	ds:dll_crt0__FP11per_process ; dll_crt0(per_process *)
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401E00	proc near		; CODE XREF: sub_401E30+1Fp

arg_0		= dword	ptr  8
arg_4		= dword	ptr  0Ch
arg_8		= dword	ptr  10h

		push	ebp
		mov	ebp, esp
		mov	ecx, [ebp+arg_0]
		push	esi
		mov	esi, [ebp+arg_8]
		push	ebx
		mov	ebx, [ebp+arg_4]
		jmp	short loc_401E1C
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ

loc_401E10:				; CODE XREF: sub_401E00+1Ej
		mov	edx, [ecx+4]
		mov	eax, [ecx]
		add	ecx, 8
		add	edx, esi
		add	[edx], eax

loc_401E1C:				; CODE XREF: sub_401E00+Ej
		cmp	ecx, ebx
		jb	short loc_401E10
		pop	ebx
		pop	esi
		pop	ebp
		retn
sub_401E00	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401E30	proc near		; CODE XREF: sub_401CA0+D7p

var_C		= dword	ptr -0Ch
var_8		= dword	ptr -8
var_4		= dword	ptr -4

		push	ebp
		mov	edx, 400000h
		mov	ebp, esp
		mov	eax, offset unk_4036A0
		sub	esp, 0Ch
		mov	[esp+0Ch+var_4], edx
		mov	[esp+0Ch+var_8], eax
		mov	[esp+0Ch+var_C], offset	unk_4036A0
		call	sub_401E00
		leave
		retn
sub_401E30	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401E60:				; DATA XREF: sub_401CA0+A2o
		jmp	ds:calloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

loc_401E70:				; DATA XREF: sub_401CA0+9Bo
		jmp	ds:realloc
; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401E80	proc near		; DATA XREF: sub_401CA0+7Do
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401E80	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401E90	proc near		; DATA XREF: sub_401CA0+76o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401E90	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401EA0	proc near		; DATA XREF: sub_401CA0+6Fo
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401EA0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h

; ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ S U B	R O U T	I N E ÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛÛ

; Attributes: bp-based frame

sub_401EB0	proc near		; DATA XREF: sub_401CA0+68o
		push	ebp
		mov	ebp, esp
		pop	ebp
		retn
sub_401EB0	endp

; ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION cygwin_internal. PRESS KEYPAD "+"	TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION OpenClipboard. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetClipboardData.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION CloseClipboard. PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION RegisterClipboardFormatA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetPriorityClipboardFormat. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GlobalLock. PRESS	KEYPAD "+" TO EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GlobalUnlock. PRESS KEYPAD "+" TO	EXPAND]
		align 10h
; [00000006 BYTES: COLLAPSED FUNCTION GetModuleHandleA.	PRESS KEYPAD "+" TO EXPAND]
		align 10h
dword_401F50	dd 0FFFFFFFFh, 0	; DATA XREF: sub_401CA0+3Eo
					; sub_401CA0+12Fo
dword_401F58	dd 0FFFFFFFFh, 29h dup(0) ; DATA XREF: sub_401CA0+45o
					; sub_401CA0+136o
_text		ends

; Section 2. (virtual address 00002000)
; Virtual size			: 00000100 (	256.)
; Section size in file		: 00000200 (	512.)
; Offset to raw	data for section: 00001400
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read/Write
_data		segment	para public 'DATA' use32
		assume cs:_data
		;org 402000h
off_402000	dd offset aDos		; DATA XREF: sub_401460+49o
					; sub_401CA0+BBo
					; "dos"
		db  64h	; d
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  64h	; d
		db    0	;
		db    0	;
		db    0	;
		db  7Ch	; |
		db  30h	; 0
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db 0A4h	; ¤
		db  30h	; 0
		db  40h	; @
		db    0	;
		db  75h	; u
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  55h	; U
		db    0	;
		db    0	;
		db    0	;
		db 0ACh	; ¬
		db  30h	; 0
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db 0D5h	; Õ
		db  30h	; 0
		db  40h	; @
		db    0	;
		db  6Eh	; n
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  6Eh	; n
		db    0	;
		db    0	;
		db    0	;
		db 0E0h	; à
		db  30h	; 0
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
off_402070	dd offset aHelp		; DATA XREF: sub_401460+6Do
					; "help"
		db  3Fh	; ?
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  3Fh	; ?
		db    0	;
		db    0	;
		db    0	;
		db    4	;
		db  31h	; 1
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  1Bh	;
		db  31h	; 1
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  75h	; u
		db    0	;
		db    0	;
		db    0	;
		db  21h	; !
		db  31h	; 1
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  3Dh	; =
		db  31h	; 1
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  76h	; v
		db    0	;
		db    0	;
		db    0	;
		db  45h	; E
		db  31h	; 1
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  61h	; a
		db  31h	; 1
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db  6Ch	; l
		db    0	;
		db    0	;
		db    0	;
		db  69h	; i
		db  31h	; 1
		db  40h	; @
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_402100	db    0	;		; DATA XREF: sub_401CA0+C2o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_data		ends

; Section 3. (virtual address 00003000)
; Virtual size			: 000006A0 (   1696.)
; Section size in file		: 00000800 (   2048.)
; Offset to raw	data for section: 00001600
; Flags	40000040: Data Readable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Pure data
; Segment permissions: Read
_rdata		segment	para public 'DATA' use32
		assume cs:_rdata
		;org 403000h
a0_2_0		db '0.2.0',0            ; DATA XREF: sub_401050+12o
aSVersionS	db '%s version %s',0Ah,0 ; DATA XREF: sub_401050+1o
		align 4
aCopyTheWindows	db '  Copy the Windows Clipboard to stdout',0Ah ; DATA XREF: sub_401050+3Do
		db 0Ah,0
aCygwin_native_	db 'CYGWIN_NATIVE_CLIPBOARD',0 ; DATA XREF: sub_4010A0+27Do
aSMemoryAllocat	db '%s: memory allocation error',0Ah,0 ; DATA XREF: sub_4010A0+337o
					; sub_4010A0+368o ...
aDos		db 'dos',0              ; DATA XREF: .data:00402000o
		align 4
aOutputTextWill	db 'Output text will have DOS line endings.',0
aUnix		db 'unix',0
		align 4
aOutputTextWi_0	db 'Output text will have UNIX line endings.',0
aNoConv		db 'no-conv',0
		align 4
aDoNotTranslate	db 'Do not translate line endings.',0
aHelp		db 'help',0             ; DATA XREF: .data:00402070o
aShowThisHelpMe	db 'Show this help message',0
aUsage		db 'usage',0
aDisplayBriefUs	db 'Display brief usage message',0
aVersion	db 'version',0
aDisplayVersion	db 'Display version information',0
aLicense	db 'license',0
aDisplayLicensi	db 'Display licensing information',0
aGeneralOptions	db 'General options',0  ; DATA XREF: sub_401460+A8o
aHelpOptions	db 'Help options',0     ; DATA XREF: sub_401460+E0o
aThisProgramIsF	db 'This program is free software; you can redistribute it and/o'
					; DATA XREF: sub_401460+225o
		db 'r',0Ah,0
		align 4
aModifyItUnderT	db 'modify it under the terms of the GNU General Public License',0Ah
					; DATA XREF: sub_401460+247o
		db 0
		align 4
aAsPublishedByT	db 'as published by the Free Software Foundation; either version'
					; DATA XREF: sub_401460+269o
		db ' 2',0Ah,0
aOfTheLicenseOr	db 'of the License, or (at your option) any later version.',0Ah,0
					; DATA XREF: sub_401460+28Bo
aThisProgramIsD	db 'This program is distributed in the hope that it will be usef'
					; DATA XREF: sub_401460+2BDo
		db 'ul,',0Ah,0
		align 4
aButWithoutAnyW	db 'but WITHOUT ANY WARRANTY; without even the implied warranty '
					; DATA XREF: sub_401460+2DFo
		db 'of',0Ah,0
aMerchantabilit	db 'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See th'
					; DATA XREF: sub_401460+301o
		db 'e',0Ah,0
		align 4
aGnuGeneralPubl	db 'GNU General Public License for more details.',0Ah,0
					; DATA XREF: sub_401460+323o
		align 4
aYouShouldHaveR	db 'You should have received a copy of the GNU General Public Li'
					; DATA XREF: sub_401460+350o
		db 'cense',0Ah,0
		align 4
aAlongWithThisP	db 'along with this program; if not, write to the Free Software',0Ah
					; DATA XREF: sub_401460+372o
		db 0
		align 4
aFoundationInc_	db 'Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  0'
					; DATA XREF: sub_401460+394o
		db '2111-1307, USA.',0Ah,0
		align 4
aSeeTheCopyingF	db 'See the COPYING file for license information.',0Ah,0
					; DATA XREF: sub_401460+3C6o
		align 4
aNoteByDefaultN	db 0Ah			; DATA XREF: sub_401460+458o
		db 'NOTE: by default, no line ending conversion is performed.',0Ah
		db 0
aExtraArgsIgnor	db 'Extra args ignored: ',0 ; DATA XREF: sub_401460+4A5o
aS		db '%s ',0              ; DATA XREF: sub_401460+4D4o
		align 4
aSCanTSpecifyBo	db '%s: can',27h,'t specify both --dos  and --no-conv (-d and -n'
					; DATA XREF: sub_401460+579o
		db ')',0Ah,0
aSBadArgumentSS	db '%s: bad argument %s: %s',0Ah,0 ; DATA XREF: sub_401460+5BEo
		align 4
aSCanTSpecify_0	db '%s: can',27h,'t specify both --unix  and --no-conv (-u and -'
					; DATA XREF: sub_401460+627o
		db 'n)',0Ah,0
		align 4
aSCanTSpecify_1	db '%s: can',27h,'t specify both --unix and --dos (-u and -d)',0Ah
					; DATA XREF: sub_401460+644o
		db 0
		align 4
off_4035B4	dd offset loc_40187B, offset loc_4015B0, offset	loc_4015B0
					; DATA XREF: sub_401460+168r
		dd offset loc_4015B0, offset loc_4015B0, offset	loc_4015B0 ; jump table	for switch statement
		dd offset loc_4015B0, offset loc_4015B0, offset	loc_4015B0
		dd offset loc_4015B0, offset loc_4015B0, offset	loc_4015B0
		dd offset loc_4015B0, offset loc_4015B0, offset	loc_4015B0
		dd offset loc_4015B0, offset loc_4015B0, offset	loc_4015B0
		dd offset loc_4015B0, offset loc_4015B0, offset	loc_4015B0
		dd offset loc_4015B0, offset loc_401868, offset	loc_4015B0
		dd offset loc_4015B0, offset loc_4015B0, offset	loc_4015B0
		dd offset loc_4015B0, offset loc_4015B0, offset	loc_4015B0
		dd offset loc_4015B0, offset loc_4015B0, offset	loc_4015B0
		dd offset loc_4015B0, offset loc_4015B0, offset	loc_4015B0
		dd offset loc_4015B0, offset loc_401855, offset	loc_4015B0
		dd offset loc_4015B0, offset loc_4015B0, offset	loc_4015B0
		dd offset loc_4015B0, offset loc_4015B0, offset	loc_4015B0
		dd offset loc_401655, offset loc_4015B0, offset	loc_401642
		dd offset loc_4015B0, offset loc_4015B0, offset	loc_4015B0
		dd offset loc_4015B0, offset loc_4015B0, offset	loc_4015B0
		dd offset loc_401605, offset loc_4015CF
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
unk_4036A0	db    0	;		; DATA XREF: sub_401E30+8o
					; sub_401E30+18o
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
		db    0	;
_rdata		ends

; Section 4. (virtual address 00004000)
; Virtual size			: 00000050 (	 80.)
; Section size in file		: 00000000 (	  0.)
; Offset to raw	data for section: 00000000
; Flags	C0000080: Bss Readable Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Uninitialized
; Segment permissions: Read/Write
_bss		segment	para public 'BSS' use32
		assume cs:_bss
		;org 404000h
		assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
dword_404000	dd ?			; DATA XREF: start+9r sub_401CA0+C9o
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
dword_404010	dd ?			; DATA XREF: sub_401460+111w
					; sub_401460+177r ...
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
unk_404020	db    ?	;		; DATA XREF: sub_401CA0+84o
		db    ?	;
		db    ?	;
		db    ?	;
unk_404024	db    ?	;		; DATA XREF: sub_401CA0+4Co
					; sub_401CA0+13Do
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
		db    ?	;
_bss		ends

;
; Imports from cygwin1
;
; Section 5. (virtual address 00005000)
; Virtual size			: 00000498 (   1176.)
; Section size in file		: 00000600 (   1536.)
; Offset to raw	data for section: 00001E00
; Flags	C0000040: Data Readable	Writable
; Alignment	: 16 bytes ?
; ÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ

; Segment type:	Externs
; _idata
		extrn __imp___getreent:dword ; DATA XREF: __getreentr
		extrn __imp___main:dword ; DATA	XREF: __mainr
		extrn _impure_ptr:dword	; DATA XREF: sub_401CA0+53r
					; sub_401CA0+144r
; void *__cdecl	calloc(size_t,size_t)
		extrn calloc:dword	; DATA XREF: .text:00401E60r
		extrn __imp_cygwin_internal:dword ; DATA XREF: cygwin_internalr
; dll_crt0(per_process *)
		extrn dll_crt0__FP11per_process:dword ;	DATA XREF: sub_401B70+2Br
					; .text:00401DF0r
; void __cdecl _imp_exit(int)
		extrn __imp_exit:dword	; DATA XREF: exitr
		extrn __imp_fileno:dword ; DATA	XREF: filenor
		extrn __imp_fprintf:dword ; DATA XREF: fprintfr
		extrn __imp_fputc:dword	; DATA XREF: fputcr
; void __cdecl _imp_free(void *)
		extrn __imp_free:dword	; DATA XREF: freer
		extrn __imp_fwrite:dword ; DATA	XREF: fwriter
; void *__cdecl	_imp_malloc(size_t)
		extrn __imp_malloc:dword ; DATA	XREF: mallocr
; void *__cdecl	_imp_memcpy(void *,const void *,size_t)
		extrn __imp_memcpy:dword ; DATA	XREF: memcpyr
; void *__cdecl	realloc(void *,size_t)
		extrn realloc:dword	; DATA XREF: .text:00401E70r
		extrn __imp_setmode:dword ; DATA XREF: setmoder
; char *__cdecl	_imp_strdup(const char *)
		extrn __imp_strdup:dword ; DATA	XREF: strdupr
; size_t __cdecl _imp_strlen(const char	*)
		extrn __imp_strlen:dword ; DATA	XREF: strlenr


;
; Imports from cygpopt-0
;
		extrn __imp_poptBadOption:dword	; DATA XREF: poptBadOptionr
		extrn __imp_poptFreeContext:dword ; DATA XREF: poptFreeContextr
		extrn __imp_poptGetArgs:dword ;	DATA XREF: poptGetArgsr
		extrn __imp_poptGetContext:dword ; DATA	XREF: poptGetContextr
		extrn __imp_poptGetNextOpt:dword ; DATA	XREF: poptGetNextOptr
		extrn __imp_poptPrintHelp:dword	; DATA XREF: poptPrintHelpr
		extrn __imp_poptPrintUsage:dword ; DATA	XREF: poptPrintUsager
		extrn __imp_poptStrerror:dword ; DATA XREF: poptStrerrorr


;
; Imports from KERNEL32
;
; HMODULE __stdcall __imp_GetModuleHandleA(LPCSTR lpModuleName)
		extrn __imp_GetModuleHandleA:dword ; DATA XREF:	GetModuleHandleAr
; LPVOID __stdcall __imp_GlobalLock(HGLOBAL hMem)
		extrn __imp_GlobalLock:dword ; DATA XREF: GlobalLockr
; BOOL __stdcall __imp_GlobalUnlock(HGLOBAL hMem)
		extrn __imp_GlobalUnlock:dword ; DATA XREF: GlobalUnlockr


;
; Imports from USER32
;
; BOOL _imp_CloseClipboard(void)
		extrn __imp_CloseClipboard:dword ; DATA	XREF: CloseClipboardr
; HANDLE __stdcall __imp_GetClipboardData(UINT uFormat)
		extrn __imp_GetClipboardData:dword ; DATA XREF:	GetClipboardDatar
; int __stdcall	__imp_GetPriorityClipboardFormat(UINT *paFormatPriorityList,int	cFormats)
		extrn __imp_GetPriorityClipboardFormat:dword
					; DATA XREF: GetPriorityClipboardFormatr
; BOOL __stdcall __imp_OpenClipboard(HWND hWndNewOwner)
		extrn __imp_OpenClipboard:dword	; DATA XREF: OpenClipboardr
; UINT __stdcall __imp_RegisterClipboardFormatA(LPCSTR lpszFormat)
		extrn __imp_RegisterClipboardFormatA:dword
					; DATA XREF: RegisterClipboardFormatAr



		end start
